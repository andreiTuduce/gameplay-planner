[{"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\cardMapping.js":"1","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\page.js":"2","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\page_content.jsx":"3","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\page.js":"4","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\page_content.jsx":"5","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\PetItem.js":"6","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\PetItemCoin.jsx":"7","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\farmingWorker.js":"8","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\FarmPlant.jsx":"9","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\graph.jsx":"10","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\page.js":"11","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\page_content.jsx":"12","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\Timer.jsx":"13","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\gratitude\\page.js":"14","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\gratitude\\page_content.jsx":"15","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\layout.js":"16","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page.js":"17","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_content.jsx":"18","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page.js":"19","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page_card.jsx":"20","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page_content.jsx":"21","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\page.js":"22","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\page_content.jsx":"23","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\PetItem.js":"24","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\teamSuggestions.js":"25","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\AssemblyItem.jsx":"26","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\AssemblyLine.jsx":"27","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\page.js":"28","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\page_content.jsx":"29","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\page.js":"30","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\page_content.jsx":"31","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\residueMapping.js":"32","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\sample_string.js":"33","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\BlinkingDot.jsx":"34","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\Dot.jsx":"35","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\farmingHelper.js":"36","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\header.jsx":"37","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\helper.js":"38","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\itemMapping.js":"39","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\ItemSelection copy.js":"40","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\ItemSelection.js":"41","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\math.js":"42","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\navBar.jsx":"43","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\petHelper.js":"44","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\reincHelper.js":"45","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\search.jsx":"46","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\Tooltip.jsx":"47","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\useDimensionHook.js":"48"},{"size":6090,"mtime":1707869591636,"results":"49","hashOfConfig":"50"},{"size":535,"mtime":1699206951135,"results":"51","hashOfConfig":"50"},{"size":94778,"mtime":1707941159077,"results":"52","hashOfConfig":"50"},{"size":684,"mtime":1699484623632,"results":"53","hashOfConfig":"50"},{"size":174477,"mtime":1707941159078,"results":"54","hashOfConfig":"50"},{"size":13449,"mtime":1706117256620,"results":"55","hashOfConfig":"50"},{"size":13228,"mtime":1706585232807,"results":"56","hashOfConfig":"50"},{"size":9432,"mtime":1706585232809,"results":"57","hashOfConfig":"50"},{"size":25425,"mtime":1707448213129,"results":"58","hashOfConfig":"50"},{"size":12181,"mtime":1703455828318,"results":"59","hashOfConfig":"50"},{"size":624,"mtime":1699206951135,"results":"60","hashOfConfig":"50"},{"size":174180,"mtime":1708017634484,"results":"61","hashOfConfig":"50"},{"size":8383,"mtime":1707448213130,"results":"62","hashOfConfig":"50"},{"size":486,"mtime":1699471188929,"results":"63","hashOfConfig":"50"},{"size":13257,"mtime":1707941159080,"results":"64","hashOfConfig":"50"},{"size":3882,"mtime":1701043277740,"results":"65","hashOfConfig":"50"},{"size":140,"mtime":1699108764428,"results":"66","hashOfConfig":"50"},{"size":9660,"mtime":1707941159080,"results":"67","hashOfConfig":"50"},{"size":365,"mtime":1699158751671,"results":"68","hashOfConfig":"50"},{"size":3950,"mtime":1707856912850,"results":"69","hashOfConfig":"50"},{"size":3197,"mtime":1707941159080,"results":"70","hashOfConfig":"50"},{"size":654,"mtime":1699206951135,"results":"71","hashOfConfig":"50"},{"size":87759,"mtime":1707941159081,"results":"72","hashOfConfig":"50"},{"size":20933,"mtime":1706117256620,"results":"73","hashOfConfig":"50"},{"size":99926,"mtime":1707706168617,"results":"74","hashOfConfig":"50"},{"size":4016,"mtime":1704817323685,"results":"75","hashOfConfig":"50"},{"size":7728,"mtime":1706585232810,"results":"76","hashOfConfig":"50"},{"size":552,"mtime":1699287646541,"results":"77","hashOfConfig":"50"},{"size":26660,"mtime":1707941159081,"results":"78","hashOfConfig":"50"},{"size":552,"mtime":1700590266467,"results":"79","hashOfConfig":"50"},{"size":31012,"mtime":1707941159082,"results":"80","hashOfConfig":"50"},{"size":23861,"mtime":1707350222230,"results":"81","hashOfConfig":"50"},{"size":347731,"mtime":1707938078172,"results":"82","hashOfConfig":"50"},{"size":437,"mtime":1706585232812,"results":"83","hashOfConfig":"50"},{"size":315,"mtime":1698849505297,"results":"84","hashOfConfig":"50"},{"size":37972,"mtime":1708027230319,"results":"85","hashOfConfig":"50"},{"size":1761,"mtime":1707941159082,"results":"86","hashOfConfig":"50"},{"size":4091,"mtime":1700603484820,"results":"87","hashOfConfig":"50"},{"size":27337,"mtime":1707869591637,"results":"88","hashOfConfig":"50"},{"size":4663,"mtime":1704747926494,"results":"89","hashOfConfig":"50"},{"size":3682,"mtime":1698938060827,"results":"90","hashOfConfig":"50"},{"size":2128,"mtime":1706585232812,"results":"91","hashOfConfig":"50"},{"size":6168,"mtime":1707856912855,"results":"92","hashOfConfig":"50"},{"size":99094,"mtime":1707706168618,"results":"93","hashOfConfig":"50"},{"size":3502,"mtime":1698849505364,"results":"94","hashOfConfig":"50"},{"size":3043,"mtime":1707350753575,"results":"95","hashOfConfig":"50"},{"size":3503,"mtime":1707856912855,"results":"96","hashOfConfig":"50"},{"size":706,"mtime":1707869591637,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17kfkn8",{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199"},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","suppressedMessages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\cardMapping.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\page_content.jsx",["251"],[],"\"use client\"\r\n\r\n\r\nimport { isMobile } from 'mobile-device-detect';\r\nimport './card.css';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport ReactGA from \"react-ga4\";\r\nimport MouseOverPopover from \"../util/Tooltip.jsx\";\r\nimport { DefaultWeightMap } from '../util/itemMapping.js';\r\nimport { cardMapImg, cardLabelImg } from './cardMapping.js';\r\n\r\nimport mathHelper from '../util/math.js';\r\nimport reincHelper from '../util/reincHelper.js';\r\nimport helper from '../util/helper.js';\r\n\r\nimport rightArrow from '../../../public/images/icons/right_arrow_white.svg';\r\nimport infoIcon from '../../../public/images/icons/info_thick.svg';\r\nimport infoIconRed from '../../../public/images/icons/info_red.svg';\r\n// import chargeImg from '../../../public/images/cards/charge.png'\r\nimport chargeImg from '../../../public/images/cards_v2/battery.png'\r\n\r\nimport greenBorder from '../../../public/images/cards_v2/CardSelectedGreen.png'\r\nimport redBorder from '../../../public/images/cards_v2/CardSelectedRed.png'\r\n\r\nimport useLocalStorage from \"use-local-storage\";\r\n\r\nimport DefaultSave from '../util/tempSave.json';\r\n\r\nimport Image from 'next/image';\r\n\r\nconst PREFIX = 'card';\r\n\r\nconst classes = {\r\n    card: `${PREFIX}-card`,\r\n    content: `${PREFIX}-content`,\r\n    positiveChargeResult: `${PREFIX}-positiveChargeResult`,\r\n    negativeChargeResult: `${PREFIX}-negativeChargeResult`\r\n};\r\nReactGA.initialize([{\r\n    trackingId: \"G-GGLPK02VH8\",\r\n}]);\r\n\r\nconst POTATO = 1;\r\nconst CLASSEXP = 2;\r\nconst SKULL = 3;\r\nconst CONFECTIONEXP = 4;\r\nconst REINCARNATIONEXP = 5;\r\nconst ITEMRATING = 6;\r\nconst POOPBONUS = 7;\r\nconst MILKBONUS = 8;\r\nconst WHACKSCORE = 9;\r\nconst BREWINGEXP = 10;\r\nconst CALCIUMEXP = 11;\r\nconst FERMENTINGEXP = 12;\r\nconst RESIDUEBONUS = 13;\r\nconst WORMQTY = 14;\r\nconst LARVAQTY = 15;\r\nconst LARVAEFF = 16;\r\nconst ATTACKHP = 17;\r\nconst PETDMG = 18;\r\nconst PETLEVELEXP = 19;\r\nconst PETRANKEXP = 20;\r\nconst CARDPOWERB = 21;\r\nconst CARDEXPB = 22;\r\nconst HEALTHYBONUS = 23;\r\nconst FRIESBONUS = 27;\r\nconst PROTEINBONUS = 28;\r\nconst GHBONUS = 29;\r\nconst MININGEXP = 34;\r\nconst MININGPWR = 35;\r\n\r\n\r\nconst maxKey = 30;\r\n\r\n\r\n\r\nconst cardIDMap = {\r\n    [POTATO]: {\r\n        id: POTATO, label: \"Potatoes\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 35,\r\n            3: 35,\r\n            4: 35,\r\n            5: 35,\r\n            6: 35,\r\n            7: 35,\r\n            8: 40,\r\n            9: 40,\r\n            10: 40,\r\n            11: 40,\r\n            12: 40,\r\n            13: 40,\r\n            14: 14,\r\n            15: 14,\r\n            16: 14,\r\n            17: 14,\r\n            18: 14,\r\n            19: 14,\r\n            20: 14,\r\n            21: 14,\r\n            22: 14,\r\n            23: 14,\r\n            24: 14,\r\n            25: 14,\r\n            26: 14,\r\n            27: 14,\r\n            28: 14,\r\n            29: 14,\r\n            30: 14,\r\n        }\r\n    },\r\n    [CLASSEXP]: {\r\n        id: CLASSEXP, label: \"Class Exp\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 46,\r\n            3: 46,\r\n            4: 46,\r\n            5: 46,\r\n            6: 46,\r\n            7: 46,\r\n            8: 46,\r\n            9: 46,\r\n            10: 46,\r\n            11: 46,\r\n            12: 46,\r\n            13: 46,\r\n            14: 31,\r\n            15: 31,\r\n            16: 31,\r\n            17: 31,\r\n            18: 31,\r\n            19: 31,\r\n            20: 31,\r\n            21: 31,\r\n            22: 31,\r\n            23: 31,\r\n            24: 31,\r\n            25: 31,\r\n            26: 31,\r\n            27: 31,\r\n            28: 31,\r\n            29: 31,\r\n            30: 31,\r\n        }\r\n    },\r\n    [SKULL]: {\r\n        id: SKULL, label: \"Skulls\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 0,\r\n            3: 57,\r\n            4: 57,\r\n            5: 57,\r\n            6: 57,\r\n            7: 57,\r\n            8: 65,\r\n            9: 65,\r\n            10: 65,\r\n            11: 65,\r\n            12: 65,\r\n            13: 65,\r\n            14: 92,\r\n            15: 92,\r\n            16: 92,\r\n            17: 92,\r\n            18: 92,\r\n            19: 92,\r\n            20: 92,\r\n            21: 92,\r\n            22: 92,\r\n            23: 92,\r\n            24: 92,\r\n            25: 92,\r\n            26: 92,\r\n            27: 92,\r\n            28: 92,\r\n            29: 92,\r\n            30: 92,\r\n        }\r\n    },\r\n    [CONFECTIONEXP]: {\r\n        id: CONFECTIONEXP, label: \"Confection\", icon: \"\", weights: {\r\n            0: 1,\r\n            1: 1,\r\n            2: 1,\r\n            3: 1,\r\n            4: 1,\r\n            5: 1,\r\n            6: 1,\r\n            7: 1,\r\n            8: 1,\r\n            9: 1,\r\n            10: 1,\r\n            11: 1,\r\n            12: 1,\r\n            13: 1,\r\n            14: 1,\r\n            15: 1,\r\n            16: 1,\r\n            17: 1,\r\n            18: 1,\r\n            19: 1,\r\n            20: 1,\r\n            21: 1,\r\n            22: 1,\r\n            23: 1,\r\n            24: 1,\r\n            25: 1,\r\n            26: 1,\r\n            27: 1,\r\n            28: 1,\r\n            29: 1,\r\n            30: 1,\r\n        }\r\n    },\r\n    [REINCARNATIONEXP]: {\r\n        id: REINCARNATIONEXP, label: \"Reinc.\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 0,\r\n            3: 0,\r\n            4: 0,\r\n            5: 0,\r\n            6: 2455,\r\n            7: 2455,\r\n            8: 2455,\r\n            9: 2455,\r\n            10: 2455,\r\n            11: 2455,\r\n            12: 2455,\r\n            13: 2455,\r\n            14: 2455,\r\n            15: 2455,\r\n            16: 2455,\r\n            17: 2455,\r\n            18: 2455,\r\n            19: 2455,\r\n            20: 2455,\r\n            21: 2455,\r\n            22: 2455,\r\n            23: 2455,\r\n            24: 2455,\r\n            25: 2455,\r\n            26: 2455,\r\n            27: 2455,\r\n            28: 2455,\r\n            29: 2455,\r\n            30: 2455,\r\n        }\r\n    },\r\n    [ITEMRATING]: {\r\n        id: ITEMRATING, label: \"Item R.\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 0,\r\n            3: 0,\r\n            4: 0,\r\n            5: 1227,\r\n            6: 1227,\r\n            7: 1227,\r\n            8: 1227,\r\n            9: 1227,\r\n            10: 1227,\r\n            11: 1227,\r\n            12: 1227,\r\n            13: 1227,\r\n            14: 1227,\r\n            15: 2455,\r\n            16: 2455,\r\n            17: 2455,\r\n            18: 2455,\r\n            19: 2455,\r\n            20: 2455,\r\n            21: 2455,\r\n            22: 2455,\r\n            23: 2455,\r\n            24: 2455,\r\n            25: 2455,\r\n            26: 2455,\r\n            27: 2455,\r\n            28: 2455,\r\n            29: 2455,\r\n            30: 2455,\r\n        }\r\n    },\r\n    [POOPBONUS]: {\r\n        id: POOPBONUS, label: \"Poop Qty\", icon: \"\", weights: {\r\n            0: 1,\r\n            1: 1,\r\n            2: 1,\r\n            3: 1,\r\n            4: 1,\r\n            5: 1,\r\n            6: 1,\r\n            7: 1,\r\n            8: 1,\r\n            9: 1,\r\n            10: 1,\r\n            11: 1,\r\n            12: 1,\r\n            13: 1,\r\n            14: 1,\r\n            15: 1,\r\n            16: 1,\r\n            17: 1,\r\n            18: 1,\r\n            19: 1,\r\n            20: 1,\r\n            21: 1,\r\n            22: 1,\r\n            23: 1,\r\n            24: 1,\r\n            25: 1,\r\n            26: 1,\r\n            27: 1,\r\n            28: 1,\r\n            29: 1,\r\n            30: 1,\r\n        }\r\n    },\r\n    [MILKBONUS]: {\r\n        id: MILKBONUS, label: \"Milk\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 0,\r\n            3: 0,\r\n            4: 0,\r\n            5: 44,\r\n            6: 44,\r\n            7: 44,\r\n            8: 44,\r\n            9: 44,\r\n            10: 44,\r\n            11: 44,\r\n            12: 44,\r\n            13: 44,\r\n            14: 135,\r\n            15: 135,\r\n            16: 135,\r\n            17: 135,\r\n            18: 135,\r\n            19: 135,\r\n            20: 135,\r\n            21: 135,\r\n            22: 135,\r\n            23: 135,\r\n            24: 135,\r\n            25: 135,\r\n            26: 135,\r\n            27: 135,\r\n            28: 135,\r\n            29: 135,\r\n            30: 135,\r\n        }\r\n    },\r\n    [WHACKSCORE]: {\r\n        id: WHACKSCORE, label: \"Whack\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 0,\r\n            3: 0,\r\n            4: 1,\r\n            5: 1,\r\n            6: 1,\r\n            7: 1,\r\n            8: 1,\r\n            9: 1,\r\n            10: 1,\r\n            11: 1,\r\n            12: 1,\r\n            13: 1,\r\n            14: 1,\r\n            15: 1,\r\n            16: 1,\r\n            17: 1,\r\n            18: 1,\r\n            19: 1,\r\n            20: 1,\r\n            21: 1,\r\n            22: 1,\r\n            23: 1,\r\n            24: 1,\r\n            25: 1,\r\n            26: 1,\r\n            27: 1,\r\n            28: 1,\r\n            29: 1,\r\n            30: 1,\r\n        }\r\n    },\r\n    [BREWINGEXP]: {\r\n        id: BREWINGEXP, label: \"Brewing\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 0,\r\n            3: 0,\r\n            4: 0,\r\n            5: 0,\r\n            6: 1,\r\n            7: 1,\r\n            8: 1,\r\n            9: 1,\r\n            10: 1,\r\n            11: 1,\r\n            12: 1,\r\n            13: 1,\r\n            14: 2,\r\n            15: 2,\r\n            16: 2,\r\n            17: 2,\r\n            18: 2,\r\n            19: 2,\r\n            20: 2,\r\n            21: 2,\r\n            22: 2,\r\n            23: 2,\r\n            24: 2,\r\n            25: 2,\r\n            26: 2,\r\n            27: 2,\r\n            28: 2,\r\n            29: 2,\r\n            30: 2,\r\n        }\r\n    },\r\n    [CALCIUMEXP]: {\r\n        id: CALCIUMEXP, label: \"Calcium\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 0,\r\n            3: 0,\r\n            4: 0,\r\n            5: 0,\r\n            6: 0,\r\n            7: 0,\r\n            8: 1,\r\n            9: 1,\r\n            10: 1,\r\n            11: 1,\r\n            12: 1,\r\n            13: 1,\r\n            14: 1,\r\n            15: 1,\r\n            16: 1,\r\n            17: 1,\r\n            18: 1,\r\n            19: 1,\r\n            20: 1,\r\n            21: 1,\r\n            22: 1,\r\n            23: 1,\r\n            24: 1,\r\n            25: 1,\r\n            26: 1,\r\n            27: 1,\r\n            28: 1,\r\n            29: 1,\r\n            30: 1,\r\n        }\r\n    },\r\n    [FERMENTINGEXP]: {\r\n        id: FERMENTINGEXP, label: \"Ferment.\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 0,\r\n            3: 0,\r\n            4: 0,\r\n            5: 0,\r\n            6: 0,\r\n            7: 0,\r\n            8: 1,\r\n            9: 1,\r\n            10: 1,\r\n            11: 1,\r\n            12: 1,\r\n            13: 1,\r\n            14: 1,\r\n            15: 1,\r\n            16: 1,\r\n            17: 1,\r\n            18: 1,\r\n            19: 1,\r\n            20: 1,\r\n            21: 1,\r\n            22: 1,\r\n            23: 1,\r\n            24: 1,\r\n            25: 1,\r\n            26: 1,\r\n            27: 1,\r\n            28: 1,\r\n            29: 1,\r\n            30: 1,\r\n        }\r\n    },\r\n    [RESIDUEBONUS]: {\r\n        id: RESIDUEBONUS, label: \"Residue\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 0,\r\n            3: 0,\r\n            4: 0,\r\n            5: 4,\r\n            6: 14,\r\n            7: 114,\r\n            8: 214,\r\n            9: 314,\r\n            10: 414,\r\n            11: 514,\r\n            12: 614,\r\n            13: 614,\r\n            14: 491,\r\n            15: 491,\r\n            16: 491,\r\n            17: 491,\r\n            18: 491,\r\n            19: 491,\r\n            20: 491,\r\n            21: 491,\r\n            22: 491,\r\n            23: 491,\r\n            24: 491,\r\n            25: 491,\r\n            26: 491,\r\n            27: 491,\r\n            28: 491,\r\n            29: 491,\r\n            30: 491,\r\n        }\r\n    },\r\n    [WORMQTY]: {\r\n        id: WORMQTY, label: \"Worm Qty\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 0,\r\n            3: 1,\r\n            4: 1,\r\n            5: 1,\r\n            6: 1,\r\n            7: 1,\r\n            8: 1,\r\n            9: 1,\r\n            10: 1,\r\n            11: 1,\r\n            12: 1,\r\n            13: 1,\r\n            14: 1,\r\n            15: 1,\r\n            16: 1,\r\n            17: 1,\r\n            18: 1,\r\n            19: 1,\r\n            20: 1,\r\n            21: 1,\r\n            22: 1,\r\n            23: 1,\r\n            24: 1,\r\n            25: 1,\r\n            26: 1,\r\n            27: 1,\r\n            28: 1,\r\n            29: 1,\r\n            30: 1,\r\n        }\r\n    },\r\n    [LARVAQTY]: {\r\n        id: LARVAQTY, label: \"Larve Qty\", icon: \"\", weights: {\r\n            0: 1,\r\n            1: 1,\r\n            2: 1,\r\n            3: 1,\r\n            4: 1,\r\n            5: 1,\r\n            6: 1,\r\n            7: 1,\r\n            8: 1,\r\n            9: 1,\r\n            10: 1,\r\n            11: 1,\r\n            12: 1,\r\n            13: 1,\r\n            14: 1,\r\n            15: 1,\r\n            16: 1,\r\n            17: 1,\r\n            18: 1,\r\n            19: 1,\r\n            20: 1,\r\n            21: 1,\r\n            22: 1,\r\n            23: 1,\r\n            24: 1,\r\n            25: 1,\r\n            26: 1,\r\n            27: 1,\r\n            28: 1,\r\n            29: 1,\r\n            30: 1,\r\n        }\r\n    },\r\n    [LARVAEFF]: {\r\n        id: LARVAEFF, label: \"Larve Eff.\", icon: \"\", weights: {\r\n            0: 1,\r\n            1: 1,\r\n            2: 1,\r\n            3: 1,\r\n            4: 1,\r\n            5: 1,\r\n            6: 1,\r\n            7: 1,\r\n            8: 1,\r\n            9: 1,\r\n            10: 1,\r\n            11: 1,\r\n            12: 1,\r\n            13: 1,\r\n            14: 1,\r\n            15: 1,\r\n            16: 1,\r\n            17: 1,\r\n            18: 1,\r\n            19: 1,\r\n            20: 1,\r\n            21: 1,\r\n            22: 1,\r\n            23: 1,\r\n            24: 1,\r\n            25: 1,\r\n            26: 1,\r\n            27: 1,\r\n            28: 1,\r\n            29: 1,\r\n            30: 1,\r\n        }\r\n    },\r\n    [ATTACKHP]: {\r\n        id: ATTACKHP, label: \"Att. + Hp.\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 10,\r\n            2: 10,\r\n            3: 10,\r\n            4: 10,\r\n            5: 10,\r\n            6: 10,\r\n            7: 10,\r\n            8: 10,\r\n            9: 10,\r\n            10: 10,\r\n            11: 10,\r\n            12: 10,\r\n            13: 10,\r\n            14: 19,\r\n            15: 19,\r\n            16: 19,\r\n            17: 19,\r\n            18: 19,\r\n            19: 19,\r\n            20: 19,\r\n            21: 19,\r\n            22: 19,\r\n            23: 19,\r\n            24: 19,\r\n            25: 19,\r\n            26: 19,\r\n            27: 19,\r\n            28: 19,\r\n            29: 19,\r\n            30: 19,\r\n        }\r\n    },\r\n    [PETDMG]: {\r\n        id: PETDMG, label: \"Pet Dmg\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 0,\r\n            3: 0,\r\n            4: 0,\r\n            5: 0,\r\n            6: 2455,\r\n            7: 2455,\r\n            8: 2455,\r\n            9: 2455,\r\n            10: 2455,\r\n            11: 2455,\r\n            12: 2455,\r\n            13: 2455,\r\n            14: 2455,\r\n            15: 2455,\r\n            16: 2455,\r\n            17: 2455,\r\n            18: 2455,\r\n            19: 2455,\r\n            20: 2455,\r\n            21: 2455,\r\n            22: 2455,\r\n            23: 2455,\r\n            24: 2455,\r\n            25: 2455,\r\n            26: 2455,\r\n            27: 2455,\r\n            28: 2455,\r\n            29: 2455,\r\n            30: 2455,\r\n        }\r\n    },\r\n    [PETLEVELEXP]: {\r\n        id: PETLEVELEXP, label: \"Pet Level\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 0,\r\n            3: 0,\r\n            4: 0,\r\n            5: 0,\r\n            6: 1473,\r\n            7: 1473,\r\n            8: 1473,\r\n            9: 1473,\r\n            10: 1473,\r\n            11: 1473,\r\n            12: 1473,\r\n            13: 1473,\r\n            14: 205,\r\n            15: 491,\r\n            16: 491,\r\n            17: 491,\r\n            18: 491,\r\n            19: 491,\r\n            20: 491,\r\n            21: 491,\r\n            22: 491,\r\n            23: 491,\r\n            24: 491,\r\n            25: 491,\r\n            26: 491,\r\n            27: 491,\r\n            28: 491,\r\n            29: 491,\r\n            30: 491,\r\n        }\r\n    },\r\n    [PETRANKEXP]: {\r\n        id: PETRANKEXP, label: \"Pet Rank\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 0,\r\n            3: 0,\r\n            4: 0,\r\n            5: 0,\r\n            6: 0,\r\n            7: 0,\r\n            8: 0,\r\n            9: 0,\r\n            10: 2455 / 5,\r\n            11: 2455 / 5,\r\n            12: 2455 / 5,\r\n            13: 2455 / 5,\r\n            14: 2455 / 5,\r\n            15: 2455 / 5,\r\n            16: 2455 / 5,\r\n            17: 2455 / 5,\r\n            18: 2455 / 5,\r\n            19: 2455 / 5,\r\n            20: 2455 / 5,\r\n            21: 2455 / 5,\r\n            22: 2455 / 5,\r\n            23: 2455 / 5,\r\n            24: 2455 / 5,\r\n            25: 2455 / 5,\r\n            26: 2455 / 5,\r\n            27: 2455 / 5,\r\n            28: 2455 / 5,\r\n            29: 2455 / 5,\r\n            30: 2455 / 5,\r\n        }\r\n    },\r\n    [CARDPOWERB]: {\r\n        id: CARDPOWERB, label: \"Card Power\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 0,\r\n            3: 0,\r\n            4: 0,\r\n            5: 0,\r\n            6: 0,\r\n            7: 0,\r\n            8: 0,\r\n            9: 0,\r\n            10: 0,\r\n            11: 0,\r\n            12: 0,\r\n            13: 0,\r\n            14: 0,\r\n            15: 0,\r\n            16: 0,\r\n            17: 0,\r\n            18: 0,\r\n            19: 0,\r\n            20: 0,\r\n            21: 0,\r\n            22: 0,\r\n            23: 0,\r\n            24: 0,\r\n            25: 0,\r\n            26: 0,\r\n            27: 0,\r\n            28: 0,\r\n            29: 0,\r\n            30: 0,\r\n        }\r\n    },\r\n    [CARDEXPB]: {\r\n        id: CARDEXPB, label: \"Card Exp\", icon: \"\", weights: {\r\n            0: 0,\r\n            1: 0,\r\n            2: 0,\r\n            3: 0,\r\n            4: 0,\r\n            5: 0,\r\n            6: 0,\r\n            7: 0,\r\n            8: 0,\r\n            9: 0,\r\n            10: 0,\r\n            11: 0,\r\n            12: 0,\r\n            13: 0,\r\n            14: 0,\r\n            15: 0,\r\n            16: 0,\r\n            17: 0,\r\n            18: 0,\r\n            19: 0,\r\n            20: 0,\r\n            21: 0,\r\n            22: 0,\r\n            23: 0,\r\n            24: 0,\r\n            25: 0,\r\n            26: 0,\r\n            27: 0,\r\n            28: 0,\r\n            29: 0,\r\n            30: 0,\r\n        }\r\n    },\r\n    [HEALTHYBONUS]: {\r\n        id: HEALTHYBONUS, label: \"Heal. Pot.\", icon: \"\", weights: {\r\n            0: 1,\r\n            1: 1,\r\n            2: 1,\r\n            3: 1,\r\n            4: 1,\r\n            5: 1,\r\n            6: 1,\r\n            7: 1,\r\n            8: 1,\r\n            9: 1,\r\n            10: 1,\r\n            11: 1,\r\n            12: 1,\r\n            13: 1,\r\n            14: 1,\r\n            15: 1,\r\n            16: 1,\r\n            17: 1,\r\n            18: 1,\r\n            19: 1,\r\n            20: 1,\r\n            21: 1,\r\n            22: 1,\r\n            23: 1,\r\n            24: 1,\r\n            25: 1,\r\n            26: 1,\r\n            27: 1,\r\n            28: 1,\r\n            29: 1,\r\n            30: 1,\r\n        }\r\n    },\r\n    [FRIESBONUS]: {\r\n        id: FRIESBONUS, label: \"Fries\", icon: \"\", weights: {\r\n            0: 1,\r\n            1: 1,\r\n            2: 1,\r\n            3: 1,\r\n            4: 1,\r\n            5: 1,\r\n            6: 1,\r\n            7: 1,\r\n            8: 1,\r\n            9: 1,\r\n            10: 1,\r\n            11: 1,\r\n            12: 1,\r\n            13: 1,\r\n            14: 1,\r\n            15: 1,\r\n            16: 1,\r\n            17: 1,\r\n            18: 1,\r\n            19: 1,\r\n            20: 1,\r\n            21: 1,\r\n            22: 1,\r\n            23: 1,\r\n            24: 1,\r\n            25: 1,\r\n            26: 1,\r\n            27: 1,\r\n            28: 1,\r\n            29: 1,\r\n            30: 1,\r\n        }\r\n    },\r\n    [PROTEINBONUS]: {\r\n        id: PROTEINBONUS, label: \"Protein\", icon: \"\", weights: {\r\n            0: 2,\r\n            1: 2,\r\n            2: 2,\r\n            3: 2,\r\n            4: 2,\r\n            5: 2,\r\n            6: 2,\r\n            7: 2,\r\n            8: 2,\r\n            9: 2,\r\n            10: 2,\r\n            11: 2,\r\n            12: 2,\r\n            13: 2,\r\n            14: 2,\r\n            15: 2,\r\n            16: 2,\r\n            17: 2,\r\n            18: 2,\r\n            19: 2,\r\n            20: 2,\r\n            21: 2,\r\n            22: 2,\r\n            23: 2,\r\n            24: 2,\r\n            25: 2,\r\n            26: 2,\r\n            27: 2,\r\n            28: 2,\r\n            29: 2,\r\n            30: 2,\r\n        }\r\n    },\r\n    [GHBONUS]: {\r\n        id: GHBONUS, label: \"GH Dmg\", icon: \"\", weights: {\r\n            0: 3,\r\n            1: 3,\r\n            2: 3,\r\n            3: 3,\r\n            4: 3,\r\n            5: 3,\r\n            6: 3,\r\n            7: 3,\r\n            8: 3,\r\n            9: 3,\r\n            10: 3,\r\n            11: 3,\r\n            12: 3,\r\n            13: 3,\r\n            14: 3,\r\n            15: 3,\r\n            16: 3,\r\n            17: 3,\r\n            18: 3,\r\n            19: 3,\r\n            20: 3,\r\n            21: 3,\r\n            22: 3,\r\n            23: 3,\r\n            24: 3,\r\n            25: 3,\r\n            26: 3,\r\n            27: 3,\r\n            28: 3,\r\n            29: 3,\r\n            30: 3,\r\n        }\r\n    },\r\n    [MININGEXP]: {\r\n        id: MININGEXP, label: \"Mining Exp\", icon: \"\", weights: {\r\n            0: 1,\r\n            1: 1,\r\n            2: 1,\r\n            3: 1,\r\n            4: 1,\r\n            5: 1,\r\n            6: 1,\r\n            7: 1,\r\n            8: 1,\r\n            9: 1,\r\n            10: 1,\r\n            11: 1,\r\n            12: 1,\r\n            13: 1,\r\n            14: 1,\r\n            15: 1,\r\n            16: 1,\r\n            17: 1,\r\n            18: 1,\r\n            19: 1,\r\n            20: 1,\r\n            21: 1,\r\n            22: 1,\r\n            23: 1,\r\n            24: 1,\r\n            25: 1,\r\n            26: 1,\r\n            27: 1,\r\n            28: 1,\r\n            29: 1,\r\n            30: 1,\r\n        }\r\n    },\r\n    [MININGPWR]: {\r\n        id: MININGPWR, label: \"Mining Pwr\", icon: \"\", weights: {\r\n            0: 4,\r\n            1: 4,\r\n            2: 4,\r\n            3: 4,\r\n            4: 4,\r\n            5: 4,\r\n            6: 4,\r\n            7: 4,\r\n            8: 4,\r\n            9: 4,\r\n            10: 4,\r\n            11: 4,\r\n            12: 4,\r\n            13: 4,\r\n            14: 4,\r\n            15: 4,\r\n            16: 4,\r\n            17: 4,\r\n            18: 4,\r\n            19: 4,\r\n            20: 4,\r\n            21: 4,\r\n            22: 4,\r\n            23: 4,\r\n            24: 4,\r\n            25: 4,\r\n            26: 4,\r\n            27: 4,\r\n            28: 4,\r\n            29: 4,\r\n            30: 4,\r\n        }\r\n    },\r\n}\r\n\r\nfunction powerFormula(Pow, logBase, customConstant, params) {\r\n\r\n    params = params ? params : {};\r\n    const ID = params.ID ? params.ID : 1;\r\n    const isPerm = params.isPerm ? params.isPerm : false;\r\n\r\n\r\n    let base = 1.2;\r\n    if (!isPerm) {\r\n        switch (ID) {\r\n            case 23:\r\n            case 27:\r\n            case 28:\r\n            case 29:\r\n                base = 1.1;\r\n                break;\r\n            case 34:\r\n                base = 1.09;\r\n                break;\r\n            case 35:\r\n                base = 1.08;\r\n                break;\r\n        }\r\n    }\r\n    else {\r\n        switch (ID) {\r\n            case 23:\r\n            case 27:\r\n            case 28:\r\n            case 29:\r\n            case 34:\r\n            case 35:\r\n                base = 1.1;\r\n        }\r\n    }\r\n    let result = mathHelper.pow(\r\n        base,\r\n        mathHelper.logDecimal(Pow, logBase)\r\n    );\r\n    result = mathHelper.multiplyDecimal(result, customConstant);\r\n\r\n    result = isPerm ? mathHelper.multiplyDecimal(result, 0.5) : result;\r\n    result = mathHelper.addDecimal(result, 1);\r\n    return result;\r\n}\r\nconst tempPowerBonusFormula = {\r\n    17: (Pow) => powerFormula(Pow, 1.5, 0.015),\r\n    1: (Pow) => powerFormula(Pow, 1.3, 0.018),\r\n    2: (Pow) => powerFormula(Pow, 1.35, 0.016),\r\n    3: (Pow) => powerFormula(Pow, 1.325, 0.015),\r\n    5: (Pow) => powerFormula(Pow, 1.55, 0.001),\r\n    6: (Pow) => powerFormula(Pow, 1.525, 0.002),\r\n    9: (Pow) => powerFormula(Pow, 1.325, 0.02),\r\n    7: (Pow) => powerFormula(Pow, 1.325, 0.016),\r\n    4: (Pow) => powerFormula(Pow, 1.3, 0.016),\r\n    8: (Pow) => powerFormula(Pow, 1.35, 0.012),\r\n    10: (Pow) => powerFormula(Pow, 1.325, 0.011),\r\n    11: (Pow) => powerFormula(Pow, 1.325, 0.01),\r\n    12: (Pow) => powerFormula(Pow, 1.4, 0.008),\r\n    13: (Pow) => powerFormula(Pow, 1.525, 0.002),\r\n    14: (Pow) => powerFormula(Pow, 1.4, 0.01),\r\n    15: (Pow) => powerFormula(Pow, 1.3, 0.015),\r\n    16: (Pow) => powerFormula(Pow, 1.3, 0.02),\r\n    18: (Pow) => powerFormula(Pow, 1.525, 0.003),\r\n    19: (Pow) => powerFormula(Pow, 1.5, 0.002),\r\n    20: (Pow) => powerFormula(Pow, 1.55, 0.001),\r\n    23: (Pow) => powerFormula(Pow, 7.0, 0.18, { ID: 23 }),\r\n    27: (Pow) => powerFormula(Pow, 7.0, 0.009, { ID: 27 }),\r\n    28: (Pow) => powerFormula(Pow, 7.0, 0.045, { ID: 28 }),\r\n    29: (Pow) => powerFormula(Pow, 7.0, 0.09, { ID: 29 }),\r\n    34: (Pow) => powerFormula(Pow, 8.0, 0.018, { ID: 34 }),\r\n    35: (Pow) => powerFormula(Pow, 9.0, 0.009, { ID: 35 }),\r\n    _: (Pow) => 1.0\r\n};\r\nconst permPowerBonusFormula = {\r\n    17: (Pow) => powerFormula(Pow, 1.5, 0.015, { isPerm: true, ID: 1 }),\r\n    1: (Pow) => powerFormula(Pow, 1.3, 0.018, { isPerm: true, ID: 1 }),\r\n    2: (Pow) => powerFormula(Pow, 1.35, 0.016, { isPerm: true, ID: 1 }),\r\n    3: (Pow) => powerFormula(Pow, 1.325, 0.015, { isPerm: true, ID: 1 }),\r\n    5: (Pow) => powerFormula(Pow, 1.55, 0.001, { isPerm: true, ID: 1 }),\r\n    6: (Pow) => powerFormula(Pow, 1.525, 0.002, { isPerm: true, ID: 1 }),\r\n    9: (Pow) => powerFormula(Pow, 1.325, 0.02, { isPerm: true, ID: 1 }),\r\n    7: (Pow) => powerFormula(Pow, 1.325, 0.016, { isPerm: true, ID: 1 }),\r\n    4: (Pow) => powerFormula(Pow, 1.3, 0.016, { isPerm: true, ID: 1 }),\r\n    8: (Pow) => powerFormula(Pow, 1.35, 0.012, { isPerm: true, ID: 1 }),\r\n    10: (Pow) => powerFormula(Pow, 1.325, 0.011, { isPerm: true, ID: 1 }),\r\n    11: (Pow) => powerFormula(Pow, 1.325, 0.01, { isPerm: true, ID: 1 }),\r\n    12: (Pow) => powerFormula(Pow, 1.4, 0.008, { isPerm: true, ID: 1 }),\r\n    13: (Pow) => powerFormula(Pow, 1.525, 0.002, { isPerm: true, ID: 1 }),\r\n    14: (Pow) => powerFormula(Pow, 1.4, 0.01, { isPerm: true, ID: 1 }),\r\n    15: (Pow) => powerFormula(Pow, 1.3, 0.015, { isPerm: true, ID: 1 }),\r\n    16: (Pow) => powerFormula(Pow, 1.3, 0.02, { isPerm: true, ID: 1 }),\r\n    18: (Pow) => powerFormula(Pow, 1.525, 0.003, { isPerm: true, ID: 1 }),\r\n    19: (Pow) => powerFormula(Pow, 1.5, 0.002, { isPerm: true, ID: 1 }),\r\n    20: (Pow) => powerFormula(Pow, 1.55, 0.001, { isPerm: true, ID: 1 }),\r\n    23: (Pow) => powerFormula(Pow, 7.0, 0.18, { isPerm: true, ID: 23 }),\r\n    27: (Pow) => powerFormula(Pow, 7.0, 0.009, { isPerm: true, ID: 27 }),\r\n    28: (Pow) => powerFormula(Pow, 7.0, 0.045, { isPerm: true, ID: 28 }),\r\n    29: (Pow) => powerFormula(Pow, 7.0, 0.009, { isPerm: true, ID: 29 }),\r\n    34: (Pow) => powerFormula(Pow, 7.0, 0.027, { isPerm: true, ID: 34 }),\r\n    35: (Pow) => powerFormula(Pow, 7.0, 0.009, { isPerm: true, ID: 35 }),\r\n    // _: (Pow) => new Decimal(1.0)\r\n};\r\n\r\nconst CARD_DISPLAY_IDS = [\r\n    17, 1, 2, 3, 9,\r\n    7, 4, 14, 15, 16,\r\n    8, FRIESBONUS, PROTEINBONUS, GHBONUS, HEALTHYBONUS,\r\n    10, 11, 12, 13,\r\n    6, 5, 19, 18, 20, MININGEXP, MININGPWR\r\n];\r\n\r\nconst CardCard = ({\r\n    vertical,\r\n    displayMode,\r\n    data, card, weightMap, i, applyWeights, cardMap, setCardMap, resetWeights, cardWeightInner,\r\n    cardWeight, setCardWeightNew }) => {\r\n\r\n    const {\r\n        CurrentExp,\r\n        ExpNeeded,\r\n        Found,\r\n        ID,\r\n        Level,\r\n        PowerPermaBD,\r\n        PowerTempBD,\r\n    } = card;\r\n    const { ChargeTransfertPowerPerma, ChargeTransfertPowerTemp } = data;\r\n\r\n    // const [cardWeight, setCardWeight] = useLocalStorage(`cardWeight-${ID}`, -1);\r\n    // const [internalWeight, setInternalWeight] = useState(-1);\r\n\r\n    // useEffect(() => {\r\n    //     setInternalWeight(cardWeight);\r\n    // }, [cardWeight])\r\n\r\n    let defaultWeight = cardIDMap[ID].weights[data.AscensionCount > maxKey ? maxKey : data.AscensionCount];\r\n    if (data.AscensionCount >= 15) {\r\n        defaultWeight /= 2;\r\n    }\r\n    const finalWeight = cardWeight === -1 ? defaultWeight : cardWeight;\r\n\r\n    const [finalAfter, setFinalAfter] = useState(mathHelper.createDecimal(-1));\r\n    const [finalBefore, setFinalBefore] = useState(mathHelper.createDecimal(-1));\r\n    const [flatIncrease, setFlatIncrease] = useState(mathHelper.createDecimal(-1));\r\n    const [percIncrease, setPercentIncrease] = useState(mathHelper.createDecimal(-1));\r\n    const [weightIncrease, setWeightIncrease] = useState(mathHelper.createDecimal(-1));\r\n    const [finalTemp, setFinalTemp] = useState(mathHelper.createDecimal(-1));\r\n\r\n    const [refreshMath, setRefreshMath] = useState(true);\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        setRefreshMath(false);\r\n\r\n        const permValueBefore = mathHelper.createDecimal(PowerPermaBD);\r\n        const tempValueBefore = mathHelper.createDecimal(PowerTempBD);\r\n\r\n        let permValueAfter = mathHelper.addDecimal(permValueBefore,\r\n            mathHelper.multiplyDecimal(tempValueBefore, ChargeTransfertPowerPerma)\r\n        );\r\n        let tempValueAfter = mathHelper.multiplyDecimal(tempValueBefore, (1 - ChargeTransfertPowerTemp));\r\n\r\n        let tempBonusBefore = tempPowerBonusFormula[ID](tempValueBefore);\r\n        let permBonusBefore = permPowerBonusFormula[ID](permValueBefore);\r\n\r\n        let finalBefore = mathHelper.multiplyDecimal(\r\n            mathHelper.subtractDecimal(\r\n                mathHelper.multiplyDecimal(tempBonusBefore, permBonusBefore),\r\n                1\r\n            ),\r\n            ((1.0 + Level * 0.02) * 100)\r\n        )\r\n\r\n        let temp1 = tempPowerBonusFormula[ID](mathHelper.multiplyDecimal(tempValueBefore, (1.0 - ChargeTransfertPowerTemp)))\r\n        let temp2 = permPowerBonusFormula[ID](\r\n            mathHelper.addDecimal(permValueBefore, mathHelper.multiplyDecimal(tempValueBefore, ChargeTransfertPowerPerma))\r\n        )\r\n        let finalAfter =\r\n            mathHelper.multiplyDecimal(\r\n                mathHelper.subtractDecimal(mathHelper.multiplyDecimal(temp1, temp2), 1),\r\n                (1.0 + Level * 0.02) * 100);\r\n\r\n\r\n\r\n        let percIncrease = mathHelper.divideDecimal(finalAfter, finalBefore);\r\n        let flatIncrease = mathHelper.subtractDecimal(finalAfter, finalBefore);\r\n        let weightIncrease = mathHelper.multiplyDecimal(mathHelper.divideDecimal(mathHelper.subtractDecimal(finalAfter, finalBefore), finalBefore), finalWeight);\r\n\r\n        setFinalTemp(tempValueAfter);\r\n        setFinalAfter(finalAfter);\r\n        setFinalBefore(finalBefore);\r\n        setWeightIncrease(weightIncrease);\r\n        setFlatIncrease(flatIncrease);\r\n        setPercentIncrease(percIncrease);\r\n\r\n        if (resetWeights !== -3) {\r\n            if (!(ID in cardMap)) {\r\n                setCardMap((e) => {\r\n                    let tempy = { ...e };\r\n                    tempy[ID] = {\r\n                        ID: ID, finalAfter: finalAfter,\r\n                        percIncrease: percIncrease,\r\n                        flatIncrease: flatIncrease,\r\n                        weightIncrease: weightIncrease\r\n                    };\r\n                    return tempy;\r\n                })\r\n            }\r\n            else if (!cardMap[ID]?.finalAfter.equals(finalAfter) || !cardMap[ID]?.weightIncrease.equals(weightIncrease)) {\r\n                setCardMap((e) => {\r\n                    let tempy = { ...e };\r\n                    tempy[ID] = {\r\n                        ID: ID, finalAfter: finalAfter, percIncrease: percIncrease,\r\n                        flatIncrease: flatIncrease,\r\n                        weightIncrease: weightIncrease\r\n                    };\r\n                    return tempy;\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n    }, [cardMap, finalWeight, ChargeTransfertPowerPerma, ChargeTransfertPowerTemp, setCardMap,\r\n        cardWeight, setCardWeightNew,\r\n        resetWeights\r\n        ,\r\n        ID,\r\n        Level,\r\n        PowerPermaBD,\r\n        PowerTempBD,\r\n        refreshMath\r\n    ])\r\n\r\n\r\n\r\n    let displayTotalsRatio = 0;\r\n    let isPositiveChargeRatio = finalAfter.greaterThan(finalBefore);\r\n\r\n    let middleCard = false;\r\n    let num = i + 1;\r\n\r\n    if (Math.floor(num / 5) % 2 === 0) {\r\n        middleCard = (num > 1) && (num % 2 === 0) && (num % 5 !== 0)\r\n    }\r\n    else {\r\n        middleCard = (num > 1) && (num % 2 === 1) && (num % 5 !== 0)\r\n    }\r\n\r\n\r\n    let margin = ``;\r\n    if (vertical && false) {\r\n        margin = num % 2 === 0 && num + 1 ? '6px 0' : ''\r\n    }\r\n    else {\r\n        margin = middleCard ? `0 6px ${num > 1 && num % 5 === 0 ? '12px' : ''} 6px` : '';\r\n    }\r\n\r\n    let displayLabel = vertical;\r\n    vertical = false;\r\n\r\n    let extraText = `(+${mathHelper.subtractDecimal(finalAfter, finalBefore).toExponential(2)})`;\r\n    if (displayMode === 'perc') {\r\n        let tempy = helper.roundTwoDecimal(mathHelper.divideDecimal(finalAfter, finalBefore).toNumber() * 100 - 100);\r\n        extraText = `(${tempy}%)`\r\n    }\r\n    else if (displayMode === 'flat') {\r\n        let tempy = mathHelper.subtractDecimal(finalAfter, finalBefore).toExponential(2).toString();\r\n        extraText = `(+${tempy})`\r\n    }\r\n    else if (displayMode === 'weight') {\r\n        let tempy = mathHelper.multiplyDecimal(mathHelper.divideDecimal(mathHelper.subtractDecimal(finalAfter, finalBefore), finalBefore), finalWeight)\r\n        extraText = `(${tempy.toNumber().toExponential(2)})`\r\n    }\r\n    const multiplier = vertical ? 110 : 140;\r\n\r\n    return (\r\n        <div\r\n            key={i}\r\n            style={{\r\n                // border: isPositiveChargeRatio ? '2px solid green' : '1px solid black',\r\n                borderRadius: '5px',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                // alignItems: 'center',\r\n                alignItems: displayMode === 'original' ? 'center' : '',\r\n                justifyContent: 'center',\r\n                // justifyContent: displayMode === 'original' ? 'center' : '',\r\n                width: displayMode === 'original' ? `${227 / 227 * multiplier}px` : '100%',\r\n                height: displayMode === 'original' ? `${316 / 227 * multiplier}px` : '48px',\r\n                margin: displayMode === 'original' ? margin : `${num === 1 ? '' : '6px'} 0 0 0`,\r\n                padding: displayMode === 'original' ? '' : '0 6px 0 6px',\r\n                boxSizing: 'border-box',\r\n                position: displayMode === 'original' ? 'relative' : ``,\r\n                backgroundColor: 'rgba(255,255,255, 0.1)'\r\n            }}>\r\n            {displayMode === 'original' && (\r\n                <>\r\n                    <MouseOverPopover\r\n                        tooltip={\r\n                            <div style={{ padding: '6px' }}>\r\n                                <h3 style={{ margin: 0, textAlign: 'center' }}>\r\n                                    {cardIDMap[ID].label}\r\n                                </h3>\r\n                                <div>\r\n                                    Current Bonus: {finalBefore.toExponential(2).toString()}%\r\n                                </div>\r\n                                <div>\r\n                                    Charged Bonus: {finalAfter.toExponential(2).toString()}%\r\n                                </div>\r\n                                <div>\r\n                                    Absolute Increase: {flatIncrease.toExponential(2).toString()}\r\n                                </div>\r\n                                <div>\r\n                                    Percentage Increase: {percIncrease.toExponential(2).toString()}\r\n                                </div>\r\n                                <div>\r\n                                    Weighted Increase: {weightIncrease.toExponential(2).toString()}\r\n                                </div>\r\n                                <div>\r\n                                    Current Weight:{finalWeight}\r\n                                </div>\r\n                            </div>\r\n                        }\r\n\r\n\r\n                    >\r\n                        <div>\r\n\r\n                            <div style={{\r\n                                width: `${227 / 227 * multiplier}px`,\r\n                                height: `${316 / 227 * multiplier}px`,\r\n                                margin: '0 auto', position: 'relative'\r\n                            }}>\r\n                                <Image\r\n                                    alt={`picture of the in game ${cardIDMap[ID].label} card`}\r\n                                    fill\r\n                                    src={cardMapImg[ID].img}\r\n                                    unoptimized={true}\r\n                                    priority\r\n                                />\r\n\r\n                                {isPositiveChargeRatio && (\r\n                                    <Image\r\n                                        alt={`picture of the in game ${cardIDMap[ID].label} card`}\r\n                                        fill\r\n                                        src={greenBorder}\r\n                                        unoptimized={true}\r\n                                        priority\r\n                                    />\r\n                                )}\r\n                                {!isPositiveChargeRatio && (\r\n                                    <Image\r\n                                        alt={`picture of the in game ${cardIDMap[ID].label} card`}\r\n                                        fill\r\n                                        src={redBorder}\r\n                                        unoptimized={true}\r\n                                        priority\r\n                                    />\r\n                                )}\r\n\r\n\r\n                                {/* Final bonus */}\r\n                                <div\r\n                                    style={{\r\n                                        fontWeight: 'bold',\r\n                                        position: 'absolute',\r\n                                        fontSize: vertical ? '13px' : '16px',\r\n                                        top: vertical ? '4px' : '6px',\r\n                                        right: '8px',\r\n                                    }}\r\n                                >\r\n                                    {`${finalAfter.toExponential(2)}%`}\r\n                                </div>\r\n\r\n                                {/* Final temp */}\r\n                                <div\r\n                                    style={{\r\n                                        fontWeight: 'bold',\r\n                                        position: 'absolute',\r\n                                        fontSize: vertical ? '10px' : '13px',\r\n                                        top: vertical ? '24px' : '32px',\r\n                                        right: '8px',\r\n                                    }}\r\n                                >\r\n                                    {`${finalTemp.toExponential(2)}%`}\r\n                                </div>\r\n\r\n\r\n                                <div\r\n                                    className='importantText'\r\n                                    style={{\r\n                                        fontWeight: 'bold',\r\n                                        position: 'absolute',\r\n                                        fontSize: vertical ? '12px' : '14px',\r\n                                        bottom: vertical ? '2px' : '4px',\r\n                                        width: '100%',\r\n                                        textAlign: 'center'\r\n                                    }}\r\n                                >\r\n                                    {cardIDMap[ID].label}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </MouseOverPopover>\r\n\r\n\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            position: 'absolute',\r\n                            bottom: '23px',\r\n                            left: '30px',\r\n                            zIndex: '3',\r\n                        }}\r\n                    >\r\n                        <input\r\n                            aria-label='Specify the weight/importance for this card'\r\n                            style={{\r\n                                width: '55px',\r\n                                color: cardWeight !== defaultWeight && cardWeight !== -1 ? 'black' : 'gray',\r\n                                fontWeight: cardWeight !== defaultWeight && cardWeight !== -1 ? 'bold' : '',\r\n                                borderRadius: '6px',\r\n                                fontSize: '12px',\r\n                                padding: '0 0 0 0',\r\n                                margin: '0',\r\n                                textAlign: 'center'\r\n                            }}\r\n                            type='number'\r\n                            value={finalWeight}\r\n                            onChange={\r\n                                (e) => {\r\n                                    try {\r\n                                        let x = Number(e.target.value);\r\n                                        // x = Math.floor(x);\r\n                                        if (x < 0 || x > 999999) {\r\n                                            return;\r\n                                        }\r\n                                        setCardWeightNew(x);\r\n                                        setRefreshMath(true);\r\n\r\n                                        ReactGA.event({\r\n                                            category: \"card_interaction\",\r\n                                            action: `changed_card_weight`,\r\n                                            label: `${cardIDMap[ID].label}`,\r\n                                            value: x\r\n                                        })\r\n                                    }\r\n                                    catch (err) {\r\n                                        console.log(err);\r\n                                    }\r\n                                }}\r\n                            min=\"0\"\r\n                            max=\"999999\"\r\n                        />\r\n\r\n                        <MouseOverPopover tooltip={\r\n\r\n                            <div>\r\n                                {`The weight (importance) of this card/stat. Feel free to change this`}\r\n                            </div>\r\n                        }\r\n                            opacity={1}\r\n                        >\r\n                            <div style={{ position: 'relative', height: '16px', width: '16px', marginLeft: '2px' }}>\r\n                                <Image\r\n                                    alt='on hover I in a cirlce icon, shows more information on hover'\r\n                                    fill\r\n                                    src={infoIcon}\r\n                                    unoptimized={true}\r\n                                />\r\n                            </div>\r\n                            {/* <img alt='on hover I in a cirlce icon, shows more information on hover' style={{ height: '16px', marginLeft: '6px' }} src={infoIcon} /> */}\r\n                        </MouseOverPopover>\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n            {displayMode !== 'original' && (\r\n                <>\r\n                    <MouseOverPopover\r\n                        tooltip={\r\n                            <div style={{ padding: '6px' }}>\r\n                                <h3 style={{ margin: 0, textAlign: 'center' }}>\r\n                                    {cardIDMap[ID].label}\r\n                                </h3>\r\n                                <div>\r\n                                    Current Bonus: {finalBefore.toExponential(2).toString()}%\r\n                                </div>\r\n                                <div>\r\n                                    Charged Bonus: {finalAfter.toExponential(2).toString()}%\r\n                                </div>\r\n                                <div>\r\n                                    Absolute Increase: {flatIncrease.toExponential(2).toString()}\r\n                                </div>\r\n                                <div>\r\n                                    Percentage Increase: {percIncrease.toExponential(2).toString()}\r\n                                </div>\r\n                                <div>\r\n                                    Weighted Increase: {weightIncrease.toExponential(2).toString()}\r\n                                </div>\r\n                                <div>\r\n                                    Current Weight:{finalWeight}\r\n                                </div>\r\n                            </div>\r\n                        }\r\n\r\n\r\n                    >\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            flex: '1',\r\n                            alignItems: 'center'\r\n                        }}>\r\n                            <div style={{\r\n                                // margin: '0 auto',\r\n                                position: 'relative', width: '33px', height: '33px'\r\n                            }}>\r\n                                <Image\r\n                                    alt={`picture of the in game ${cardIDMap[ID].label} card`}\r\n                                    // fill\r\n                                    src={cardLabelImg[ID].img}\r\n                                    unoptimized={true}\r\n                                    priority\r\n                                />\r\n                            </div>\r\n                            <div\r\n                                className='importantText'\r\n                                style={{\r\n                                    fontWeight: 'bold',\r\n                                    fontSize: vertical ? '12px' : '14px',\r\n                                    bottom: vertical ? '2px' : '4px',\r\n                                    // width: '100%',\r\n                                    // textAlign: 'center',\r\n                                    marginLeft: '6px',\r\n                                    fontSize: '20px'\r\n                                }}\r\n                            >\r\n                                {cardIDMap[ID].label}\r\n                            </div>\r\n\r\n                            <div\r\n                                className='importantText'\r\n                                style={{\r\n                                    fontWeight: 'bold',\r\n                                    fontSize: vertical ? '12px' : '14px',\r\n                                    bottom: vertical ? '2px' : '4px',\r\n                                    // width: '100%',\r\n                                    marginLeft: 'auto',\r\n                                    fontSize: '20px'\r\n                                }}\r\n                            >\r\n                                {displayMode === 'weight' ? weightIncrease.toExponential(2).toString() : percIncrease.toExponential(2).toString() + '%'}\r\n                            </div>\r\n                        </div>\r\n                    </MouseOverPopover>\r\n                </>\r\n            )}\r\n\r\n        </div >\r\n    );\r\n}\r\n\r\nconst defaultWeights = {\r\n    1: -1,\r\n    2: -1,\r\n    3: -1,\r\n    4: -1,\r\n    5: -1,\r\n    6: -1,\r\n    7: -1,\r\n    8: -1,\r\n    9: -1,\r\n    10: -1,\r\n    11: -1,\r\n    12: -1,\r\n    13: -1,\r\n    14: -1,\r\n    15: -1,\r\n    16: -1,\r\n    17: -1,\r\n    18: -1,\r\n    19: -1,\r\n    20: -1,\r\n    21: -1,\r\n    22: -1,\r\n    23: -1,\r\n    24: -1,\r\n    25: -1,\r\n    26: -1,\r\n    27: -1,\r\n    28: -1,\r\n    29: -1,\r\n    30: -1,\r\n    31: -1,\r\n    32: -1,\r\n    33: -1,\r\n    34: -1,\r\n    35: -1,\r\n    36: -1,\r\n    37: -1,\r\n    38: -1,\r\n    39: -1,\r\n    40: -1,\r\n    41: -1,\r\n    42: -1,\r\n    43: -1,\r\n    44: -1,\r\n    45: -1,\r\n    46: -1,\r\n    47: -1,\r\n    48: -1,\r\n    49: -1,\r\n}\r\n\r\nconst CalcReinc = function (data, reincCardCharges) {\r\n\r\n    data = JSON.parse(JSON.stringify(data));\r\n    let classExp = mathHelper.multiplyDecimal(data.CurrentLevel, mathHelper.pow(1.001, mathHelper.min(1000.0, data.CurrentLevel)));\r\n    let class2 = mathHelper.max(1.0, mathHelper.subtractDecimal(mathHelper.logDecimal(data.CurrentLevel, 5.0), 2.0));\r\n    let class3 = mathHelper.max(1.0, 1.0 + (data.CurrentLevel / 2000.0 - 0.5));\r\n    let classTotal = mathHelper.multiplyDecimal(classExp, mathHelper.multiplyDecimal(class2, class3))\r\n    let timerBonuses = data.TimerReincBonuses;\r\n    let otherBonuses = mathHelper.createDecimal(data.ReincarnationBonusesBD);\r\n\r\n\r\n    if (reincCardCharges) {\r\n        const { CardsCollection } = data;\r\n        const cardsById = CardsCollection.reduce((accum, card) => {\r\n            accum[card.ID] = card;\r\n            return accum;\r\n        }, {});\r\n\r\n        let card = cardsById[REINCARNATIONEXP];\r\n\r\n        const {\r\n            CurrentExp,\r\n            ExpNeeded,\r\n            Found,\r\n            ID,\r\n            Level,\r\n            PowerPermaBD,\r\n            PowerTempBD,\r\n        } = card;\r\n        const { ChargeTransfertPowerPerma, ChargeTransfertPowerTemp } = data;\r\n\r\n        let tempValueBefore = mathHelper.createDecimal(PowerTempBD);\r\n        let permValueBefore = mathHelper.createDecimal(PowerPermaBD);\r\n\r\n        let tempBonusBefore = tempPowerBonusFormula[ID](tempValueBefore);\r\n        let permBonusBefore = permPowerBonusFormula[ID](permValueBefore);\r\n\r\n\r\n        let tempValueAfter = mathHelper.multiplyDecimal(tempValueBefore, (1 - ChargeTransfertPowerTemp));\r\n        let permValueAfter = mathHelper.addDecimal(permValueBefore,\r\n            mathHelper.multiplyDecimal(tempValueBefore, ChargeTransfertPowerPerma)\r\n        );\r\n\r\n\r\n        let finalBefore = mathHelper.multiplyDecimal(\r\n            mathHelper.subtractDecimal(\r\n                mathHelper.multiplyDecimal(tempBonusBefore, permBonusBefore),\r\n                1\r\n            ),\r\n            ((1.0 + Level * 0.02) * 100)\r\n        );\r\n\r\n        let temp1 = tempPowerBonusFormula[ID](mathHelper.multiplyDecimal(tempValueBefore, (1.0 - ChargeTransfertPowerTemp)))\r\n        let temp2 = permPowerBonusFormula[ID](\r\n            mathHelper.addDecimal(permValueBefore, mathHelper.multiplyDecimal(tempValueBefore, ChargeTransfertPowerPerma))\r\n        )\r\n        let finalAfter =\r\n            mathHelper.multiplyDecimal(\r\n                mathHelper.subtractDecimal(mathHelper.multiplyDecimal(temp1, temp2), 1),\r\n                (1.0 + Level * 0.02) * 100);\r\n\r\n        if (reincCardCharges > 1) {\r\n            for (let i = 1; i < reincCardCharges; i++) {\r\n                tempValueBefore = mathHelper.addDecimal(tempValueAfter, 0);\r\n                permValueBefore = mathHelper.addDecimal(permValueAfter, 0);\r\n\r\n\r\n                tempValueAfter = mathHelper.multiplyDecimal(tempValueBefore, (1 - ChargeTransfertPowerTemp));\r\n                permValueAfter = mathHelper.addDecimal(permValueBefore,\r\n                    mathHelper.multiplyDecimal(tempValueBefore, ChargeTransfertPowerPerma)\r\n                );\r\n\r\n                temp1 = tempPowerBonusFormula[ID](mathHelper.multiplyDecimal(tempValueBefore, (1.0 - ChargeTransfertPowerTemp)))\r\n                temp2 = permPowerBonusFormula[ID](\r\n                    mathHelper.addDecimal(permValueBefore, mathHelper.multiplyDecimal(tempValueBefore, ChargeTransfertPowerPerma))\r\n                )\r\n                finalAfter =\r\n                    mathHelper.multiplyDecimal(\r\n                        mathHelper.subtractDecimal(mathHelper.multiplyDecimal(temp1, temp2), 1),\r\n                        (1.0 + Level * 0.02) * 100);\r\n\r\n            }\r\n        }\r\n\r\n        otherBonuses = mathHelper.divideDecimal(otherBonuses, finalBefore);\r\n        otherBonuses = mathHelper.multiplyDecimal(otherBonuses, finalAfter);\r\n    }\r\n\r\n\r\n\r\n    let waves = (1.0 + data.BestProgress / 5000.0);\r\n\r\n    let confLog = mathHelper.logDecimal(data.ConfectionTotalLevel / 5000000.0, 2.0)\r\n    let confDiv = mathHelper.divideDecimal(confLog, 2)\r\n    let confection = mathHelper.addDecimal(\r\n        1,\r\n        mathHelper.min(\r\n            mathHelper.max(\r\n                1.0,\r\n                mathHelper.addDecimal(confDiv, 1)\r\n            )\r\n            ,\r\n            data.ConfectionTotalLevel / 5000000.0\r\n        )\r\n    )\r\n\r\n\r\n    let temp1 = mathHelper.multiplyDecimal(timerBonuses, otherBonuses)\r\n\r\n    let currentReincExp = mathHelper.multiplyDecimal(mathHelper.multiplyDecimal(mathHelper.multiplyDecimal(classTotal, temp1), waves), confection);\r\n    let requiredReincExp = mathHelper.createDecimal(data.ReincarnationExpRequiredBD);\r\n    let currentReincLevel = mathHelper.createDecimal(data.ReincarnationLevel).toNumber();\r\n    let calcedReincExp = reincHelper.calcRequiredReincExp(currentReincLevel, data)\r\n    let requiredReincLevel = data.AscensionReincLevelRequired;\r\n    let currReincTime = data.CurrentReincarnationTimer / (60 * 60);\r\n\r\n\r\n    let futureReincLevel = currentReincLevel;\r\n    let loopFlag = true;\r\n    while (loopFlag) {\r\n\r\n        let required = reincHelper.calcRequiredReincExp(futureReincLevel, data);\r\n        if (currentReincExp.greaterThan(required)) {\r\n            futureReincLevel++;\r\n            currentReincExp = mathHelper.subtractDecimal(currentReincExp, required);\r\n        }\r\n        else {\r\n            loopFlag = false;\r\n        }\r\n    }\r\n\r\n    let levelDiff = futureReincLevel - currentReincLevel;\r\n    if (levelDiff === 0) levelDiff = 1;\r\n\r\n    let reincHr = (levelDiff) / currReincTime;\r\n    let remTime = (requiredReincLevel - futureReincLevel) / reincHr;\r\n    let soulClock = data.SoulOldClock;\r\n    let chargeTimerReduction = ((1 + 0.25 * soulClock) * (1.0 + data.WAPCardChargeTimer * 0.01)) - 1;\r\n    let chargeDuration = 12 * chargeTimerReduction;\r\n    let tickRate = (1.0 + (data.PetsSpecial[67].Active + data.PetsSpecial[68].Active + data.PetsSpecial[74].Active) * 0.1)\r\n    // let remainingCharges = Math.floor((remTime * tickRate) / chargeDuration);\r\n    let remainingCharges = Math.floor(remTime / chargeDuration);\r\n\r\n    return { requiredReincLevel, futureReincLevel, levelDiff, reincHr, remTime, soulClock, chargeTimerReduction, chargeDuration, remainingCharges }\r\n}\r\n\r\nexport default function Cards() {\r\n\r\n    // useEffect(() => {\r\n\r\n\r\n    //     setTimeout(() => {\r\n    //         ReactGA.send({ hitType: \"pageview\", page: \"/cards_\", title: \"_Card Calculator Page\" });\r\n    //     }, 500);\r\n    // }, []);\r\n\r\n    const [mobileMode, setMobileMode] = useState(false);\r\n    useEffect(() => {\r\n        setMobileMode(isMobile);\r\n        if (isMobile) {\r\n            setTimeout(() => {\r\n                var viewport = document.querySelector('meta[name=\"viewport\"]');\r\n                if (viewport) {\r\n                    viewport.content = \"initial-scale=0.1\";\r\n                    viewport.content = \"width=1200\";\r\n                }\r\n            }, 500);\r\n        }\r\n    }, [isMobile]);\r\n\r\n    const [clientData, setData] = useLocalStorage('userData', DefaultSave);\r\n    const [data, setRunTimeData] = useState(DefaultSave);\r\n\r\n\r\n    const [weightMap, setWeightMap] = useState(DefaultWeightMap);\r\n    const [cardMap, setCardMap] = useState({})\r\n    const [resetCardWeights, setResetCardWeights] = useState(-1);\r\n    const [forceRefresh, setForceRefresh] = useState(false);\r\n    const [numReincCharges, setNumReincCharges] = useState(1);\r\n\r\n    const [newCardWeights, setNewCardWeightsRunTime] = useState(defaultWeights)\r\n    const [newCardWeightsClient, setNewCardWeights] = useLocalStorage('newCardWeights', defaultWeights)\r\n    useEffect(() => {\r\n\r\n        //Fixes issues with outdated caches\r\n        if (!newCardWeightsClient[40]) {\r\n            setNewCardWeightsRunTime(defaultWeights);\r\n            return setNewCardWeights(defaultWeights);\r\n        }\r\n        setNewCardWeightsRunTime(newCardWeightsClient);\r\n    }, [newCardWeightsClient, setNewCardWeights])\r\n\r\n    const { CardsCollection } = data;\r\n\r\n    useEffect(() => {\r\n        if (resetCardWeights > 10) {\r\n            setResetCardWeights(-2);\r\n        }\r\n    }, [resetCardWeights]);\r\n\r\n    useEffect(() => {\r\n        setRunTimeData(clientData);\r\n        let num = Math.random() * 1000 + 20;\r\n        setResetCardWeights(num);\r\n    }, [clientData]);\r\n\r\n    if (!data.PetsSpecial[74]) {\r\n        return (\r\n            <div>\r\n                <h1>{`Your save is most likely from an older version, please update your game and try with a new save. If that's not the case, please reach out on discord! Link can be found on the gratitude (heart) page`}</h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    // const foundCards = CardsCollection.filter(card => card.Found === 1);\r\n    const cardsById = CardsCollection.reduce((accum, card) => {\r\n        accum[card.ID] = card;\r\n        return accum;\r\n    }, {});\r\n\r\n    let weightedCardInfo = [];\r\n\r\n    for (let i = 0; i < CARD_DISPLAY_IDS.length; i++) {\r\n        weightedCardInfo.push(\r\n            <CardCard\r\n                cardWeight={newCardWeights[CARD_DISPLAY_IDS[i]]}\r\n                setCardWeightNew={(value) => {\r\n                    setNewCardWeights((e) => {\r\n                        let temp = { ...e };\r\n                        temp[CARD_DISPLAY_IDS[i]] = value;\r\n                        return temp;\r\n                    })\r\n                }}\r\n                resetWeights={resetCardWeights} displayMode='original' cardMap={cardMap} setCardMap={setCardMap} data={data} i={i} card={cardsById[CARD_DISPLAY_IDS[i]]} weightMap={weightMap} classes={classes} applyWeights={true} key={`${i}-orig`}></CardCard>\r\n        )\r\n    }\r\n\r\n    let baseCardArr = [];\r\n    Object.values(cardMap).forEach((inner_card) => {\r\n        baseCardArr.push(inner_card);\r\n    })\r\n    let topPercIncrease = baseCardArr.sort((a, b) => {\r\n        let res = b.percIncrease.greaterThan(a.percIncrease) ? 1 : -1;\r\n        return res;\r\n    });\r\n\r\n    let finalPercIncrease = topPercIncrease.slice(0, 5).map((value, index, arr) => {\r\n        return (\r\n            <div style={{\r\n                position: 'relative',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                width: '100%'\r\n            }}\r\n                key={index}\r\n            >\r\n                <div\r\n                    className='importantText'\r\n                    style={{\r\n                        fontSize: '28px',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        // alignSelf: 'start',\r\n                        marginRight: '6px',\r\n                        marginTop: '6px',\r\n                        // position: 'absolute',\r\n                        top: '0',\r\n                        left: '0',\r\n                        zIndex: '2',\r\n                        width: '30px',\r\n                        height: '30px',\r\n                        border: '1.5px solid rgba(255,255,255,0.8)',\r\n                        borderRadius: '15px',\r\n                        backgroundColor: 'rgba(49, 49, 49, 0.8)',\r\n                    }}>\r\n                    <div>\r\n                        {index + 1}\r\n                    </div>\r\n                </div>\r\n                <CardCard\r\n                    cardWeight={newCardWeights[value.ID]}\r\n                    resetWeights={-3} displayMode='perc' vertical={true} cardMap={cardMap} setCardMap={null} data={data} i={index} card={cardsById[value.ID]} weightMap={weightMap} classes={classes} key={`${index}-perc`}></CardCard>\r\n            </div>\r\n        )\r\n    }, []);\r\n\r\n\r\n    let flatIncrease = baseCardArr.sort((a, b) => {\r\n        let res = b.flatIncrease.greaterThan(a.flatIncrease) ? 1 : -1;\r\n        return res;\r\n    });\r\n    let finalFlatIncrease = flatIncrease.slice(0, 5).map((value, index, arr) => {\r\n        return (\r\n            <div style={{ display: 'flex', alignItems: 'center', width: '100%' }} key={index}>\r\n                <div style={{ fontSize: '36px', margin: '0 6px 0 0', }}>\r\n                    {index + 1}\r\n                </div>\r\n                <CardCard\r\n                    cardWeight={newCardWeights[value.ID]}\r\n                    resetWeights={-3} displayMode='flat' vertical={true} cardMap={cardMap} setCardMap={null} data={data} i={index} card={cardsById[value.ID]} weightMap={weightMap} classes={classes} key={`${index}-perc`}></CardCard>\r\n            </div>\r\n        )\r\n    }, []);\r\n\r\n    let weightIncrease = baseCardArr.sort((a, b) => {\r\n        let res = b.weightIncrease.greaterThan(a.weightIncrease) ? 1 : -1;\r\n        return res;\r\n    });\r\n    let finalWeightIncrease = weightIncrease.slice(0, 5).map((value, index, arr) => {\r\n        return (\r\n            <div style={{\r\n                position: 'relative',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                width: '100%'\r\n            }}\r\n                key={index}\r\n            >\r\n                <div\r\n                    className='importantText'\r\n                    style={{\r\n                        fontSize: '28px',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        // alignSelf: 'start',\r\n                        marginRight: '6px',\r\n                        marginTop: '6px',\r\n                        // position: 'absolute',\r\n                        top: '0',\r\n                        left: '0',\r\n                        zIndex: '2',\r\n                        width: '30px',\r\n                        height: '30px',\r\n                        border: '1.5px solid rgba(255,255,255,0.8)',\r\n                        borderRadius: '15px',\r\n                        backgroundColor: 'rgba(49, 49, 49, 0.8)',\r\n                    }}>\r\n                    <div>\r\n                        {index + 1}\r\n                    </div>\r\n                </div>\r\n                <CardCard\r\n                    cardWeight={newCardWeights[value.ID]}\r\n                    resetWeights={-3}\r\n                    displayMode='weight'\r\n                    vertical={true}\r\n                    cardMap={cardMap}\r\n                    setCardMap={null}\r\n                    data={data}\r\n                    i={index}\r\n                    card={cardsById[value.ID]}\r\n                    weightMap={weightMap}\r\n                    classes={classes}\r\n                    key={`${index}-perc`\r\n                    } />\r\n            </div>\r\n        )\r\n    }, []);\r\n\r\n\r\n    const chargesMax = data.CurrentCardCharge === data.MaxCardCharge;\r\n\r\n    let baseReincInfo = CalcReinc(data);\r\n    let remainingCharges = baseReincInfo.remainingCharges;\r\n    let requiredReincLevel = baseReincInfo.requiredReincLevel;\r\n    let currentReincLevel = baseReincInfo.futureReincLevel;\r\n    let currentReincLevelDiff = baseReincInfo.levelDiff;\r\n    let reincHr = baseReincInfo.reincHr;\r\n    let remTime = baseReincInfo.remTime;\r\n    let chargeTimerReduction = baseReincInfo.chargeTimerReduction;\r\n\r\n    let cardChargedReincInfo = CalcReinc(data, numReincCharges);\r\n    let futureReincLevel = cardChargedReincInfo.futureReincLevel;\r\n    let futureReincLevelDiff = cardChargedReincInfo.levelDiff;\r\n\r\n\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n                flex: '1',\r\n                flexDirection: 'column',\r\n                paddingLeft: '6px',\r\n                backgroundColor: 'black'\r\n            }}\r\n        >\r\n\r\n            {/* Charge Information */}\r\n            {false && (\r\n                <div\r\n                    className={chargesMax ? 'borderToFadeInAndOutRed' : 'whiteBorder' + ' importantText'}\r\n                    style={{\r\n                        display: 'flex',\r\n                        height: '60px',\r\n                        alignSelf: 'flex-start',\r\n                        padding: chargesMax ? '0 6px' : '',\r\n                        alignItems: 'center',\r\n                        backgroundColor: 'rgba(255,255,255, 0.1)',\r\n                        borderRadius: '6px',\r\n                        marginBottom: '6px',\r\n                        marginTop: '6px',\r\n                        padding: '0 3px'\r\n                    }}>\r\n                    {chargesMax && (\r\n                        <MouseOverPopover tooltip={\r\n\r\n                            <div >\r\n                                {`You have max card charges!`}\r\n                            </div>\r\n                        }\r\n                            opacity={1}\r\n                        >\r\n                            <div className='elementToFadeInAndOut' style={{ position: 'relative', height: '32px', width: '32px', marginRight: '12px' }}>\r\n                                <Image\r\n                                    alt='on hover I in a cirlce icon, shows more information on hover'\r\n                                    fill\r\n                                    src={infoIconRed}\r\n                                    unoptimized={true}\r\n                                />\r\n                            </div>\r\n                        </MouseOverPopover >\r\n                    )}\r\n                    {/* Current Charge */}\r\n                    <div\r\n                        style={{\r\n                            display: 'flex', marginBottom: '0px', marginRight: '36px', alignItems: 'center'\r\n                        }}\r\n                    >\r\n                        <div\r\n                            style={{ display: 'flex', alignItems: 'center', fontSize: '48px' }}\r\n                        >\r\n                            {`Current Charges: `}\r\n                        </div>\r\n\r\n                        <div style={{ display: 'flex', alignItems: 'center', fontSize: '48px' }}>\r\n                            <div style={{ marginRight: '6px' }}>{data?.CurrentCardCharge}</div>\r\n                            <Image\r\n                                alt='in game charge (battery) image'\r\n                                // fill\r\n                                style={{ height: '60px', width: 'auto' }}\r\n                                src={chargeImg}\r\n                                unoptimized={true}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Charges till Ascension */}\r\n                    <MouseOverPopover tooltip={\r\n\r\n                        <div>\r\n                            {`${requiredReincLevel - currentReincLevel} remaining levels at ${helper.roundTwoDecimal(reincHr)} levels/hr =  ${helper.roundTwoDecimal(remTime)} hours remaining`}\r\n                        </div>\r\n                    }\r\n                        opacity={1}\r\n                    >\r\n                        <div\r\n                            style={{ display: 'flex', marginBottom: '0px', marginleft: '36px', alignItems: 'center', minWidth: '270px' }}\r\n                        >\r\n                            <div\r\n                                style={{ display: 'flex', alignItems: 'center', fontSize: '48px' }}\r\n                            >\r\n                                {`Remaining Charges in ascension: `}\r\n                            </div>\r\n                            <div style={{ display: 'flex', alignItems: 'center', fontSize: '48px' }}>\r\n                                <div style={{ marginRight: '6px' }}>{` ${remainingCharges}`}</div>\r\n                                <Image\r\n                                    alt='in game charge (battery) image'\r\n                                    // fill\r\n                                    style={{ height: '60px', width: 'auto', maxHeight: '65px' }}\r\n                                    src={chargeImg}\r\n                                    unoptimized={true}\r\n                                />\r\n                            </div>\r\n\r\n                            <div style={{ position: 'relative', height: '55px', width: '55px', marginLeft: '6px' }}>\r\n                                <Image\r\n                                    alt='on hover I in a cirlce icon, shows more information on hover'\r\n                                    fill\r\n                                    src={infoIcon}\r\n                                    unoptimized={true}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </MouseOverPopover >\r\n                </div>\r\n            )}\r\n\r\n            <div className='importantText' style={{ display: 'flex', alignItems: 'end' }}>\r\n                <h1 style={{ margin: '6px 6px', fontSize: '32px' }}>\r\n                    Cards Guide\r\n                </h1>\r\n                {/* Charges till Ascension */}\r\n                <MouseOverPopover\r\n                    tooltip={\r\n\r\n                        <div>\r\n                            <div>\r\n                                {`Remaining charges are calculated based on your remaining reincarnation levels left to ascend multiplied by your current reincarnation levels / hr. \\nThis is calculated based on how many reincarnation levels you would gain if you reincarnate now divded by the current reincarnation duration.`}\r\n                            </div>\r\n                            <div>\r\n                                {`${requiredReincLevel - currentReincLevel} remaining levels at ${helper.roundTwoDecimal(reincHr)} levels/hr =  ${helper.roundTwoDecimal(remTime)} hours remaining`}\r\n                            </div>\r\n                            <div>\r\n                                {`Current charge timer reduction: ${helper.roundTwoDecimal(chargeTimerReduction * 100)}%`}\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    opacity={1}\r\n                >\r\n                    <div style={{ position: 'relative', height: '24px', width: '24px', marginLeft: '6px', marginBottom: '16px' }}>\r\n                        <Image\r\n                            alt='on hover I in a cirlce icon, shows more information on hover'\r\n                            fill\r\n                            src={infoIcon}\r\n                            unoptimized={true}\r\n                        />\r\n                        {/* </div> */}\r\n                    </div>\r\n                </MouseOverPopover >\r\n            </div>\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    flex: '1',\r\n                    maxHeight: 'calc(100% - 55px)'\r\n                }}\r\n            >\r\n                {/* Original Cards */}\r\n                <div\r\n                    style={{\r\n                        maxWidth: '747px',\r\n                        padding: '6px 6px 0 6px',\r\n                        display: 'flex',\r\n                        flexWrap: 'wrap',\r\n                        alignContent: 'flex-start',\r\n                        border: '1.5px solid rgba(255,255,255,0.8)',\r\n                        borderRadius: '6px',\r\n                        backgroundColor: 'rgba(255,255,255, 0.1)',\r\n                        overflow: 'auto'\r\n                    }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            width: '100%',\r\n                            justifyContent: 'center'\r\n                        }}\r\n                    >\r\n\r\n                        <h3\r\n                            className='importantText'\r\n                            style={{ marginTop: '0', marginBottom: '0', marginRight: '12px' }}\r\n                        >\r\n                            Current Cards\r\n                        </h3>\r\n                        <div>\r\n                            <button\r\n                                onClick={() => {\r\n                                    let num = Math.random() * 1000 + 20;\r\n                                    setNewCardWeights({\r\n                                        1: -1,\r\n                                        2: -1,\r\n                                        3: -1,\r\n                                        4: -1,\r\n                                        5: -1,\r\n                                        6: -1,\r\n                                        7: -1,\r\n                                        8: -1,\r\n                                        9: -1,\r\n                                        10: -1,\r\n                                        11: -1,\r\n                                        12: -1,\r\n                                        13: -1,\r\n                                        14: -1,\r\n                                        15: -1,\r\n                                        16: -1,\r\n                                        17: -1,\r\n                                        18: -1,\r\n                                        19: -1,\r\n                                        20: -1,\r\n                                        21: -1,\r\n                                        22: -1,\r\n                                        23: -1,\r\n                                        24: -1,\r\n                                        25: -1,\r\n                                        26: -1,\r\n                                        27: -1,\r\n                                    })\r\n\r\n                                }}\r\n                            >Reset Weights</button>\r\n                        </div>\r\n                    </div>\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            flexWrap: 'wrap',\r\n                            alignContent: 'flex-start',\r\n                            maxHeight: 'calc(100% - 22px)',\r\n                            overflow: 'auto'\r\n                        }}\r\n                    >\r\n                        {weightedCardInfo}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* next charges + suggestions */}\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        flex: '1',\r\n                        flexDirection: 'column',\r\n                        marginLeft: '12px',\r\n                        marginRight: '12px',\r\n                        // border: '1.5px solid rgba(255,255,255,0.8)',\r\n                        // borderRadius: '6px',\r\n                        // backgroundColor: 'rgba(255,255,255, 0.1)',\r\n                        overflow: 'auto'\r\n                    }}\r\n                >\r\n\r\n                    {/* Current/Future Charges */}\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            // flexWrap: 'wrap',\r\n                            alignContent: 'flex-start',\r\n                            justifyContent: 'center',\r\n                            border: '1.5px solid rgba(255,255,255,0.8)',\r\n                            borderRadius: '6px',\r\n                            overflow: 'auto',\r\n                            overflowY: 'hidden',\r\n                            overflowX: 'auto',\r\n                            height: '48px',\r\n                            backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                            marginBottom: '6px',\r\n                        }}\r\n                    >\r\n                        {/* Current Charges */}\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            // flex: \"1\",\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center',\r\n                            // width: '100%',\r\n                            height: '100%',\r\n                            minWidth: '243px',\r\n                            margin: '0 auto'\r\n                        }}>\r\n                            <h3\r\n                                className='importantText'\r\n                                style={{ marginTop: '6px', marginBottom: '6px', fontSize: '26px' }}\r\n                            >\r\n                                <div style={{ display: 'flex', justifyContent: 'center' }}>{`Current Charges: ${data?.CurrentCardCharge}`}</div>\r\n                            </h3>\r\n                        </div>\r\n\r\n                        {/* Seperater */}\r\n                        {true && (\r\n                            <div style={{ width: '54px', minWidth: '54px', overflow: 'hidden' }}>\r\n                                <svg\r\n                                    style={{\r\n                                        height: '100%',\r\n                                        width: '100%'\r\n                                    }}\r\n                                    viewBox=\"0 0 100 10\" preserveAspectRatio=\"none\">\r\n                                    {/* <polygon fill='rgba(255,255,255, 0.6)' points=\"66 0 100 0 33 10 0 10\" /> */}\r\n                                    <polygon\r\n                                        // stroke=\"black\" strokeWidth=\"0.5\"\r\n                                        fill='rgba(255,255,255, 0.6)' points=\"75 0 100 0 25 10 0 10\" />\r\n                                </svg>\r\n                            </div>\r\n                        )}\r\n\r\n                        {/* Future Charges */}\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            // flex: \"1\",\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center',\r\n                            // width: '100%',\r\n                            height: '100%',\r\n                            minWidth: '290px',\r\n                            margin: '0 auto'\r\n                        }}>\r\n                            <h3\r\n                                className='importantText'\r\n                                style={{ marginTop: '6px', marginBottom: '6px', fontSize: '26px' }}\r\n                            >\r\n                                <div style={{ marginRight: '6px' }}>{`Remaining Charges: ${remainingCharges}`}</div>\r\n                            </h3>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Current/Future Reincarnation Levels */}\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            flexWrap: 'wrap',\r\n                            // alignItems: 'center',\r\n                            border: '1.5px solid rgba(255,255,255,0.8)',\r\n                            borderRadius: '6px',\r\n                            overflow: 'auto',\r\n                            height: '110px',\r\n                            marginBottom: '6px'\r\n                        }}\r\n                    >\r\n\r\n\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                            width: '100%',\r\n                            backgroundColor: 'rgba(255,255,255, 0.06)',\r\n                        }}>\r\n                            <h3\r\n                                className='importantText'\r\n                                style={{ marginTop: '0px', marginBottom: '0px', fontSize: '26px', display: 'flex', alignItems: 'center ' }}\r\n                            >\r\n                                <div>\r\n                                    {`Reincarnation levels to ascend:`}\r\n                                </div>\r\n                                <div style={{ fontWeight: 'normal', marginLeft: '6px' }}>\r\n                                    {`${data.AscensionReincLevelRequired}`}\r\n                                </div>\r\n                            </h3>\r\n                        </div>\r\n\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            flex: '1',\r\n                            alignItems: 'center',\r\n                            width: '100%',\r\n                            backgroundColor: 'rgba(255,255,255, 0.09)',\r\n                        }}>\r\n                            {/* Current Reincarnation levels */}\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                flex: \"1\",\r\n                                justifyContent: 'center',\r\n                                alignItems: 'center',\r\n                                width: '100%',\r\n                                height: '100%'\r\n                            }}>\r\n                                <h3\r\n                                    className='importantText'\r\n                                    style={{ marginTop: '6px', marginBottom: '6px', fontSize: '20px' }}\r\n                                >\r\n                                    <div style={{ marginRight: '6px', display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\r\n                                        <div>\r\n                                            {`Current Reinc. Level:`}\r\n                                        </div>\r\n                                        <div style={{ fontWeight: 'normal' }}>\r\n                                            {`${currentReincLevel} (+${currentReincLevelDiff})`}\r\n                                        </div>\r\n                                    </div>\r\n                                </h3>\r\n                            </div>\r\n\r\n                            {/* Seperater */}\r\n                            {true && (\r\n                                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                                    {/* Num Charges */}\r\n                                    <div>\r\n                                        <div\r\n                                            style={{\r\n                                                display: 'flex',\r\n                                                alignItems: 'center',\r\n                                                bottom: '23px',\r\n                                                left: '30px',\r\n                                                zIndex: '3',\r\n                                                marginBottom: '-6px'\r\n                                            }}\r\n                                        >\r\n                                            <input\r\n                                                aria-label='How many reinc card charges to simulate being charged'\r\n                                                style={{\r\n                                                    width: '30px',\r\n                                                    // color: cardWeight !== defaultWeight && cardWeight !== -1 ? 'black' : 'gray',\r\n                                                    // fontWeight: cardWeight !== defaultWeight && cardWeight !== -1 ? 'bold' : '',\r\n                                                    borderRadius: '6px',\r\n                                                    fontSize: '12px',\r\n                                                    padding: '0 0 0 0',\r\n                                                    margin: '0',\r\n                                                    textAlign: 'center'\r\n                                                }}\r\n                                                type='number'\r\n                                                value={numReincCharges}\r\n                                                onChange={\r\n                                                    (e) => {\r\n                                                        try {\r\n                                                            let x = Number(e.target.value);\r\n                                                            x = Math.floor(x);\r\n                                                            if (x < 1 || x > 99) {\r\n                                                                return;\r\n                                                            }\r\n                                                            setNumReincCharges(x);\r\n                                                        }\r\n                                                        catch (err) {\r\n                                                            console.log(err);\r\n                                                        }\r\n                                                    }}\r\n                                                min=\"0\"\r\n                                                max=\"999999\"\r\n                                            />\r\n\r\n                                            <MouseOverPopover tooltip={\r\n\r\n                                                <div>\r\n                                                    {`How many reincarnation card charges to simulate being used`}\r\n                                                </div>\r\n                                            }\r\n                                                opacity={1}\r\n                                            >\r\n                                                <div style={{ position: 'relative', height: '16px', width: '16px', marginLeft: '2px' }}>\r\n                                                    <Image\r\n                                                        alt='on hover I in a cirlce icon, shows more information on hover'\r\n                                                        fill\r\n                                                        src={infoIcon}\r\n                                                        unoptimized={true}\r\n                                                    />\r\n                                                </div>\r\n                                            </MouseOverPopover>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div style={{ height: '36px', width: '36px', position: 'relative', margin: '0 -3px' }}>\r\n                                        <Image\r\n                                            alt='arrow point to the left'\r\n                                            src={rightArrow}\r\n                                            fill\r\n                                            unoptimized\r\n                                        />\r\n                                    </div>\r\n                                    <div style={{ color: 'green', marginTop: '-10px' }}>\r\n                                        {`+${futureReincLevel - currentReincLevel}`}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n\r\n                            {/* Future Reincarnation Levels */}\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                flex: \"1\",\r\n                                justifyContent: 'center',\r\n                                alignItems: 'center',\r\n                                width: '100%',\r\n                                height: '100%'\r\n                            }}>\r\n                                <h3\r\n                                    className='importantText'\r\n                                    style={{ marginTop: '6px', marginBottom: '6px', fontSize: '20px' }}\r\n                                >\r\n                                    <div style={{ marginRight: '6px', display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\r\n                                        <div>\r\n                                            {`Future Reinc. Level:`}\r\n                                        </div>\r\n                                        <div style={{ fontWeight: 'normal' }}>\r\n                                            {`${futureReincLevel} (+${futureReincLevelDiff})`}\r\n                                        </div>\r\n                                    </div>\r\n                                </h3>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            // flexDirection: 'column',\r\n                            flexWrap: 'wrap',\r\n                            gap: '6px',\r\n                            justifyContent: 'space-around',\r\n                            width: '100%'\r\n                        }}\r\n                    >\r\n\r\n                        {/* Top 5 Weighted increase */}\r\n                        <div\r\n                            style={{\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                // flexWrap: 'wrap',\r\n                                alignContent: 'flex-start',\r\n                                border: '1.5px solid rgba(255,255,255,0.8)',\r\n                                borderRadius: '6px',\r\n                                overflow: 'auto',\r\n                                // height: '250px',\r\n                                width: '100%',\r\n                                maxWidth: '360px',\r\n                                minWidth: '273px',\r\n                                // marginRight:'auto'\r\n                            }}\r\n                        >\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                justifyContent: 'center',\r\n                                // width: '100%',\r\n                                backgroundColor: 'rgba(255,255,255, 0.06)',\r\n                            }}>\r\n                                <h3\r\n                                    className='importantText'\r\n                                    style={{ marginTop: '6px', marginBottom: '6px', fontSize: '28px' }}\r\n                                >\r\n                                    Best Weight\r\n                                </h3>\r\n                            </div>\r\n                            <div\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    fontSize: '24px',\r\n                                    padding: '0 12px 0 12px'\r\n                                }}\r\n                            >\r\n                                <div className='importantText'>\r\n                                    Card\r\n                                </div>\r\n                                <div className='importantText' style={{ marginLeft: 'auto' }}>\r\n                                    Weighted Gain\r\n                                </div>\r\n                            </div>\r\n                            <div\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    flexDirection: 'column',\r\n                                    // width: '100%',\r\n                                    justifyContent: 'space-around',\r\n                                    alignItems: 'center',\r\n                                    backgroundColor: 'rgba(255,255,255, 0.1)',\r\n                                    padding: '6px'\r\n                                }}\r\n                            >\r\n                                {finalWeightIncrease}\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        {/* Top 5 % increase */}\r\n                        <div\r\n                            style={{\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                // flexWrap: 'wrap',\r\n                                alignContent: 'flex-start',\r\n                                border: '1.5px solid rgba(255,255,255,0.8)',\r\n                                borderRadius: '6px',\r\n                                overflow: 'auto',\r\n                                // height: '250px',\r\n                                maxWidth: '360px',\r\n                                minWidth: '273px',\r\n                                width: '100%',\r\n                                // marginRight: 'auto'\r\n                                // marginBottom: '12px',\r\n                                // marginLeft: '12px'\r\n                            }}\r\n                        >\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                justifyContent: 'center',\r\n                                // width: '100%',\r\n                                backgroundColor: 'rgba(255,255,255, 0.06)',\r\n                            }}>\r\n                                <h3\r\n                                    className='importantText'\r\n                                    style={{ marginTop: '6px', marginBottom: '6px', fontSize: '28px' }}\r\n                                >\r\n                                    Best Percentage\r\n                                </h3>\r\n                            </div>\r\n                            <div\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    fontSize: '24px',\r\n                                    padding: '0 12px 0 12px'\r\n                                }}\r\n                            >\r\n                                <div className='importantText'>\r\n                                    Card\r\n                                </div>\r\n                                <div className='importantText' style={{ marginLeft: 'auto' }}>\r\n                                    % Gain\r\n                                </div>\r\n                            </div>\r\n                            <div\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    flexDirection: 'column',\r\n                                    // width: '100%',\r\n                                    justifyContent: 'space-around',\r\n                                    alignItems: 'center',\r\n                                    backgroundColor: 'rgba(255,255,255, 0.1)',\r\n                                    padding: '6px'\r\n                                }}\r\n                            >\r\n                                {finalPercIncrease}\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    );\r\n};\r\n\r\n","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\page_content.jsx",["252"],[],"\"use client\"\r\n\r\n\r\nimport Image from 'next/image';\r\nimport { useState, useEffect, useCallback, useMemo, useRef } from 'react';\r\nimport useLocalStorage from \"use-local-storage\";\r\n\r\nimport { isMobile } from 'mobile-device-detect';\r\nimport './JSONDisplay.css'; // Add this line to import the CSS file\r\nimport { BonusMap, petNameArray, petNames, getPet, DefaultWeightMap } from '../util/itemMapping.js';\r\nimport PetItemCoin from './PetItemCoin.jsx';\r\nimport ItemSelection from \"../util/ItemSelection copy\";\r\nimport MouseOverPopover from \"../util/Tooltip\";\r\n\r\nimport helper from '../util/helper.js';\r\nimport xIcon from \"../../../public/images/icons/x_icon.svg\"\r\nimport pinIcon from \"../../../public/images/icons/pin-line-icon.svg\"\r\nimport trashIcon from \"../../../public/images/icons/trash-can-icon.svg\"\r\nimport infoIcon from '../../../public/images/icons/info.svg';\r\nimport infoIconRed from '../../../public/images/icons/info_red.svg';\r\nimport infoIconRedThick from '../../../public/images/icons/info_red_thick.svg';\r\nimport infoIconGreen from '../../../public/images/icons/info_green.svg';\r\nimport infoIconGreenThick from '../../../public/images/icons/info_green_thick.svg';\r\nimport infoIconAmber from '../../../public/images/icons/info_amber.svg';\r\n// import rankExplain from \"../../../public/images/rank_explain.png\"\r\n\r\nimport ReactGA from \"react-ga4\";\r\nimport SearchBox from '../util/search.jsx';\r\nimport petHelper from '../util/petHelper.js';\r\nimport DefaultSave from '../util/tempSave.json';\r\nimport { mainTeamSuggestions, reincTeamSuggestions, gearTeamSuggestions, statTeamSuggestions, maxKey } from '../pets/teamSuggestions.js';\r\n\r\nReactGA.initialize([{\r\n    trackingId: \"G-GGLPK02VH8\",\r\n    // gaOptions: {...}, // optional\r\n    // gtagOptions: {\r\n    //     send_page_view: false\r\n    // },\r\n}]);\r\nlet groupCache = {};\r\nfunction setGroupCache(newCache) {\r\n    groupCache = newCache;\r\n}\r\n\r\nconst defaultPetSelection = petNameArray.map(petData => petData.petId);\r\n\r\nfunction ScoreSection({ data, group, totalScore, defaultRank }) {\r\n    const { baseGroupScore, groupScoreMax, dmgCount, timeCount, synergyBonus, groupScore } = petHelper.calculateGroupScore(group, defaultRank);\r\n    const score = groupScore;\r\n    const displayedDamage = (score * 5 * data.PetDamageBonuses).toExponential(2);\r\n    return (\r\n        <>\r\n            <ul>\r\n                {/* <li key=\"totalScore\">\r\n                    {`True Damage: ${(5 * groupScoreMax * Number(data?.PetDamageBonuses)).toExponential(2)}`}\r\n                </li> */}\r\n                <li key=\"totalScore\">\r\n                    {`Rank 1 Damage: ${displayedDamage}`}\r\n                </li>\r\n                <li key=\"baseGroupScore\">\r\n                    Group Base: {Number(baseGroupScore).toExponential(2)}\r\n                </li>\r\n                <li key=\"damageBonus\">\r\n                    Dmg Bonus: {Number(1 + dmgCount * petHelper.EXP_DMG_MOD).toFixed(2)}x\r\n                </li>\r\n                <li key=\"timeBonus\">\r\n                    Time Bonus: {Number(1 + timeCount * petHelper.EXP_TIME_MOD).toFixed(2)}x\r\n                </li>\r\n                <li key=\"synergyBonus\">\r\n                    Synergy: {Number(synergyBonus).toFixed(2)}x\r\n                </li>\r\n                <li key=\"petDamageBonus\">\r\n                    PetDmgMod: {Number(data?.PetDamageBonuses).toExponential(2)}\r\n                </li>\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\nimport Head from 'next/head';\r\n\r\n\r\nexport default function Expeditions() {\r\n\r\n\r\n    const [mobileMode, setMobileMode] = useState(false);\r\n    useEffect(() => {\r\n        setMobileMode(isMobile);\r\n        if (isMobile) {\r\n            setTimeout(() => {\r\n                var viewport = document.querySelector('meta[name=\"viewport\"]');\r\n                if (viewport) {\r\n                    viewport.content = \"initial-scale=0.1\";\r\n                    viewport.content = \"width=1200\";\r\n                }\r\n            }, 500);\r\n        }\r\n    }, [isMobile]);\r\n\r\n\r\n\r\n    const [clientData, setData] = useLocalStorage('userData', DefaultSave);\r\n    const [data, setRunTimeData] = useState(DefaultSave);\r\n\r\n\r\n    const [petWhiteList, setPetWhiteListRunTime] = useState([]);\r\n    const [petWhiteListClient, setPetWhiteList] = useLocalStorage(\"petWhiteList\", []);\r\n    useEffect(() => {\r\n\r\n        let petWhiteListClientTemp = [];\r\n        let foundOld = false;\r\n        for (const [key, value] of Object.entries(petWhiteListClient)) {\r\n            if (value.placement === 'rel') {\r\n                foundOld = true;\r\n            }\r\n            else {\r\n                petWhiteListClientTemp.push(value);\r\n            }\r\n        }\r\n        if (foundOld) {\r\n            setPetWhiteList(petWhiteListClientTemp);\r\n        }\r\n        setPetWhiteListRunTime(petWhiteListClientTemp);\r\n    }, [petWhiteListClient, setPetWhiteList]);\r\n\r\n    const [manualEnabledPetsLoaded, setManualEnabledPetsLoaded] = useState(false);\r\n    const [manualEnabledPets, setManualEnabledPetsRunTime] = useState({});\r\n    const [manualEnabledPetsClient, setManualEnabledPets] = useLocalStorage(\"manualEnabledPets\", {});\r\n    useEffect(() => {\r\n        setManualEnabledPetsLoaded(true);\r\n        setManualEnabledPetsRunTime(manualEnabledPetsClient);\r\n    }, [manualEnabledPetsClient])\r\n\r\n    const [enabledBonusHighlight, setEnabledBonusHighlightRunTime] = useState({});\r\n    const [enabledBonusHighlightClient, setEnabledBonusHighlight] = useLocalStorage(\"enabledBonusHighlight\", {});\r\n    useEffect(() => {\r\n        setEnabledBonusHighlightRunTime(enabledBonusHighlightClient);\r\n    }, [enabledBonusHighlightClient]);\r\n\r\n    const [showAllBonusTally, setShowAllBonusTallyRunTime] = useState(false);\r\n    const [showAllBonusTallyClient, setShowAllBonusTally] = useLocalStorage(\"showAllBonusTally\", false);\r\n    useEffect(() => {\r\n        setShowAllBonusTallyRunTime(showAllBonusTallyClient);\r\n    }, [showAllBonusTallyClient]);\r\n\r\n    const [leftOverBonus1, setLeftOverBonus1RunTime] = useState(1016);\r\n    const [leftOverBonus1Client, setLeftOverBonus1] = useLocalStorage(\"leftOverBonus1\", 1016);\r\n    useEffect(() => {\r\n        setLeftOverBonus1RunTime(leftOverBonus1Client);\r\n    }, [leftOverBonus1Client]);\r\n\r\n    const [hideLocked, setHideLockedRunTime] = useState(false);\r\n    const [hideLockedClient, setHideLocked] = useLocalStorage(\"hideLocked\", false);\r\n    useEffect(() => {\r\n        setHideLockedRunTime(hideLockedClient);\r\n    }, [hideLockedClient]);\r\n\r\n    const [activeCustomBonuses, setActiveCustomBonusesRunTime] = useState([]);\r\n    const [activeCustomBonusesClient, setActiveCustomBonuses] = useLocalStorage(\"activeCustomBonuses\", []);\r\n    useEffect(() => {\r\n        setActiveCustomBonusesRunTime(activeCustomBonusesClient);\r\n    }, [activeCustomBonusesClient]);\r\n\r\n    const [groupRankCritera, setGroupRankCriteriaRunTime] = useState(1);//1 = overall damage + modifiers, 2 = token/hr + (damage and modifiers), 3 = advanced/custom\r\n    const [groupRankCriteraClient, setGroupRankCriteria] = useLocalStorage(\"groupRankCriteria\", 1);\r\n    useEffect(() => {\r\n        setGroupRankCriteriaRunTime(groupRankCriteraClient);\r\n    }, [groupRankCriteraClient]);\r\n\r\n    const [defaultRank, setDefaultRankRunTime] = useState(1);\r\n    const [defaultRankClient, setDefaultRank] = useLocalStorage(\"defaultRank\", 1);\r\n    useEffect(() => {\r\n        setDefaultRankRunTime(defaultRankClient);\r\n    }, [defaultRankClient]);\r\n\r\n    const [comboSelector, setComboSelectorRunTime] = useState(1);\r\n    const [comboSelectorClient, setComboSelector] = useLocalStorage(\"comboSelector\", 1);\r\n    useEffect(() => {\r\n        setComboSelectorRunTime(comboSelectorClient);\r\n    }, [comboSelectorClient]);\r\n\r\n    const [numTeams, setNumTeamsRunTime] = useState(1);\r\n    const [numTeamsClient, setNumTeams] = useLocalStorage(\"numTeams\", 1);\r\n    useEffect(() => {\r\n        setNumTeamsRunTime(numTeamsClient);\r\n    }, [numTeamsClient]);\r\n\r\n\r\n    const tokenSelections = { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0, 12: 0 };\r\n    const [hoveredBonus, setHoveredBonus] = useState(0);\r\n    const [activePet, setActivePet] = useState(-1);\r\n    const [groups, setGroups] = useState([]);\r\n    const [selectedPets, setSelectedPets] = useState([]);\r\n    const [failedFilters, setFailedFilters] = useState([]);\r\n    const [originalPets, setOriginalPets] = useState([]);\r\n    const [refreshGroups, setRefreshGroups] = useState(false);\r\n    const [weightMap, setWeightMap] = useState(DefaultWeightMap);\r\n    const [selectedItems, setSelectedItems] = useState(defaultPetSelection);\r\n    const [tokenDamageBias, setTokenDamageBias] = useState(15);\r\n    const [recommendedSelected, setRecommendedSelected] = useState(false);\r\n\r\n    const includeLocked = false;\r\n\r\n    useEffect(() => {\r\n        let recalculate = true;\r\n\r\n        setRefreshGroups(false);\r\n        console.log(`handle groups called`)\r\n        const petData = data?.PetsCollection || [];\r\n        if (petData.length === 0) return null;\r\n        const selectedItemsById = petData.reduce((accum, item) => {\r\n            accum[parseInt(item.ID, 10)] = item;\r\n            return accum;\r\n        }, {})\r\n\r\n\r\n        const localPets = selectedItems.filter((e) => e < 9999).map(petId => selectedItemsById[petId]);\r\n        const keyString = selectedItems.sort().join(',');\r\n        let groups = groupCache[keyString];\r\n        if (groups && !recalculate) {\r\n            setGroups(groups);\r\n        } else {\r\n            groups = petHelper.findBestGroups(\r\n                localPets,\r\n                defaultRank,\r\n                groupRankCritera,\r\n                numTeams === -1 ? data.ExpeditionLimit : numTeams,\r\n                {\r\n                    tokenDamageBias: tokenDamageBias,\r\n                    activeBonuses: activeCustomBonuses,\r\n                    setFailedFilters: setFailedFilters,\r\n                    petWhiteList: petWhiteList\r\n                }\r\n            );\r\n            setGroupCache({ ...groupCache, [keyString]: groups })\r\n            setGroups(groups);\r\n\r\n        }\r\n    }, [activeCustomBonuses, defaultRank, groupRankCritera, numTeams, petWhiteList, tokenDamageBias, refreshGroups, data, selectedItems])\r\n\r\n\r\n    const dataLoaded = useRef(false);\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        if (dataLoaded.current === false && manualEnabledPetsLoaded) {\r\n\r\n            dataLoaded.current = true;\r\n            let uploadedData = clientData;\r\n            uploadedData.PetDamageBonuses = helper.calcPOW(uploadedData.PetDamageBonusesBD);\r\n\r\n            let specialPetCombo = 1;\r\n            for (let i = 0; i < uploadedData.PetsSpecial.length; i++) {\r\n                let t = uploadedData.PetsSpecial[i];\r\n                if (t.BonusID === 5007 && t.Active === 1) {\r\n                    specialPetCombo += t.BonusPower / 100;\r\n                }\r\n            }\r\n            specialPetCombo = helper.roundTwoDecimal(specialPetCombo);\r\n\r\n            setComboSelector(specialPetCombo);\r\n\r\n            if (numTeams === -1) {\r\n                setNumTeams(uploadedData.ExpeditionLimit);\r\n            }\r\n            setGroupCache({});\r\n\r\n            uploadedData.PetsCollection.sort((a, b) => a.ID - b.ID);\r\n\r\n            let tempPets = [];\r\n            let origPets = [];\r\n            const positiveRankedPets = uploadedData.PetsCollection.filter(\r\n                (pet) => {\r\n                    const isValidLocked = includeLocked ? true : !!pet.Locked;\r\n                    if (isValidLocked) {\r\n                        origPets.push(pet);\r\n                    }\r\n                    //If set to 0, we manually want this pet disabled\r\n                    if ((isValidLocked && manualEnabledPets[pet.ID] !== 0) || manualEnabledPets[pet.ID] === 1) {\r\n                        tempPets.push(pet);\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                    // return isValidRank && isValidLocked;\r\n                }\r\n            ).map((pet) => pet.ID);\r\n            setSelectedItems(positiveRankedPets);\r\n            setOriginalPets(origPets);\r\n            setSelectedPets(tempPets);\r\n\r\n            setRefreshGroups(true);\r\n\r\n            setRunTimeData(clientData);\r\n        }\r\n    }, [manualEnabledPets, manualEnabledPetsLoaded, clientData, includeLocked, numTeams, setComboSelector, setData, setNumTeams]);\r\n\r\n\r\n    useEffect(() => {\r\n        setRefreshGroups(true)\r\n    }, [defaultRank, comboSelector, groupRankCritera, numTeams, tokenDamageBias, activeCustomBonuses,])\r\n\r\n\r\n    let whiteListAlertText = '';\r\n\r\n    let totalTokensHR = 0;\r\n    let damageTotal = 0;\r\n\r\n    let bonusTotals = {\r\n        // 1001: 0, //potatoe gain\r\n        // 1002: 0, //class exp gain\r\n        // 1003: 0, //skull gain\r\n        1009: 0, // residue gain\r\n        1010: 0, //card power gain\r\n        1011: 0, // expedition reward\r\n        1012: 0, //dungeon time gain\r\n        1013: 0, //dungeon damage\r\n        1014: 0, //card exp\r\n        1015: 0, //reinc pts gain\r\n        1016: 0 // token gain\r\n    };\r\n    let bonusPets = {};\r\n    let totalMessages = [];\r\n\r\n    let relWhiteListMap = {};\r\n\r\n    let filterablePets = [];\r\n    let equippedPets = {};\r\n    let whitelistedPets = {};\r\n\r\n\r\n    const maxPets = 4;\r\n    const maxType = 2 * numTeams;\r\n    const manualGroups = {};\r\n    let numGround = 0;\r\n    let numAir = 0;\r\n\r\n    for (let i = 0; i < petWhiteList.length; i++) {\r\n        let cur = petWhiteList[i];\r\n        let inner_pet = cur.pet;\r\n\r\n        if (cur.placement === 'blacklist') {\r\n            continue;\r\n        }\r\n        if (inner_pet.Type === 1) {\r\n            numGround++;\r\n        }\r\n        else {\r\n            numAir++;\r\n        }\r\n\r\n        // used to show which group it got sorted into\r\n        if (cur.placement === `auto`) {\r\n            relWhiteListMap[cur.id] = { ...cur };\r\n        }\r\n        else if (cur.placement === 'team') {\r\n\r\n            if (!manualGroups[cur.parameters.team]) {\r\n                manualGroups[cur.parameters.team] = [];\r\n            }\r\n            manualGroups[cur.parameters.team].push(inner_pet);\r\n            if (manualGroups[cur.parameters.team].length > maxPets) {\r\n                whiteListAlertText = `Group ${cur.parameters.team + 1} has too many pets!`;\r\n            }\r\n\r\n            if (whiteListAlertText.length === 0) {\r\n\r\n                let airy = 0;\r\n                let groundy = 0;\r\n                manualGroups[cur.parameters.team].forEach((manual_pet) => {\r\n                    if (manual_pet.Type === 1) {\r\n                        groundy++;\r\n                    }\r\n                    else {\r\n                        airy++;\r\n                    }\r\n                });\r\n                if (airy > (maxPets / 2)) {\r\n                    whiteListAlertText = `Group ${cur.parameters.team} has too many air pets!`;\r\n                }\r\n                else if (airy > (maxPets / 2)) {\r\n                    whiteListAlertText = `Group ${cur.parameters.team} has too many ground pets!`;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (whiteListAlertText.length === 0) {\r\n        if (numAir > maxType) {\r\n            whiteListAlertText = `There are too many air pets!`;\r\n        }\r\n        else if (numGround > maxType) {\r\n            whiteListAlertText = `There are too many ground pets!`;\r\n        }\r\n    }\r\n\r\n\r\n    // if (groups && groupRankCritera === 2)\r\n    if (groups.length > 0)\r\n        groups.map((group, index) => {\r\n            // damageTotal += (petHelper.calculateGroupScore(group, defaultRank).groupScore) * 5 * data.PetDamageBonuses;\r\n            damageTotal += (petHelper.calculateGroupScore(group, 0).groupScore) * 5 * data.PetDamageBonuses;\r\n            group.forEach((pet) => {\r\n\r\n                if (!equippedPets[pet.ID]) {\r\n                    equippedPets[pet.ID] = pet;\r\n                }\r\n\r\n                if (pet.ID in relWhiteListMap) {\r\n                    relWhiteListMap[pet.ID].finalGroup = index;\r\n                }\r\n\r\n                pet.BonusList.forEach((bon) => {\r\n                    if (bon.ID in bonusTotals) bonusTotals[bon.ID]++;\r\n                })\r\n            })\r\n\r\n\r\n            const groupBests = petHelper.calculateBestHours(group, null, { clover: data.SoulGoldenClover, residueToken: data.CowShopExpeditionToken, data: data }, comboSelector)[tokenSelections[index]];\r\n            // totalTokensHR += groupBests.tokenHR;\r\n            // totalTokensHR += groupBests.totalTokens / groupBests.hours;\r\n            totalTokensHR += groupBests.tokenHR / groupBests.hours;\r\n        })\r\n\r\n    if (selectedPets) {\r\n        for (let i = 0; i < selectedPets.length; i++) {\r\n            selectedPets[i].BonusList.forEach((bonus) => {\r\n                if (!bonusPets[bonus.ID]) {\r\n                    bonusPets[bonus.ID] = { total: 0, pets: [] }\r\n                }\r\n                bonusPets[bonus.ID].total++;\r\n                bonusPets[bonus.ID].pets.push(selectedPets[i])\r\n            })\r\n        }\r\n    }\r\n\r\n    for (const [key, value] of Object.entries(bonusTotals)) {\r\n        if (activeCustomBonuses.find((a) => a.id === Number(key)) || showAllBonusTally)\r\n            totalMessages.push({ text: `${BonusMap[key].label}: ${value}/${bonusPets[key] ? bonusPets[key].total : 0} pets`, bonus: key })\r\n    }\r\n\r\n\r\n    if (groupRankCritera === 1) {\r\n        selectedPets.map((pet) => {\r\n            let found;\r\n            try {\r\n\r\n                //Awful way to do it, but need to check we haven't already added pet to table\r\n                found = petWhiteList.find((a) => a.id === pet.ID);\r\n            }\r\n            catch (err) {\r\n                console.log(err);\r\n            }\r\n\r\n            if (found) {\r\n\r\n                if (!whitelistedPets[pet.ID]) {\r\n                    whitelistedPets[pet.ID] = pet;\r\n                }\r\n\r\n                return;\r\n            }\r\n            if (pet.ID > 0)\r\n                filterablePets.push({ id: pet.ID, label: getPet(pet.ID).name })\r\n\r\n        })\r\n    }\r\n\r\n    const leftOverIgnore = {\r\n        17: true,//attack speed\r\n        30: true,//contagion hp damage\r\n        27: true,//fries bonus\r\n        19: true,//Pet LEVEL Exp\r\n        18: true,//Pet Dmg\r\n        20: true,//Pet Rank Exp\r\n        26: true,//Plant Final Prod\r\n        32: true,//Plant Growth\r\n        25: true,//Plant Manual Harvest\r\n        26: true,//Plant Final Prod\r\n        24: true,//Plant Rank Exp\r\n        31: true,//Reinc Point Bonus\r\n        18: true,//Pet Dmg\r\n        18: true,//Pet Dmg\r\n        18: true,//Pet Dmg\r\n        18: true,//Pet Dmg\r\n        18: true,//Pet Dmg\r\n    }\r\n    let leftOver1Pets = [];\r\n\r\n    selectedPets.map((e, index) => {\r\n        let found = e.BonusList.find((inner_bonus) => inner_bonus.ID === leftOverBonus1);\r\n        if (found) {\r\n            let tempy = { ...e };\r\n\r\n            if (equippedPets[e.ID]) {\r\n                tempy.equipped = true;\r\n            }\r\n            if (whitelistedPets[e.ID]) {\r\n                tempy.whitelisted = true;\r\n            }\r\n\r\n            leftOver1Pets.push(tempy);\r\n        }\r\n    });\r\n\r\n    const handleItemSelected = (items) => {\r\n        setSelectedItems(items);\r\n\r\n        const petData = data?.PetsCollection || [];\r\n        let localPets = [];\r\n        let enabledPets = {};\r\n\r\n        for (let i = 0; i < items.length; i++) {\r\n            localPets.push(petData[items[i]])\r\n            enabledPets[items[i]] = 1;\r\n        }\r\n\r\n        setSelectedPets(localPets);\r\n        setManualEnabledPets((curr_pets) => {\r\n\r\n            let newEnabled = { ...curr_pets };\r\n\r\n            //First check which ones should now be marked as 0 (disabled)\r\n            for (const [key, value] of Object.entries(curr_pets)) {\r\n                if (!enabledPets[key]) {\r\n                    newEnabled[key] = 0;\r\n                }\r\n            }\r\n\r\n            //Any others are now enabled\r\n            for (const [key, value] of Object.entries(enabledPets)) {\r\n\r\n                newEnabled[key] = 1;\r\n            }\r\n\r\n            //Go over previously selected pets, and if never logged them before, and are not tracked still, means they were disabled\r\n            for (let i = 0; i < selectedItems.length; i++) {\r\n                if (!newEnabled[selectedItems[i]]) {\r\n                    newEnabled[selectedItems[i]] = 0;\r\n                }\r\n            }\r\n\r\n            return newEnabled;\r\n        });\r\n\r\n        if (items) {\r\n            setRefreshGroups(true);\r\n        }\r\n    };\r\n\r\n    leftOver1Pets = leftOver1Pets.sort((a, b) => petHelper.calculatePetBaseDamage(b, defaultRank) - petHelper.calculatePetBaseDamage(a, defaultRank))\r\n\r\n    let bonusesWithPets = {};\r\n    data.PetsCollection.forEach((bonus_pet) => {\r\n        bonus_pet.BonusList.forEach((pet_bonus_inner) => {\r\n            bonusesWithPets[pet_bonus_inner.ID] = bonus_pet;\r\n        })\r\n    })\r\n\r\n    let filterableBonuses = Object.values(BonusMap)\r\n        .filter((e) => !!e && !leftOverIgnore[e.id] && !!bonusesWithPets[e.id])\r\n        .sort((a, b) => a.label.localeCompare(b.label))\r\n        .map((inner_e) => {\r\n            if (inner_e.id < 5000) {\r\n                if (inner_e.id >= 1000 && !inner_e.label.includes(`Expedition`)) {\r\n                    inner_e.label = `Expedition ` + inner_e.label;\r\n                }\r\n                return inner_e;\r\n            }\r\n        })\r\n\r\n\r\n    return (\r\n        <div\r\n            // className=\"grid-container\"\r\n            style={{\r\n                // gridTemplateColumns: '4fr 4fr 2fr',\r\n                // columnGap: '12px',\r\n                width: 'calc(100% - 0px)',\r\n                background: 'black',\r\n                display: 'flex',\r\n                overflow: 'auto'\r\n            }}\r\n        >\r\n            {/* Grid Left */}\r\n            <div\r\n                className='importantText'\r\n                style={{\r\n                    height: 'calc(100vh - 52px)',\r\n                    border: '2px solid rgba(255,255,255,0.8)',\r\n                    margin: '6px 12px 6px 6px',\r\n                    padding: '0px 0 0px 0px',\r\n                    backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                    overflow: 'hidden',\r\n                    borderRadius: '6px',\r\n                    width: '33%',\r\n                    minWidth: '283px',\r\n                    maxWidth: '590px'\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        minWidth: '300px',\r\n                        height: '100%',\r\n                        backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                    }}\r\n                >\r\n\r\n                    {/* Title header */}\r\n                    <div style={{ backgroundColor: 'rgba(255,255,255, 0.12)', }}>\r\n\r\n                        <div\r\n                            style={{\r\n                                fontSize: '32px', fontWeight: 'bold', width: '100%', borderBottom: '0px solid rgba(255,255,255,0.8)',\r\n                                textAlign: 'center'\r\n                            }}>\r\n                            Best Teams\r\n                        </div>\r\n                        <div style={{\r\n                            display: 'flex', fontSize: '20px',\r\n                            // fontWeight: 'bold',\r\n                            borderTop: '2px solid rgba(255,255,255,0.8)',\r\n                            borderBottom: '2px solid rgba(255,255,255,0.8)',\r\n                            textAlign: 'center'\r\n                        }}>\r\n                            <div style={{ width: '50%', borderRight: '2px solid rgba(255,255,255,0.8)' }}>\r\n                                {`Total Damage: ${damageTotal.toExponential(3)}`}\r\n                            </div>\r\n                            <div style={{ width: '50%' }}>\r\n                                {`Total tokens/hr: ${helper.roundThreeDecimal(totalTokensHR)}`}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div style={{ overflow: 'auto' }}>\r\n\r\n                        {groups.reduce((accum, group, index) => {\r\n                            let groupLabel = ``;\r\n\r\n                            const groupTotal = petHelper.calculateGroupScore(group, defaultRank);\r\n                            // let tokenScore = groupTotal.tokenMult * (Math.pow(1 + petHelper.SOUL_CLOVER_STEP, data.SoulGoldenClover)) * (1 + 0.05 * data.SoulGoldenClover) * comboSelector;s\r\n                            // let tokenScore = groupTotal.tokenMult * (Math.pow(1 + petHelper.SOUL_CLOVER_STEP, data.SoulGoldenClover)) * comboSelector * data.ExpeditionTokenBonuses;\r\n                            // tokenScore = tokenScore.toExponential(3);\r\n                            let tempTokenScore = petHelper.calculateBestHours(group, null, { clover: data.SoulGoldenClover, residueToken: data.CowShopExpeditionToken, data: data }, comboSelector)[tokenSelections[index]]\r\n                            let tokenScore = (tempTokenScore.tokenHR / tempTokenScore.hours).toExponential(3);\r\n                            const score = groupTotal.groupScore;\r\n                            const displayedDamage = (score * 5 * data.PetDamageBonuses).toExponential(2);\r\n                            const trueDamage = (5 * groupTotal.groupScoreMax * Number(data?.PetDamageBonuses)).toExponential(2);\r\n\r\n                            let tokenInfo = ``;\r\n\r\n                            let groupLabelDamage = ``;\r\n                            let groupLabelToken = ``;\r\n                            let groupRankDamage = ``;\r\n\r\n                            switch (groupRankCritera) {\r\n                                case 1://damage\r\n                                    groupLabel = `Group ${index + 1}`;\r\n                                    // groupLabelDamage = `Damage: ${displayedDamage}`\r\n                                    groupRankDamage = `Rank Dmg: ${displayedDamage}`\r\n                                    groupLabelDamage = `Game Dmg: ${trueDamage}`\r\n                                    groupLabelToken = `Token/hr: ${tokenScore}`\r\n                                    tokenInfo = petHelper.calculateBestHours(group, null, { clover: data.SoulGoldenClover, residueToken: data.CowShopExpeditionToken, data: data }, comboSelector);\r\n\r\n                                    break;\r\n                                case 2://token\r\n                                    groupLabel = `Group ${index + 1}`;\r\n                                    // groupLabelDamage = `Damage: ${displayedDamage}`\r\n                                    groupLabelDamage = `Damage: ${trueDamage}`\r\n                                    groupLabelToken = `Token/hr: ${tokenScore}`\r\n                                    tokenInfo = petHelper.calculateBestHours(group, null, { clover: data.SoulGoldenClover, residueToken: data.CowShopExpeditionToken, data: data }, comboSelector);\r\n                                    break;\r\n                                case 3://Advanced\r\n                                    groupLabel = `Group ${index + 1}`;\r\n                                    // groupLabelDamage = `Damage: ${displayedDamage}`\r\n                                    groupLabelDamage = `Damage: ${trueDamage}`\r\n                                    groupLabelToken = `Token/hr: ${tokenScore}`\r\n                                    tokenInfo = petHelper.calculateBestHours(group, null, { clover: data.SoulGoldenClover, residueToken: data.CowShopExpeditionToken, data: data }, comboSelector);\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n\r\n                            }\r\n\r\n                            const totalScore = Number(Number(data?.PetDamageBonuses) * score * 5).toExponential(3);\r\n                            const groupTooltip = (\r\n                                <div className=\"groups-tooltip\">\r\n                                    <span className=\"groups-tooltip-content\">\r\n                                        <h3>Group Score ({totalScore})</h3>\r\n                                        <ScoreSection data={data} group={group} totalScore={totalScore} defaultRank={defaultRank} />\r\n                                    </span>\r\n                                </div>\r\n                            );\r\n\r\n                            let GroupTitle = <div\r\n                                className=\"grid-row\"\r\n                                key={(1 + index) * 9001}\r\n                                style={{\r\n                                    backgroundColor: 'rgba(255,255,255, 0.12)',\r\n                                }}\r\n                            >\r\n                                <div\r\n                                    style={{ display: 'flex', width: '100%', borderBottom: '1px solid rgba(255,255,255,0.8)' }}\r\n                                >\r\n                                    <div\r\n                                        style={{ borderRight: '1px solid rgba(255,255,255,0.8)', width: '33%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                        {groupRankDamage}\r\n                                    </div>\r\n\r\n\r\n                                    <div\r\n                                        style={{ width: '33%', borderRight: '1px solid rgba(255,255,255,0.8)', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\r\n                                    >\r\n                                        <div style={{ margin: '0 12px' }}>\r\n\r\n                                            {groupLabelDamage}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div\r\n                                        style={{ width: '33%', display: 'flex', alignItems: 'center', justifyContent: 'center', margin: '2px 0' }}\r\n                                    >\r\n                                        <div style={{ margin: '0 12px' }}>\r\n                                            {groupLabelToken}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            let GroupIcons =\r\n                                <div\r\n                                    style={{\r\n                                        display: 'flex', padding: '6px 6px 3px 6px',\r\n\r\n                                        backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                                    }}\r\n                                >\r\n                                    {!!group && group.map((petData, idx) => {\r\n                                        const { ID } = petData;\r\n                                        // let staticPetData = petNameArray.find(staticPetDatum => staticPetDatum.petId === ID)\r\n\r\n                                        // if (!staticPetData) {\r\n                                        //     staticPetData = {\r\n                                        //         ...petNames[9999]\r\n                                        //     }\r\n                                        // }\r\n                                        let staticPetData = getPet(ID);\r\n\r\n\r\n                                        return (\r\n                                            <div\r\n                                                key={ID}\r\n                                                style={{\r\n                                                    position: 'relative',\r\n                                                    display: 'flex',\r\n                                                    // flex: '1',\r\n                                                    width: 'calc(25% - 3px)',\r\n                                                    height: 'auto',\r\n                                                    alignItems: 'center',\r\n                                                    justifyContent: 'center'\r\n                                                }}\r\n                                            >\r\n                                                <PetItemCoin\r\n                                                    petData={staticPetData}\r\n                                                    fullPetData={petData}\r\n                                                    data={data}\r\n                                                    isSelected={true}\r\n                                                    onClick={() => { }}\r\n                                                    weightMap={weightMap}\r\n                                                    defaultRank={defaultRank}\r\n                                                    borderActive={petData.BonusList.find((a) => a.ID === hoveredBonus) || ID === activePet}\r\n                                                    enabledBonusHighlight={enabledBonusHighlight}\r\n                                                />\r\n                                                <div\r\n                                                    className=\"hover\"\r\n                                                    style={{\r\n                                                        position: 'absolute', top: '0', right: '0',\r\n                                                    }}\r\n                                                    onClick={(e) => {\r\n\r\n                                                        setPetWhiteList((curr) => {\r\n                                                            let temp = [...curr];\r\n\r\n                                                            let pet_inner = temp.find((sample_pet) => sample_pet.id === petData.ID);\r\n                                                            if (!pet_inner) {\r\n                                                                temp.push({ label: staticPetData.name, id: staticPetData.petId, placement: 'team', parameters: { team: index, damageBias: 17 }, pet: petData });\r\n                                                            }\r\n                                                            else {\r\n                                                                pet_inner.placement = 'team';\r\n                                                                pet_inner.parameters = { team: index };\r\n                                                                pet_inner.pet = petData;\r\n                                                            }\r\n                                                            return temp;\r\n                                                        })\r\n\r\n                                                        setRefreshGroups(true);\r\n                                                        return;\r\n                                                    }}\r\n                                                >\r\n                                                    <div style={{ width: '20px', height: '20px', position: 'relative', zIndex: '2' }} >\r\n                                                        <Image\r\n                                                            fill\r\n                                                            src={pinIcon}\r\n                                                            alt='push pin'\r\n                                                        />\r\n                                                    </div>\r\n                                                    {/* <img\r\n                                                        alt='push pin'\r\n                                                        style={{ width: '20px' }}\r\n                                                        src={pinIcon}\r\n                                                    /> */}\r\n                                                </div>\r\n                                                <div\r\n                                                    className=\"hover\"\r\n                                                    style={{\r\n                                                        position: 'absolute', bottom: '0', right: '0',\r\n                                                    }}\r\n                                                    onClick={(e) => {\r\n\r\n                                                        setPetWhiteList((curr) => {\r\n                                                            let temp = [...curr];\r\n\r\n                                                            let pet_inner = temp.find((sample_pet) => sample_pet.id === petData.ID);\r\n                                                            if (!pet_inner) {\r\n                                                                temp.push({\r\n                                                                    label: staticPetData.name,\r\n                                                                    id: staticPetData.petId,\r\n                                                                    placement: 'blacklist',\r\n                                                                    parameters: { team: 0, damageBias: 17 },\r\n                                                                    pet: petData\r\n                                                                });\r\n                                                            }\r\n                                                            else {\r\n                                                                pet_inner.placement = 'blacklist';\r\n                                                                pet_inner.parameters = { team: 0 }\r\n                                                                pet_inner.pet = petData;\r\n                                                            }\r\n\r\n                                                            return temp;\r\n                                                        })\r\n\r\n                                                        setRefreshGroups(true);\r\n                                                        return;\r\n\r\n                                                    }}\r\n                                                >\r\n                                                    <div style={{ width: '20px', height: '20px', position: 'relative', zIndex: '2' }} >\r\n                                                        <Image\r\n                                                            src={trashIcon}\r\n                                                            alt='trash can'\r\n                                                            fill\r\n                                                        />\r\n                                                    </div>\r\n                                                    {/* <img alt='trash can'\r\n                                                        style={{ width: '20px' }}\r\n                                                        src={trashIcon} /> */}\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n\r\n\r\n                            let finalRow = <div\r\n                                key={'group' + index}\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    border: groupRankCritera === 2 && groupTotal.tokenRewardCount > 0 ? '1px black rgba(255,255,255,0.8)' : 'none',\r\n                                    marginTop: index === 0 ? '16px' : '22px',\r\n                                    marginLeft: '6px',\r\n                                    marginRight: '6px',\r\n                                    marginBottom: '12px',\r\n                                    border: '1px solid rgba(255,255,255,0.8)',\r\n                                }}>\r\n                                <div\r\n                                    style={{ display: 'flex', backgroundColor: 'rgba(255,255,255, 0.12)', borderRight: `1px solid rgba(255,255,255,0.8)` }}\r\n                                >\r\n                                    <MouseOverPopover tooltip={groupTooltip} extraClasses={`maxHeight`}>\r\n                                        <div\r\n                                            style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', padding: '0 2px' }}\r\n                                        >\r\n                                            <div style={{ fontSize: '20px' }}>\r\n                                                {index + 1}\r\n                                            </div>\r\n                                            <div style={{ height: '18px', width: '18px', margin: '0 0 0 0', position: 'relative' }} >\r\n                                                <Image\r\n                                                    fill\r\n                                                    src={infoIcon}\r\n                                                    alt={`letter \"I\" in a circle, shows more information on hover`}\r\n                                                />\r\n                                            </div>\r\n                                            {/* <img alt={`letter \"I\" in a circle, shows more information on hover`} style={{ height: '16px', margin: '0 0 0 6px' }} src={infoIcon} /> */}\r\n                                        </div>\r\n                                    </MouseOverPopover>\r\n                                </div>\r\n                                <div\r\n                                    style={{ display: 'flex', flexDirection: 'column', flex: '1' }}\r\n                                >\r\n                                    {GroupTitle}\r\n                                    {GroupIcons}\r\n                                </div>\r\n                            </div>\r\n                            accum.push(finalRow);\r\n\r\n                            return accum;\r\n                        }, [])}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Grid Center */}\r\n            <div\r\n                className='importantText'\r\n                style={{\r\n                    border: '2px solid rgba(255,255,255,0.8)',\r\n                    margin: '6px 12px 6px 6px',\r\n                    maxHeight: 'calc(100vh - 46px)',\r\n                    backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                    overflow: 'hidden',\r\n                    borderRadius: '6px',\r\n                    width: '33%',\r\n                    minWidth: '410px',\r\n                    // maxWidth: '590px'\r\n                }}>\r\n\r\n                {/* Header */}\r\n                <div style={{\r\n                    display: 'flex', width: '100%', borderBottom: '2px solid  rgba(255,255,255,0.8)', justifyContent: 'center',\r\n                    backgroundColor: 'rgba(255,255,255, 0.12)',\r\n                }}>\r\n\r\n                    <div style={{ fontSize: '32px', fontWeight: 'bold', }}>\r\n                        Configuration\r\n                    </div>\r\n                    <div style={{ height: '30px', alignSelf: 'center', marginLeft: '12px' }} >\r\n                        <MouseOverPopover\r\n                            opacity='1'\r\n                            tooltip={\r\n                                <div>\r\n                                    {/* <img alt='screenshot of game text explaining how pet ranks work' src={rankExplain} style={{ height: '50px' }} /> */}\r\n                                    <img alt='screenshot of game text explaining how pet ranks work' src={'/images/rank_explain.png'} style={{ height: '50px' }} />\r\n                                    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                        <div style={{ fontWeight: 'bold', fontSize: '24px', minWidth: \"90px\" }}>Explanation/How To Use: </div>\r\n                                        <div style={{ marginLeft: '12px', maxWidth: '724px' }}>\r\n                                            Whitelist (make sure they are on an expedition team) any important pets (such as those that have item rating, reincarnation exp, residue) or ones that you have equipped\r\n                                            often. The expedition ranks will make those pets level faster and give bigger bonuses when actively equipped </div>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                        >\r\n                            <div style={{ height: '30px', width: '30px', position: 'relative' }} >\r\n\r\n                                <Image\r\n                                    alt='Letter \"I\" inside a circle, shows more information on hover'\r\n                                    src={infoIconAmber}\r\n                                    fill\r\n                                />\r\n                            </div>\r\n                            {/* <img alt='Letter \"I\" inside a circle, shows more information on hover' src={infoIconAmber} style={{ height: '30px' }} /> */}\r\n                        </MouseOverPopover>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* Info Configs */}\r\n                <div\r\n                    style={{ padding: '6px 3px 1px 3px', overflow: 'auto', maxHeight: 'calc(100% - 45px)', overflowAnchor: 'none' }}\r\n                >\r\n                    <div style={{\r\n                        display: 'flex', flexDirection: 'column',\r\n                        backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                        margin: '6px 6px',\r\n                        padding: '6px',\r\n                        border: '1px solid rgba(255,255,255,0.8)', overflowAnchor: 'none'\r\n                    }}>\r\n\r\n                        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n\r\n                            <div>{`Ignore Pets Rank`}</div>\r\n                            <input\r\n                                aria-label='Force pets to rank 1'\r\n                                type=\"checkbox\"\r\n                                onChange={(e) => {\r\n                                    setDefaultRank(e.target.checked ? 1 : 0)\r\n                                }}\r\n                                checked={!!defaultRank}\r\n                                value={!!defaultRank}\r\n                            />\r\n                        </div>\r\n                        <div style={{ display: 'flex', alignItems: 'center', marginTop: '3px' }}>\r\n                            <div style={{ marginRight: '12px' }}>\r\n                                {`Golden Clover Level: ${data.SoulGoldenClover}`}\r\n                            </div>\r\n                            <div>\r\n\r\n                                {`Token Bonuses: ${helper.roundThreeDecimal(helper.roundTwoDecimal(data.ExpeditionTokenBonuses) * helper.roundTwoDecimal(data.ExpeditionResourceBonuses) * comboSelector)}`}\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n\r\n                            <MouseOverPopover tooltip={\r\n                                <div>\r\n                                    Expedition reward from active pets special combo (0, 10%, 20%)\r\n                                </div>\r\n                            }>\r\n                                <div style={{ marginRight: '12px' }}>\r\n                                    Expedition Reward Combo\r\n                                </div>\r\n                            </MouseOverPopover>\r\n\r\n                            <select\r\n                                className='importantText'\r\n                                style={{ maxWidth: '144px', backgroundColor: '#171717', borderRadius: '4px' }}\r\n                                aria-label='Specify desired combo bonus'\r\n                                // disabled={refreshGroups}\r\n                                onChange={\r\n                                    (e) => {\r\n                                        setComboSelector(Number(e.target.value))\r\n                                    }\r\n                                }\r\n                                // defaultValue={comboSelector + ''}\r\n                                value={comboSelector + ''}\r\n                            >\r\n                                <option\r\n                                    value=\"1\">1.0</option>\r\n                                <option\r\n                                    value=\"1.1\">1.1</option>\r\n                                <option\r\n                                    value=\"1.2\">1.2</option>\r\n                            </select>\r\n\r\n                        </div>\r\n                        <div style={{ display: 'flex', alignItems: 'center' }} >\r\n                            <div\r\n                                style={{\r\n                                    marginRight: '12px'\r\n                                }}>\r\n                                Number of teams:\r\n                            </div>\r\n                            <input\r\n                                id='prepFormInput'\r\n                                className='importantText'\r\n                                style={{ maxWidth: '144px', backgroundColor: '#171717', borderRadius: '4px', fontSize: '14px' }}\r\n                                aria-label='Number of teams to calculate'\r\n                                type='number'\r\n                                value={numTeams}\r\n                                onChange={\r\n                                    (e) => {\r\n                                        try {\r\n                                            let x = Number(e.target.value);\r\n                                            x = Math.floor(x);\r\n                                            if (x < 1 || x > data.ExpeditionLimit) {\r\n                                                return;\r\n                                            }\r\n                                            setNumTeams(e.target.value);\r\n                                        }\r\n                                        catch (err) {\r\n                                            console.log(err);\r\n                                        }\r\n                                        // console.log(`pressed: ${e.target.value}`)\r\n\r\n                                    }}\r\n                                placeholder={numTeams + ''}\r\n                                min=\"1\"\r\n                                max={`${data.ExpeditionLimit}`}\r\n                            />\r\n                        </div>\r\n\r\n                        {groupRankCritera === 1 && (\r\n                            <div style={{ display: 'flex', alignItems: 'center', marginTop: '2px' }}>\r\n\r\n                                <div>{`Show all bonus totals`}</div>\r\n                                <input\r\n                                    aria-label='Displays bonuses whose backgrounds can be coloured in'\r\n                                    // disabled={refreshGroups}\r\n                                    type=\"checkbox\" onChange={(e) => {\r\n                                        setShowAllBonusTally(e.target.checked ? true : false)\r\n                                    }} />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Card to toggle bonuses */}\r\n                    {showAllBonusTally && (\r\n                        <div style={{\r\n                            display: 'flex', flexDirection: 'column',\r\n                            backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                            margin: '6px 6px',\r\n                            padding: '6px',\r\n                            border: '1px solid rgba(255,255,255,0.8)',\r\n                        }}>\r\n                            <div\r\n                                style={{\r\n                                    margin: '6px 0 6px 0',\r\n                                    display: 'flex',\r\n                                    flexDirection: 'column'\r\n                                }}>\r\n                                {totalMessages.map((e, index) => {\r\n                                    if (index % 2 !== 0 && index > 0) return;\r\n\r\n                                    let firstDmgBias = Number(e.bonus);\r\n                                    let secondDmgBias = (index + 1) < totalMessages.length ? Number(totalMessages[index + 1].bonus) : null;\r\n\r\n                                    let firstFailMsg = failedFilters[e.bonus];\r\n                                    let secondFailMsg = secondDmgBias ? failedFilters[totalMessages[index + 1].bonus] : null;\r\n\r\n                                    if (firstFailMsg) {\r\n                                        console.log(`aaa`)\r\n                                    }\r\n\r\n                                    activeCustomBonuses.forEach((active_bon) => {\r\n                                        if (active_bon.placement !== 'rel') return null;\r\n                                        // return;\r\n                                        if (active_bon.id === firstDmgBias) {\r\n                                            firstDmgBias = <div\r\n                                                style={{\r\n                                                    // margin: '6px 0 6px 0',\r\n                                                    display: 'flex'\r\n                                                }}\r\n                                            >\r\n                                                <div\r\n                                                    style={{\r\n                                                        marginRight: '12px'\r\n                                                    }}\r\n                                                >\r\n                                                    {`damage bias`}\r\n                                                </div>\r\n                                                <input\r\n                                                    aria-label='Damage bias to control when a pet should be put in'\r\n                                                    type='number'\r\n                                                    className='prepNumber'\r\n                                                    value={active_bon.relThresh}\r\n                                                    onChange={\r\n                                                        (num) => {\r\n                                                            try {\r\n                                                                let x = Number(num.target.value);\r\n                                                                x = Math.floor(x);\r\n                                                                if (x < 0 || x > 100) {\r\n                                                                    return;\r\n                                                                };\r\n\r\n                                                                setActiveCustomBonuses((bonuses) => {\r\n                                                                    let newBonuses = [...bonuses];\r\n                                                                    let bonus = newBonuses.find((a) => a.id === active_bon.id);\r\n                                                                    bonus.relThresh = x;\r\n                                                                    return newBonuses;\r\n                                                                })\r\n                                                            }\r\n                                                            catch (err) {\r\n                                                                console.log(err);\r\n                                                            }\r\n                                                        }}\r\n                                                    placeholder={1 + ''}\r\n                                                    min=\"0\"\r\n                                                    max=\"100\"\r\n                                                />\r\n                                            </div>\r\n                                        }\r\n                                        if (active_bon.id === secondDmgBias) {\r\n                                            secondDmgBias = <div\r\n                                                style={{\r\n                                                    // margin: '6px 0 6px 0',\r\n                                                    display: 'flex'\r\n                                                }}\r\n                                            >\r\n                                                <div\r\n                                                    style={{\r\n                                                        marginRight: '12px'\r\n                                                    }}\r\n                                                >\r\n                                                    {`damage bias`}\r\n                                                </div>\r\n                                                <input\r\n                                                    aria-label='Damage bias to control when a pet should be put in'\r\n                                                    type='number'\r\n                                                    className='prepNumber'\r\n                                                    value={active_bon.relThresh}\r\n                                                    onChange={\r\n                                                        (num) => {\r\n                                                            try {\r\n                                                                let x = Number(num.target.value);\r\n                                                                x = Math.floor(x);\r\n                                                                if (x < 0 || x > 100) {\r\n                                                                    return;\r\n                                                                };\r\n\r\n                                                                setActiveCustomBonuses((bonuses) => {\r\n                                                                    let newBonuses = [...bonuses];\r\n                                                                    let bonus = newBonuses.find((a) => a.id === active_bon.id);\r\n                                                                    bonus.relThresh = x;\r\n                                                                    return newBonuses;\r\n                                                                })\r\n                                                            }\r\n                                                            catch (err) {\r\n                                                                console.log(err);\r\n                                                            }\r\n                                                        }}\r\n                                                    placeholder={1 + ''}\r\n                                                    min=\"0\"\r\n                                                    max=\"100\"\r\n                                                />\r\n                                            </div>\r\n                                        }\r\n                                    })\r\n\r\n                                    return (\r\n                                        <div\r\n                                            key={e.bonus}\r\n                                            style={{\r\n                                                display: 'flex'\r\n                                            }}\r\n                                        >\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '50%'\r\n                                                }}\r\n                                            >\r\n                                                <div\r\n                                                    style={{\r\n                                                        // margin: '6px 0 6px 0'\r\n                                                        // color: helper.bonusColorMap[e.bonus].color\r\n                                                    }}\r\n                                                    onMouseEnter={(e_inner) => {\r\n                                                        setHoveredBonus(Number(e.bonus))\r\n                                                    }}\r\n                                                    onMouseLeave={(e_inner) => {\r\n                                                        setHoveredBonus(-1);\r\n                                                    }}\r\n\r\n                                                >\r\n                                                    {totalMessages[index].text}\r\n                                                    <div>\r\n                                                        <div style={{ display: 'flex' }}>\r\n                                                            <div>{`Enable highlight`}</div>\r\n                                                            <input\r\n                                                                aria-label={`Enables the highlight for this bonus`}\r\n                                                                type=\"checkbox\"\r\n                                                                onChange={(e_inner) => {\r\n                                                                    setEnabledBonusHighlight({ ...enabledBonusHighlight, [e.bonus]: e_inner.target.checked ? 1 : 0 })\r\n                                                                }}\r\n                                                                checked={enabledBonusHighlight[e.bonus]}\r\n                                                            />\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    width: '24px',\r\n                                                                    background: helper.bonusColorMap[e.bonus].color\r\n                                                                }}\r\n                                                            />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"dmgBias\">\r\n                                                        {isNaN(firstDmgBias) &&\r\n\r\n\r\n                                                            <MouseOverPopover tooltip={\r\n                                                                <div>\r\n                                                                    <div>\r\n                                                                        How aggressively to slot in these pets\r\n                                                                    </div>\r\n                                                                    <div>\r\n                                                                        Higher value means these pets need to be stronger to considered, lower means smaller threshold to slot them in\r\n                                                                    </div>\r\n                                                                    <div>\r\n                                                                        This is based on the best team at each step without these pets, vs with it.\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            }>\r\n                                                                {firstDmgBias}\r\n                                                            </MouseOverPopover>\r\n\r\n\r\n\r\n                                                        }\r\n                                                    </div>\r\n                                                    {!!firstFailMsg &&\r\n                                                        <div\r\n                                                            style={{ color: 'red' }}>\r\n                                                            {firstFailMsg}\r\n                                                        </div>\r\n                                                    }\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                            {(index + 1 < totalMessages.length) && (\r\n                                                <div\r\n                                                    key={totalMessages[index + 1].bonus}\r\n                                                    style={{\r\n                                                        width: '50%'\r\n                                                    }}\r\n                                                >\r\n                                                    <div\r\n                                                        style={{\r\n                                                            // margin: '6px 0 6px 0'\r\n                                                        }}\r\n                                                        onMouseEnter={(e_inner) => {\r\n                                                            setHoveredBonus(Number(totalMessages[index + 1].bonus))\r\n                                                        }}\r\n                                                        onMouseLeave={(e_inner) => {\r\n                                                            setHoveredBonus(-1);\r\n                                                        }}\r\n                                                    >\r\n                                                        {totalMessages[index + 1].text}\r\n                                                        <div>\r\n                                                            <div style={{ display: 'flex' }}>\r\n                                                                <div>{`Enable highlight`}</div>\r\n                                                                <input\r\n                                                                    aria-label='Enables highlighting of pets with this bonus'\r\n                                                                    type=\"checkbox\"\r\n                                                                    onChange={(e_inner) => {\r\n                                                                        setEnabledBonusHighlight({ ...enabledBonusHighlight, [totalMessages[index + 1].bonus]: e_inner.target.checked ? 1 : 0 })\r\n                                                                    }}\r\n                                                                    checked={enabledBonusHighlight[totalMessages[index + 1].bonus]}\r\n                                                                />\r\n                                                                <div\r\n                                                                    style={{\r\n                                                                        width: '24px',\r\n                                                                        background: helper.bonusColorMap[totalMessages[index + 1].bonus].color\r\n                                                                    }}\r\n                                                                />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div className='dmgBias'>\r\n\r\n                                                            {isNaN(secondDmgBias) && secondDmgBias}\r\n                                                        </div>\r\n                                                        {!!secondFailMsg &&\r\n                                                            <div\r\n                                                                style={{ color: 'red' }}>\r\n                                                                {secondFailMsg}\r\n                                                            </div>\r\n                                                        }\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Show Pet Whitelist */}\r\n                    {groupRankCritera === 1 && (\r\n                        <div\r\n                            style={{\r\n                                margin: '16px 6px',\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                flex: '1',\r\n                                border: '1px solid rgba(255,255,255,0.8)',\r\n                                backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                                // padding: '6px 6px 6px 6px'\r\n                            }}\r\n                        >\r\n                            <div style={{}}>\r\n                                <div>\r\n                                    <h4 style={{ margin: '6px', textAlign: 'center', fontSize: '20px' }}>Pet Whitelist</h4>\r\n                                    <h4 style={{ margin: '6px', textAlign: 'center', fontSize: '20px', color: 'red' }}>{`${whiteListAlertText}`}</h4>\r\n                                </div>\r\n                                {/* Pet whitelist stuff */}\r\n                                <div style={{ margin: '6px', display: 'flex', alignItems: 'center', justifyContent: 'space-between', height: '36px' }}>\r\n                                    <SearchBox data={{\r\n                                        list: filterablePets\r\n                                    }}\r\n                                        onSelect={(e) => {\r\n                                            setPetWhiteList((curr) => {\r\n                                                let temp = [...curr];\r\n                                                let petObj = data.PetsCollection.find((search_pet) => search_pet.ID === e.id);\r\n                                                temp.push({ ...e, placement: 'auto', parameters: { team: 0, damageBias: 17 }, pet: petObj });\r\n                                                return temp;\r\n                                            })\r\n                                            setRefreshGroups(true);\r\n                                        }}\r\n                                    />\r\n                                    <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }}>\r\n\r\n                                        <div\r\n                                            style={{ display: 'flex', justifyContent: 'space-between' }}\r\n                                        >\r\n                                            <div\r\n                                                style={{ marginRight: '6px' }}\r\n                                            >\r\n                                                Team Presets\r\n                                            </div>\r\n                                            <select\r\n                                                className='importantText'\r\n                                                style={{ maxWidth: '144px', backgroundColor: '#171717', borderRadius: '4px' }}\r\n                                                aria-label='Select your in game teams to quickly add those pets to whitelist'\r\n                                                onChange={\r\n                                                    (e) => {\r\n\r\n                                                        let selectedTeam = data.PetsLoadout[Number(e.target.value)];\r\n\r\n                                                        setPetWhiteList((curr) => {\r\n                                                            let temp = [...curr];\r\n                                                            // temp.push({ ...e, placement: 'blacklist', parameters: { team: 0, damageBias: 17 } });\r\n\r\n                                                            for (let x = 0; x < selectedTeam.IDs.length; x++) {\r\n                                                                let selected = selectedTeam.IDs[x];\r\n                                                                if (selected > 0) {\r\n                                                                    let base = {\r\n                                                                        id: selected,\r\n                                                                        label: petNames[selected].name,\r\n                                                                        // placement: 'rel',\r\n                                                                        placement: 'auto',\r\n                                                                        parameters: { team: 0, damageBias: 17 },\r\n                                                                        pet: data.PetsCollection.find((pet_search) => pet_search.ID === selected)\r\n                                                                    }\r\n                                                                    if (!temp.find((inner_find) => inner_find.id === base.id)) {\r\n                                                                        temp.push(base);\r\n                                                                    }\r\n                                                                }\r\n                                                            }\r\n                                                            return temp;\r\n                                                        })\r\n                                                        setRefreshGroups(true);\r\n                                                    }\r\n                                                }\r\n                                                value={''}\r\n                                            >\r\n                                                {\r\n                                                    [<option value='' key={'initial one'}>Select Team</option>, ...data.PetsLoadout.map((cur, index) => {\r\n\r\n                                                        if (cur.Locked === 0) return;\r\n\r\n                                                        return (\r\n                                                            <option\r\n                                                                key={index}\r\n                                                                value={index}\r\n\r\n                                                            >{cur.Name}</option>\r\n                                                        )\r\n                                                    })]\r\n                                                }\r\n                                            </select>\r\n                                        </div>\r\n                                        <div\r\n                                            style={{ display: 'flex', justifyContent: 'space-between' }}\r\n                                        >\r\n                                            <div\r\n                                                style={{ marginRight: '6px' }}\r\n                                            >\r\n                                                Recommended Teams\r\n                                            </div>\r\n                                            <select\r\n                                                aria-label='Select a default team preset'\r\n                                                className='importantText'\r\n                                                style={{ maxWidth: '144px', backgroundColor: '#171717', borderRadius: '4px', marginleft: '12px' }}\r\n                                                onChange={\r\n                                                    (selected_mode) => {\r\n                                                        setRecommendedSelected(true);\r\n                                                        let priorityList = {};\r\n                                                        let priorityMap = {};\r\n                                                        let petWhiteList = {};\r\n                                                        let presetPets = {};\r\n\r\n                                                        switch (selected_mode.target.value) {\r\n                                                            case 'Main Team':\r\n                                                                priorityList = JSON.parse(JSON.stringify(mainTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityList));\r\n                                                                priorityMap = JSON.parse(JSON.stringify(mainTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityMap));\r\n                                                                presetPets = mainTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList ? JSON.parse(JSON.stringify(mainTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList)) : {};\r\n                                                                break;\r\n                                                            case 'Reinc. Team':\r\n                                                                priorityList = JSON.parse(JSON.stringify(reincTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityList));\r\n                                                                priorityMap = JSON.parse(JSON.stringify(reincTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityMap));\r\n                                                                presetPets = reincTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList ? JSON.parse(JSON.stringify(reincTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList)) : {};\r\n                                                                break;\r\n                                                            case 'Gear Team':\r\n                                                                priorityList = JSON.parse(JSON.stringify(gearTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityList));\r\n                                                                priorityMap = JSON.parse(JSON.stringify(gearTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityMap));\r\n                                                                presetPets = gearTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList ? JSON.parse(JSON.stringify(gearTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList)) : {};\r\n                                                                break;\r\n                                                            case 'Stat Team':\r\n                                                                priorityList = JSON.parse(JSON.stringify(statTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityList));\r\n                                                                priorityMap = JSON.parse(JSON.stringify(statTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityMap));\r\n                                                                presetPets = statTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList ? JSON.parse(JSON.stringify(statTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList)) : {};\r\n                                                                break;\r\n                                                            case 'None':\r\n                                                                priorityList = [];\r\n                                                                priorityMap = {};\r\n                                                                break;\r\n                                                            default:\r\n\r\n                                                        }\r\n\r\n                                                        let petWhiteListNew = {};\r\n                                                        for (const [key, value] of Object.entries(presetPets)) {\r\n                                                            if (!unlockedPetsMap[key]) {\r\n                                                                petWhiteListNew[key] = { ID: key, name: petNames[key].name, mode: value.mode };\r\n                                                            }\r\n                                                            else {\r\n                                                                petWhiteListNew[key] = { ...unlockedPetsMap[key], mode: value.mode };\r\n                                                            }\r\n                                                        }\r\n                                                        petWhiteList = petWhiteListNew;\r\n                                                        let airPets, groundPets, currentBonuses, selectedPetMap;\r\n                                                        [airPets, groundPets, currentBonuses, selectedPetMap] = petHelper.findBestTeam(\r\n                                                            data,\r\n                                                            { manualEnabledPets: manualEnabledPets, priorityList: priorityList, priorityMap: priorityMap, petWhiteList: petWhiteList }\r\n                                                        );\r\n\r\n                                                        let combinedList = airPets.concat(groundPets);\r\n\r\n                                                        setPetWhiteList((curr) => {\r\n                                                            let temp = [...curr];\r\n\r\n                                                            for (let x = 0; x < combinedList.length; x++) {\r\n                                                                let selected = combinedList[x].ID;\r\n                                                                if (selected > 0) {\r\n                                                                    let base = {\r\n                                                                        id: selected,\r\n                                                                        label: petNames[selected].name,\r\n                                                                        // placement: 'rel',\r\n                                                                        placement: 'auto',\r\n                                                                        parameters: { team: 0, damageBias: 17 },\r\n                                                                        pet: data.PetsCollection.find((pet_search) => pet_search.ID === selected)\r\n                                                                    }\r\n                                                                    if (!temp.find((inner_find) => inner_find.id === base.id)) {\r\n                                                                        temp.push(base);\r\n                                                                    }\r\n                                                                }\r\n                                                            }\r\n                                                            return temp;\r\n                                                        })\r\n                                                        setRefreshGroups(true);\r\n                                                    }\r\n                                                }\r\n                                                defaultValue={' '}\r\n                                            // value={petWhiteList[e.ID].mode}\r\n                                            >\r\n                                                {!recommendedSelected && (<option value=\"None\">Select Preset</option>)}\r\n                                                <option value=\"Main Team\">Main Team</option>\r\n                                                <option value=\"Reinc. Team\">Reinc. Team</option>\r\n                                                <option value=\"Gear Team\">Gear Team</option>\r\n                                            </select>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className='importantText'\r\n                                style={{\r\n                                    width: '100%',\r\n                                    display: 'flex',\r\n                                    justifyContent: 'center',\r\n                                    fontWeight: 'bold',\r\n                                    color: numGround > maxType ? 'red' : ''\r\n                                }}\r\n                            >\r\n                                {`Ground Pets (${numGround}/${maxType})`}\r\n                            </div>\r\n\r\n                            {/* Pet white/black list */}\r\n                            <div\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    margin: '0 0 0 0',\r\n                                    borderTop: '1px solid rgba(255,255,255,0.8)',\r\n                                    borderBottom: '1px solid rgba(255,255,255,0.8)',\r\n                                    backgroundColor: 'rgba(255,255,255, 0.12)',\r\n                                }}\r\n                            >\r\n\r\n                                {/* Pet */}\r\n                                <div\r\n                                    style={{\r\n                                        // background: 'red',\r\n                                        width: '50%',\r\n                                        display: 'flex',\r\n                                        justifyContent: 'center',\r\n                                        alignItems: 'center',\r\n\r\n                                    }}\r\n                                >\r\n                                    Pet\r\n                                </div>\r\n\r\n                                {/* placement */}\r\n                                <div\r\n                                    style={{\r\n                                        // background: 'yellow',\r\n                                        width: '25%',\r\n                                        display: 'flex',\r\n                                        justifyContent: 'center',\r\n                                        alignItems: 'center',\r\n                                        borderRight: '1px solid rgba(255,255,255,0.8)',\r\n                                        borderLeft: '1px solid rgba(255,255,255,0.8)',\r\n                                    }}\r\n                                >\r\n                                    <MouseOverPopover tooltip={\r\n                                        <div style={{ padding: '6px' }}>\r\n                                            <div>\r\n                                                Determines the order in which the pets are slotted in:\r\n                                            </div>\r\n                                            <div>\r\n                                                Blacklist: Omits this pet from any group\r\n                                            </div>\r\n                                            <div>\r\n                                                Group: Forces the pet to go into a certain group\r\n                                            </div>\r\n                                            <div>\r\n                                                Auto:  Tries to find optimal placement automatically\r\n                                            </div>\r\n                                            {/* <div>\r\n                                                Relative: Tries to find optimal placement automatically based on `damage bias`\r\n                                            </div> */}\r\n                                        </div>\r\n                                    }>\r\n                                        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                            <div>\r\n                                                Placement\r\n                                            </div>\r\n                                            <div style={{ height: '18px', width: '18px', position: 'relative', marginLeft: '6px' }} >\r\n                                                <Image\r\n                                                    alt='on hover I in a cirlce icon, shows more information on hover'\r\n                                                    src={infoIcon}\r\n                                                    fill\r\n                                                />\r\n                                            </div>\r\n                                            {/* <img alt='on hover I in a cirlce icon, shows more information on hover' style={{ height: '16px', marginLeft: '6px' }} src={infoIcon} /> */}\r\n                                        </div>\r\n                                    </MouseOverPopover>\r\n\r\n                                </div>\r\n                                {/* Parameters */}\r\n                                <div\r\n                                    style={{\r\n                                        // background: 'blue',\r\n                                        width: '25%',\r\n                                        display: 'flex',\r\n                                        // boxShadow: `0 0 0 1px #ecf0f5`,\r\n                                        justifyContent: 'center',\r\n                                        alignItems: 'center',\r\n                                    }}\r\n                                >\r\n                                    <MouseOverPopover tooltip={\r\n                                        <div style={{ padding: '6px' }}>\r\n                                            <div>\r\n                                                <div>\r\n                                                    In Placement=Group, determines which group the pet is placed in\r\n                                                </div>\r\n                                                <div>\r\n                                                    In Placement=Auto, tried to find the optimal placement automatically\r\n                                                </div>\r\n                                                {/* <div>\r\n                                                    In Placement=Relative, determines which group the pet is placed in based on the bias number (higher means more damage necessary to placed in)\r\n                                                </div> */}\r\n                                            </div>\r\n                                        </div>\r\n                                    }>\r\n\r\n                                        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                            <div>\r\n                                                Parameters\r\n                                            </div>\r\n                                            <div style={{ height: '18px', width: '18px', position: 'relative', marginLeft: '6px' }} >\r\n                                                <Image\r\n                                                    alt='on hover I in a cirlce icon, shows more information on hover'\r\n                                                    src={infoIcon}\r\n                                                    fill\r\n                                                />\r\n                                            </div>\r\n                                            {/* <img alt='on hover I in a cirlce icon, shows more information on hover' style={{ height: '16px', marginLeft: '6px' }} src={infoIcon} /> */}\r\n                                        </div>\r\n                                    </MouseOverPopover>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div style={{\r\n                                margin: '0 0 0 0',\r\n                            }}>\r\n                                {petWhiteList.sort((a, b) => a.label.localeCompare(b.label)).map((pet, index) => {\r\n\r\n                                    if (pet.pet.Type === 2) return <></>;\r\n\r\n                                    let petLabel = pet.label;\r\n                                    let petGroup = ``\r\n                                    if (pet.id in relWhiteListMap) {\r\n                                        // petLabel += ` (Group: ${relWhiteListMap[pet.id].finalGroup + 1})`\r\n                                        petGroup += `(Group: ${relWhiteListMap[pet.id].finalGroup + 1})`\r\n                                    }\r\n\r\n                                    let showRed = false;//Too high\r\n                                    let showGreen = false;// Too low\r\n                                    let hoverMsg = ``;\r\n\r\n                                    //Check whether this pet is placed too low or too high\r\n                                    if (pet.placement !== `blacklist`) {\r\n\r\n                                        let group_index = groups.findIndex((temp_e) => {\r\n                                            return temp_e.find((temp_e2) => temp_e2.ID === pet.id)\r\n                                        });\r\n\r\n                                        if (group_index > -1) {\r\n\r\n                                            //Check if this pet got put in too high\r\n\r\n                                            let group = groups[group_index];\r\n\r\n                                            //Can only check if not on bottom\r\n                                            if (group_index !== (groups.length - 1)) {\r\n                                                //By default only need to check twice (2gnd or 2air)\r\n                                                const maxChecks = 2;\r\n                                                let originalGroupScore = petHelper.calculateGroupScore(group, defaultRank).groupScore;\r\n                                                let tempGroup = [];\r\n                                                let triedPets = {};\r\n\r\n                                                for (let i = 0; i < maxChecks; i++) {//\r\n                                                    let foundNew = false;\r\n\r\n                                                    for (let j = 0; j < groups[group_index + 1].length; j++) {\r\n\r\n                                                        let temp_pet = groups[group_index + 1][j];\r\n\r\n                                                        if (temp_pet.Type === pet.pet.Type) {\r\n\r\n                                                            if (!(temp_pet.ID in triedPets) && !foundNew) {\r\n                                                                triedPets[temp_pet.ID] = true;\r\n                                                                foundNew = true;\r\n                                                                tempGroup = [...group];\r\n                                                                let ind = tempGroup.findIndex((temp_repl) => temp_repl.ID === pet.pet.ID)\r\n                                                                tempGroup[ind] = temp_pet;\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n\r\n                                                    let newGroupScore = petHelper.calculateGroupScore(tempGroup, defaultRank).groupScore;\r\n\r\n                                                    if (newGroupScore > originalGroupScore) {\r\n                                                        showRed = true;\r\n                                                        hoverMsg = `${petLabel} might be too high, try ${pet.placement === 'rel' ? `increase` : `lowering`} the value to drop them to a lower team`\r\n                                                    }\r\n                                                    tempGroup = [];\r\n                                                }\r\n                                            }\r\n\r\n\r\n                                            //If they are not too high, check if they are too low (except for team 1)\r\n                                            if (!showRed && group_index > 0) {\r\n                                                //By default only need to check twice (2gnd or 2air)\r\n                                                const maxChecks = 2;\r\n                                                let originalGroupScore = petHelper.calculateGroupScore(groups[group_index - 1], defaultRank).groupScore;\r\n                                                let tempGroup = [];\r\n                                                let triedPets = {};\r\n\r\n                                                for (let i = 0; i < maxChecks; i++) {//\r\n                                                    let foundNew = false;\r\n\r\n                                                    for (let j = 0; j < groups[group_index - 1].length; j++) {\r\n\r\n                                                        let temp_pet = groups[group_index - 1][j];\r\n                                                        if (temp_pet.Type === pet.pet.Type) {\r\n                                                            if (!(temp_pet.ID in triedPets) && !foundNew) {\r\n                                                                triedPets[temp_pet.ID] = true;\r\n                                                                foundNew = true;\r\n                                                                tempGroup = [...groups[group_index - 1]];\r\n                                                                let ind = tempGroup.findIndex((temp_repl) => temp_repl.ID === temp_pet.ID)\r\n                                                                tempGroup[ind] = pet.pet;\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n\r\n                                                    let newGroupScore = petHelper.calculateGroupScore(tempGroup, defaultRank).groupScore;\r\n\r\n                                                    if (newGroupScore > originalGroupScore) {\r\n                                                        showGreen = true;\r\n                                                        hoverMsg = ` ${petLabel} might be too low, try ${pet.placement === 'rel' ? `lowering` : `increasing`} the value to bump them to a higher team`\r\n                                                    }\r\n                                                    tempGroup = [];\r\n                                                }\r\n                                            }\r\n\r\n                                        }\r\n                                        //Has a nan placement -> suggest decreasing the rel value\r\n                                        else {\r\n                                            hoverMsg = `Try lowering this value until ${petLabel} is put in`;\r\n                                            showGreen = true;\r\n                                        }\r\n\r\n                                    }\r\n\r\n                                    return (\r\n                                        <div\r\n                                            key={pet.label}\r\n                                            style={{\r\n                                                display: 'flex',\r\n                                                width: '100%',\r\n                                                height: '25px',\r\n                                                backgroundColor: (index % 2) === 0 ? 'rgba(255,255,255, 0.07)' : 'rgba(255,255,255, 0.005)',\r\n                                                color: numGround > maxType ? 'red' : ''\r\n                                            }}\r\n\r\n                                        >\r\n                                            {/* Pet name + delete */}\r\n                                            <div style={{\r\n                                                width: '50%',\r\n                                                display: 'flex',\r\n                                                alignItems: 'center',\r\n                                                justifyContent: 'center',\r\n                                                position: 'relative',\r\n                                                borderTop: index === 0 ? '' : '1px solid rgba(255,255,255,0.8)',\r\n                                            }}\r\n                                                onMouseEnter={() => {\r\n                                                    setActivePet(pet.id)\r\n                                                }}\r\n                                                onMouseLeave={() => {\r\n                                                    setActivePet(-1);\r\n                                                }}\r\n                                            >\r\n                                                <div\r\n                                                    style={{\r\n                                                        position: 'absolute',\r\n                                                        width: '100%',\r\n                                                        display: 'flex',\r\n                                                        justifyContent: 'space-between',\r\n                                                        zIndex: '1'\r\n                                                    }}\r\n\r\n                                                >\r\n                                                    <div\r\n                                                        style={{\r\n                                                            marginLeft: '6px'\r\n                                                        }}\r\n                                                    >\r\n                                                        {petLabel}\r\n                                                    </div>\r\n                                                    <div\r\n                                                        style={{\r\n                                                            marginRight: '34px'\r\n                                                        }}\r\n                                                    >\r\n                                                        {petGroup}\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <div\r\n                                                    style={{\r\n                                                        height: '12px', width: '12px',\r\n                                                        margin: '0 12px 0 auto',\r\n                                                        zIndex: '2',\r\n                                                        position: 'relative'\r\n                                                    }}\r\n                                                    onClick={(e) => {\r\n                                                        setPetWhiteList((curr) => {\r\n                                                            let temp = [...curr];\r\n                                                            temp = temp.filter((inner_pet) => {\r\n                                                                return inner_pet.id !== pet.id\r\n                                                            });\r\n                                                            return temp;\r\n                                                        })\r\n                                                        setRefreshGroups(true);\r\n                                                    }}\r\n                                                >\r\n                                                    <Image\r\n                                                        alt='X (cross to remove)'\r\n                                                        src={xIcon}\r\n                                                        fill\r\n                                                    />\r\n                                                </div>\r\n\r\n                                            </div>\r\n                                            {/* Pet Placement */}\r\n                                            <div style={{\r\n                                                width: '25%',\r\n                                                display: 'flex',\r\n                                                alignItems: 'center',\r\n                                                justifyContent: 'center',\r\n                                                borderRight: '1px solid rgba(255,255,255,0.8)',\r\n                                                borderLeft: '1px solid rgba(255,255,255,0.8)',\r\n                                                borderTop: index === 0 ? '' : '1px solid rgba(255,255,255,0.8)',\r\n\r\n                                            }}>\r\n\r\n                                                <select\r\n                                                    className='importantText'\r\n                                                    style={{ maxWidth: '144px', backgroundColor: (index % 2) === 0 ? '#252525' : '#171717', borderRadius: '4px' }}\r\n                                                    aria-label='Select what kind of placement the pet will have'\r\n                                                    value={pet.placement}\r\n                                                    onChange={\r\n                                                        (choice) => {\r\n                                                            console.log(choice);\r\n                                                            setPetWhiteList((curr) => {\r\n                                                                let temp = [...curr];\r\n                                                                let tempPet = temp.find((inner_pet) => inner_pet.id === pet.id);\r\n                                                                tempPet.placement = choice.target.value;\r\n                                                                return temp;\r\n                                                            })\r\n                                                            setRefreshGroups(true);\r\n                                                        }\r\n                                                    }\r\n                                                >\r\n                                                    <option value={'blacklist'}>Blacklist</option>\r\n                                                    <option value={'team'}>Group</option>\r\n                                                    <option value={`auto`}>Auto</option>\r\n                                                    {/* <option value={`rel`}>Relative</option> */}\r\n                                                </select>\r\n\r\n                                            </div>\r\n                                            {/* parameters */}\r\n                                            <div\r\n                                                disabled={pet.placement === 'blacklist'}\r\n                                                style={{\r\n                                                    width: '25%',\r\n                                                    position: 'relative',\r\n                                                    opacity: pet.placement === 'blacklist' ? '0.4' : '',\r\n                                                    display: 'flex',\r\n                                                    justifyContent: 'center',\r\n                                                    alignItems: 'center',\r\n                                                    borderTop: index === 0 ? '' : '1px solid rgba(255,255,255,0.8)',\r\n                                                }}\r\n                                            >\r\n                                                {pet.placement === 'team' && (\r\n                                                    <div style={{ marginLeft: (showGreen || showRed) ? '22px' : '' }}>\r\n                                                        <select\r\n                                                            className='importantText'\r\n                                                            style={{ maxWidth: '144px', backgroundColor: (index % 2) === 0 ? '#252525' : '#171717', borderRadius: '4px', width: '44px' }}\r\n                                                            aria-label='Select what team the pet will be placed in'\r\n                                                            value={pet.parameters.team}\r\n                                                            onChange={\r\n                                                                (choice) => {\r\n                                                                    setPetWhiteList((curr) => {\r\n                                                                        let temp = [...curr];\r\n                                                                        let tempPet = temp.find((inner_pet) => inner_pet.id === pet.id);\r\n                                                                        tempPet.parameters.team = Number(choice.target.value);\r\n                                                                        return temp;\r\n                                                                    })\r\n                                                                    setRefreshGroups(true);\r\n                                                                }\r\n                                                            }\r\n                                                        >\r\n                                                            {Array.apply(null, Array(Number(numTeams)))\r\n                                                                .map((e, index) => {\r\n                                                                    return <option value={index} key={index}>{index + 1}</option>\r\n                                                                })}\r\n\r\n\r\n                                                        </select>\r\n\r\n                                                    </div>\r\n                                                )}\r\n                                                {pet.placement === `rel` && (\r\n                                                    <div style={{ marginLeft: (showGreen || showRed) ? '22px' : '' }}>\r\n                                                        <input\r\n                                                            className='importantText textMedium2'\r\n                                                            aria-label='Damage bias to control when the pet should go in'\r\n                                                            style={{\r\n                                                                maxWidth: '36px',\r\n                                                                backgroundColor: '#1b1b1b',\r\n                                                                borderRadius: '4px',\r\n                                                                backgroundColor: (index % 2) === 0 ? '#252525' : '#171717',\r\n                                                            }}\r\n                                                            type='number'\r\n                                                            // className='prepNumber'\r\n                                                            value={pet.parameters.damageBias}\r\n                                                            onChange={\r\n                                                                (e) => {\r\n                                                                    try {\r\n                                                                        let x = Number(e.target.value);\r\n                                                                        x = Math.floor(x);\r\n                                                                        if (x < 0 || x > 100) {\r\n                                                                            return;\r\n                                                                        }\r\n\r\n                                                                        setPetWhiteList((curr) => {\r\n                                                                            let temp = [...curr];\r\n                                                                            let tempPet = temp.find((inner_pet) => inner_pet.id === pet.id);\r\n                                                                            tempPet.parameters.damageBias = Number(x);\r\n                                                                            return temp;\r\n                                                                        })\r\n                                                                        setRefreshGroups(true);\r\n                                                                    }\r\n                                                                    catch (err) {\r\n                                                                        console.log(err);\r\n                                                                    }\r\n                                                                }}\r\n                                                            placeholder={pet.parameters.damageBias + ''}\r\n                                                            min=\"0\"\r\n                                                            max=\"100\"\r\n                                                        />\r\n                                                    </div>\r\n                                                )}\r\n                                                {(pet.placement === 'blacklist' || pet.placement === 'auto') && (\r\n                                                    <>Unavailable</>\r\n                                                )}\r\n                                                {(showGreen || showRed) && (\r\n                                                    <div\r\n                                                    // style={{ position: 'absolute', right: '5%' }}\r\n                                                    >\r\n                                                        <MouseOverPopover muiHeight={'20px'} tooltip={<div>{hoverMsg}</div>} style={{ display: 'flex', alignItems: 'center', height: '20px' }}>\r\n\r\n                                                            <div style={{ height: '20px', width: '20px', marginLeft: '3px', marginTop: '2px', position: 'relative' }}>\r\n                                                                <Image\r\n                                                                    alt='on hover I in a cirlce icon, shows more information on hover'\r\n                                                                    src={showGreen ? infoIconGreenThick : infoIconRedThick}\r\n                                                                    fill\r\n                                                                />\r\n                                                            </div>\r\n\r\n\r\n                                                            {/* <img alt='on hover I in a cirlce icon, shows more information on hover'\r\n                                                                style={{ height: '18px', marginLeft: '6px', marginTop: '2px' }}\r\n                                                                src={showGreen ? infoIconGreen : infoIconRed} /> */}\r\n                                                        </MouseOverPopover>\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n\r\n\r\n                            <div className='importantText'\r\n                                style={{\r\n                                    width: '100%',\r\n                                    display: 'flex',\r\n                                    justifyContent: 'center',\r\n                                    fontWeight: 'bold',\r\n                                    borderTop: '1px solid rgba(255,255,255,0.8)',\r\n                                    paddingTop: '6px',\r\n                                    paddingBottom: '6px',\r\n                                    color: numAir > maxType ? 'red' : ''\r\n                                    // marginTop: '6px'\r\n                                }}\r\n                            >\r\n                                {`Air Pets (${numAir}/${maxType})`}\r\n                            </div>\r\n\r\n                            {/* Pet white/black list */}\r\n                            <div\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    margin: '0 0 0 0',\r\n                                    borderTop: '1px solid rgba(255,255,255,0.8)',\r\n                                    borderBottom: '1px solid rgba(255,255,255,0.8)',\r\n                                    backgroundColor: 'rgba(255,255,255, 0.12)',\r\n                                }}\r\n                            >\r\n\r\n                                {/* Pet */}\r\n                                <div\r\n                                    style={{\r\n                                        // background: 'red',\r\n                                        width: '50%',\r\n                                        display: 'flex',\r\n                                        justifyContent: 'center',\r\n                                        alignItems: 'center',\r\n\r\n                                    }}\r\n                                >\r\n                                    Pet\r\n                                </div>\r\n\r\n                                {/* placement */}\r\n                                <div\r\n                                    style={{\r\n                                        // background: 'yellow',\r\n                                        width: '25%',\r\n                                        display: 'flex',\r\n                                        justifyContent: 'center',\r\n                                        alignItems: 'center',\r\n                                        borderRight: '1px solid rgba(255,255,255,0.8)',\r\n                                        borderLeft: '1px solid rgba(255,255,255,0.8)',\r\n                                    }}\r\n                                >\r\n                                    <MouseOverPopover tooltip={\r\n                                        <div style={{ padding: '6px' }}>\r\n                                            <div>\r\n                                                Determines the order in which the pets are slotted in:\r\n                                            </div>\r\n                                            <div>\r\n                                                Blacklist: Omits this pet from any group\r\n                                            </div>\r\n                                            <div>\r\n                                                Group: Forces the pet to go into a certain group\r\n                                            </div>\r\n                                            <div>\r\n                                                Auto:  Tries to find optimal placement automatically\r\n                                            </div>\r\n                                            {/* <div>\r\n                                                Relative: Tries to find optimal placement automatically based on `damage bias`\r\n                                            </div> */}\r\n                                        </div>\r\n                                    }>\r\n                                        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                            <div>\r\n                                                Placement\r\n                                            </div>\r\n                                            <div style={{ height: '18px', width: '18px', position: 'relative', marginLeft: '6px' }} >\r\n                                                <Image\r\n                                                    alt='on hover I in a cirlce icon, shows more information on hover'\r\n                                                    src={infoIcon}\r\n                                                    fill\r\n                                                />\r\n                                            </div>\r\n                                            {/* <img alt='on hover I in a cirlce icon, shows more information on hover' style={{ height: '16px', marginLeft: '6px' }} src={infoIcon} /> */}\r\n                                        </div>\r\n                                    </MouseOverPopover>\r\n\r\n                                </div>\r\n                                {/* Parameters */}\r\n                                <div\r\n                                    style={{\r\n                                        // background: 'blue',\r\n                                        width: '25%',\r\n                                        display: 'flex',\r\n                                        // boxShadow: `0 0 0 1px #ecf0f5`,\r\n                                        justifyContent: 'center',\r\n                                        alignItems: 'center',\r\n                                    }}\r\n                                >\r\n                                    <MouseOverPopover tooltip={\r\n                                        <div style={{ padding: '6px' }}>\r\n                                            <div>\r\n                                                <div>\r\n                                                    In Placement=Group, determines which group the pet is placed in\r\n                                                </div>\r\n                                                <div>\r\n                                                    In Placement=Auto, tried to find the optimal placement automatically\r\n                                                </div>\r\n                                                {/* <div>\r\n                                                    In Placement=Relative, determines which group the pet is placed in based on the bias number (higher means more damage necessary to placed in)\r\n                                                </div> */}\r\n                                            </div>\r\n                                        </div>\r\n                                    }>\r\n\r\n                                        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                            <div>\r\n                                                Parameters\r\n                                            </div>\r\n                                            <div style={{ height: '18px', width: '18px', position: 'relative', marginLeft: '6px' }} >\r\n                                                <Image\r\n                                                    alt='on hover I in a cirlce icon, shows more information on hover'\r\n                                                    src={infoIcon}\r\n                                                    fill\r\n                                                />\r\n                                            </div>\r\n                                            {/* <img alt='on hover I in a cirlce icon, shows more information on hover' style={{ height: '16px', marginLeft: '6px' }} src={infoIcon} /> */}\r\n                                        </div>\r\n                                    </MouseOverPopover>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div style={{\r\n                                margin: '0 0 0 0',\r\n                            }}>\r\n                                {petWhiteList.sort((a, b) => a.label.localeCompare(b.label)).map((pet, index) => {\r\n\r\n                                    if (pet.pet.Type === 1) return <></>;\r\n\r\n                                    let petLabel = pet.label;\r\n                                    let petGroup = ``\r\n                                    if (pet.id in relWhiteListMap) {\r\n                                        // petLabel += ` (Group: ${relWhiteListMap[pet.id].finalGroup + 1})`\r\n                                        petGroup += `(Group: ${relWhiteListMap[pet.id].finalGroup + 1})`\r\n                                    }\r\n\r\n                                    let showRed = false;//Too high\r\n                                    let showGreen = false;// Too low\r\n                                    let hoverMsg = ``;\r\n\r\n                                    //Check whether this pet is placed too low or too high\r\n                                    if (pet.placement !== `blacklist`) {\r\n\r\n                                        let group_index = groups.findIndex((temp_e) => {\r\n                                            return temp_e.find((temp_e2) => temp_e2.ID === pet.id)\r\n                                        });\r\n\r\n                                        if (group_index > -1) {\r\n\r\n                                            //Check if this pet got put in too high\r\n\r\n                                            let group = groups[group_index];\r\n\r\n                                            //Can only check if not on bottom\r\n                                            if (group_index !== (groups.length - 1)) {\r\n                                                //By default only need to check twice (2gnd or 2air)\r\n                                                const maxChecks = 2;\r\n                                                let originalGroupScore = petHelper.calculateGroupScore(group, defaultRank).groupScore;\r\n                                                let tempGroup = [];\r\n                                                let triedPets = {};\r\n\r\n                                                for (let i = 0; i < maxChecks; i++) {//\r\n                                                    let foundNew = false;\r\n\r\n                                                    for (let j = 0; j < groups[group_index + 1].length; j++) {\r\n\r\n                                                        let temp_pet = groups[group_index + 1][j];\r\n\r\n                                                        if (temp_pet.Type === pet.pet.Type) {\r\n\r\n                                                            if (!(temp_pet.ID in triedPets) && !foundNew) {\r\n                                                                triedPets[temp_pet.ID] = true;\r\n                                                                foundNew = true;\r\n                                                                tempGroup = [...group];\r\n                                                                let ind = tempGroup.findIndex((temp_repl) => temp_repl.ID === pet.pet.ID)\r\n                                                                tempGroup[ind] = temp_pet;\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n\r\n                                                    let newGroupScore = petHelper.calculateGroupScore(tempGroup, defaultRank).groupScore;\r\n\r\n                                                    if (newGroupScore > originalGroupScore) {\r\n                                                        showRed = true;\r\n                                                        hoverMsg = `${petLabel} might be too high, try ${pet.placement === 'rel' ? `increase` : `lowering`} the value to drop them to a lower team`\r\n                                                    }\r\n                                                    tempGroup = [];\r\n                                                }\r\n                                            }\r\n\r\n\r\n                                            //If they are not too high, check if they are too low (except for team 1)\r\n                                            if (!showRed && group_index > 0) {\r\n                                                //By default only need to check twice (2gnd or 2air)\r\n                                                const maxChecks = 2;\r\n                                                let originalGroupScore = petHelper.calculateGroupScore(groups[group_index - 1], defaultRank).groupScore;\r\n                                                let tempGroup = [];\r\n                                                let triedPets = {};\r\n\r\n                                                for (let i = 0; i < maxChecks; i++) {//\r\n                                                    let foundNew = false;\r\n\r\n                                                    for (let j = 0; j < groups[group_index - 1].length; j++) {\r\n\r\n                                                        let temp_pet = groups[group_index - 1][j];\r\n                                                        if (temp_pet.Type === pet.pet.Type) {\r\n                                                            if (!(temp_pet.ID in triedPets) && !foundNew) {\r\n                                                                triedPets[temp_pet.ID] = true;\r\n                                                                foundNew = true;\r\n                                                                tempGroup = [...groups[group_index - 1]];\r\n                                                                let ind = tempGroup.findIndex((temp_repl) => temp_repl.ID === temp_pet.ID)\r\n                                                                tempGroup[ind] = pet.pet;\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n\r\n                                                    let newGroupScore = petHelper.calculateGroupScore(tempGroup, defaultRank).groupScore;\r\n\r\n                                                    if (newGroupScore > originalGroupScore) {\r\n                                                        showGreen = true;\r\n                                                        hoverMsg = ` ${petLabel} might be too low, try ${pet.placement === 'rel' ? `lowering` : `increasing`} the value to bump them to a higher team`\r\n                                                    }\r\n                                                    tempGroup = [];\r\n                                                }\r\n                                            }\r\n\r\n                                        }\r\n                                        //Has a nan placement -> suggest decreasing the rel value\r\n                                        else {\r\n                                            hoverMsg = `Try lowering this value until ${petLabel} is put in`;\r\n                                            showGreen = true;\r\n                                        }\r\n\r\n                                    }\r\n\r\n                                    return (\r\n                                        <div\r\n                                            key={pet.label}\r\n                                            style={{\r\n                                                display: 'flex',\r\n                                                width: '100%',\r\n                                                height: '25px',\r\n                                                backgroundColor: (index % 2) === 0 ? 'rgba(255,255,255, 0.07)' : 'rgba(255,255,255, 0.005)',\r\n                                                color: numAir > maxType ? 'red' : ''\r\n                                            }}\r\n\r\n                                        >\r\n                                            {/* Pet name + delete */}\r\n                                            <div style={{\r\n                                                width: '50%',\r\n                                                display: 'flex',\r\n                                                alignItems: 'center',\r\n                                                justifyContent: 'center',\r\n                                                position: 'relative',\r\n                                                borderTop: index === 0 ? '' : '1px solid rgba(255,255,255,0.8)',\r\n                                            }}\r\n                                                onMouseEnter={() => {\r\n                                                    setActivePet(pet.id)\r\n                                                }}\r\n                                                onMouseLeave={() => {\r\n                                                    setActivePet(-1);\r\n                                                }}\r\n                                            >\r\n                                                <div\r\n                                                    style={{\r\n                                                        position: 'absolute',\r\n                                                        width: '100%',\r\n                                                        display: 'flex',\r\n                                                        justifyContent: 'space-between',\r\n                                                        zIndex: '1'\r\n                                                    }}\r\n\r\n                                                >\r\n                                                    <div\r\n                                                        style={{\r\n                                                            marginLeft: '6px'\r\n                                                        }}\r\n                                                    >\r\n                                                        {petLabel}\r\n                                                    </div>\r\n                                                    <div\r\n                                                        style={{\r\n                                                            marginRight: '34px'\r\n                                                        }}\r\n                                                    >\r\n                                                        {petGroup}\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <div\r\n                                                    style={{\r\n                                                        height: '12px', width: '12px',\r\n                                                        margin: '0 12px 0 auto',\r\n                                                        zIndex: '2',\r\n                                                        position: 'relative'\r\n                                                    }}\r\n                                                    onClick={(e) => {\r\n                                                        setPetWhiteList((curr) => {\r\n                                                            let temp = [...curr];\r\n                                                            temp = temp.filter((inner_pet) => {\r\n                                                                return inner_pet.id !== pet.id\r\n                                                            });\r\n                                                            return temp;\r\n                                                        })\r\n                                                        setRefreshGroups(true);\r\n                                                    }}\r\n                                                >\r\n                                                    <Image\r\n                                                        alt='X (cross to remove)'\r\n                                                        src={xIcon}\r\n                                                        fill\r\n                                                    />\r\n                                                </div>\r\n\r\n                                            </div>\r\n                                            {/* Pet Placement */}\r\n                                            <div style={{\r\n                                                width: '25%',\r\n                                                display: 'flex',\r\n                                                alignItems: 'center',\r\n                                                justifyContent: 'center',\r\n                                                borderRight: '1px solid rgba(255,255,255,0.8)',\r\n                                                borderLeft: '1px solid rgba(255,255,255,0.8)',\r\n                                                borderTop: index === 0 ? '' : '1px solid rgba(255,255,255,0.8)',\r\n\r\n                                            }}>\r\n\r\n                                                <select\r\n                                                    className='importantText'\r\n                                                    style={{ maxWidth: '144px', backgroundColor: (index % 2) === 0 ? '#252525' : '#171717', borderRadius: '4px' }}\r\n                                                    aria-label='Select what kind of placement the pet will have'\r\n                                                    value={pet.placement}\r\n                                                    onChange={\r\n                                                        (choice) => {\r\n                                                            console.log(choice);\r\n                                                            setPetWhiteList((curr) => {\r\n                                                                let temp = [...curr];\r\n                                                                let tempPet = temp.find((inner_pet) => inner_pet.id === pet.id);\r\n                                                                tempPet.placement = choice.target.value;\r\n                                                                return temp;\r\n                                                            })\r\n                                                            setRefreshGroups(true);\r\n                                                        }\r\n                                                    }\r\n                                                >\r\n                                                    <option value={'blacklist'}>Blacklist</option>\r\n                                                    <option value={'team'}>Group</option>\r\n                                                    <option value={`auto`}>Auto</option>\r\n                                                    {/* <option value={`rel`}>Relative</option> */}\r\n                                                </select>\r\n\r\n                                            </div>\r\n                                            {/* parameters */}\r\n                                            <div\r\n                                                disabled={pet.placement === 'blacklist'}\r\n                                                style={{\r\n                                                    width: '25%',\r\n                                                    position: 'relative',\r\n                                                    opacity: pet.placement === 'blacklist' ? '0.4' : '',\r\n                                                    display: 'flex',\r\n                                                    justifyContent: 'center',\r\n                                                    alignItems: 'center',\r\n                                                    borderTop: index === 0 ? '' : '1px solid rgba(255,255,255,0.8)'\r\n                                                }}\r\n                                            >\r\n                                                {pet.placement === 'team' && (\r\n                                                    <div style={{ marginLeft: (showGreen || showRed) ? '22px' : '' }}>\r\n                                                        <select\r\n                                                            className='importantText'\r\n                                                            style={{ maxWidth: '144px', backgroundColor: (index % 2) === 0 ? '#252525' : '#171717', borderRadius: '4px', width: '44px' }}\r\n                                                            aria-label='Select what team the pet will be placed in'\r\n                                                            value={pet.parameters.team}\r\n                                                            onChange={\r\n                                                                (choice) => {\r\n                                                                    setPetWhiteList((curr) => {\r\n                                                                        let temp = [...curr];\r\n                                                                        let tempPet = temp.find((inner_pet) => inner_pet.id === pet.id);\r\n                                                                        tempPet.parameters.team = Number(choice.target.value);\r\n                                                                        return temp;\r\n                                                                    })\r\n                                                                    setRefreshGroups(true);\r\n                                                                }\r\n                                                            }\r\n                                                        >\r\n                                                            {Array.apply(null, Array(Number(numTeams)))\r\n                                                                .map((e, index) => {\r\n                                                                    return <option value={index} key={index}>{index + 1}</option>\r\n                                                                })}\r\n\r\n\r\n                                                        </select>\r\n\r\n                                                    </div>\r\n                                                )}\r\n                                                {pet.placement === `rel` && (\r\n                                                    <div style={{ marginLeft: (showGreen || showRed) ? '22px' : '' }}>\r\n                                                        <input\r\n                                                            className='importantText textMedium2'\r\n                                                            aria-label='Damage bias to control when the pet should go in'\r\n                                                            style={{ maxWidth: '36px', backgroundColor: '#1b1b1b', borderRadius: '4px', backgroundColor: (index % 2) === 0 ? '#252525' : '#171717', }}\r\n                                                            type='number'\r\n                                                            // className='prepNumber'\r\n                                                            value={pet.parameters.damageBias}\r\n                                                            onChange={\r\n                                                                (e) => {\r\n                                                                    try {\r\n                                                                        let x = Number(e.target.value);\r\n                                                                        x = Math.floor(x);\r\n                                                                        if (x < 0 || x > 100) {\r\n                                                                            return;\r\n                                                                        }\r\n\r\n                                                                        setPetWhiteList((curr) => {\r\n                                                                            let temp = [...curr];\r\n                                                                            let tempPet = temp.find((inner_pet) => inner_pet.id === pet.id);\r\n                                                                            tempPet.parameters.damageBias = Number(x);\r\n                                                                            return temp;\r\n                                                                        })\r\n                                                                        setRefreshGroups(true);\r\n                                                                    }\r\n                                                                    catch (err) {\r\n                                                                        console.log(err);\r\n                                                                    }\r\n                                                                }}\r\n                                                            placeholder={pet.parameters.damageBias + ''}\r\n                                                            min=\"0\"\r\n                                                            max=\"100\"\r\n                                                        />\r\n                                                    </div>\r\n                                                )}\r\n                                                {(pet.placement === 'blacklist' || pet.placement === 'auto') && (\r\n                                                    <>Unavailable</>\r\n                                                )}\r\n                                                {(showGreen || showRed) && (\r\n                                                    <div\r\n                                                    // style={{ position: 'absolute', right: '5%' }}\r\n                                                    >\r\n                                                        <MouseOverPopover muiHeight={'20px'} tooltip={<div>{hoverMsg}</div>} style={{ display: 'flex', alignItems: 'center', height: '20px' }}>\r\n\r\n                                                            <div style={{ height: '20px', width: '20px', marginLeft: '3px', marginTop: '2px', position: 'relative' }}>\r\n                                                                <Image\r\n                                                                    alt='on hover I in a cirlce icon, shows more information on hover'\r\n                                                                    src={showGreen ? infoIconGreenThick : infoIconRedThick}\r\n                                                                    fill\r\n                                                                />\r\n                                                            </div>\r\n\r\n\r\n                                                            {/* <img alt='on hover I in a cirlce icon, shows more information on hover'\r\n                                                                style={{ height: '18px', marginLeft: '6px', marginTop: '2px' }}\r\n                                                                src={showGreen ? infoIconGreen : infoIconRed} /> */}\r\n                                                        </MouseOverPopover>\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n\r\n\r\n\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Left Over Pets*/}\r\n                    {groupRankCritera === 1 && (\r\n                        <div\r\n                            style={{\r\n                                margin: '12px 6px',\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                flex: '1',\r\n                                border: '1px solid rgba(255,255,255,0.8)',\r\n                            }}\r\n                        >\r\n                            {/* Alerting overall impossible filters combinations */}\r\n                            {failedFilters['generic'] && (\r\n                                <div\r\n                                    style={{ fontWeight: 'bold', color: 'red', display: 'flex', width: '100%', justifyContent: 'center' }}\r\n\r\n                                >\r\n                                    {failedFilters['generic']}\r\n                                </div>\r\n                            )}\r\n\r\n                            {/* left over pets */}\r\n                            {(\r\n                                <div\r\n                                    style={{ display: 'flex', width: '100%', flexDirection: 'column', }}\r\n                                >\r\n                                    {/* Title */}\r\n                                    <div\r\n                                        style={{ display: 'flex', margin: '6px', alignSelf: 'center' }}\r\n                                    >\r\n                                        <h4 style={{ margin: '0', fontSize: '20px', textAlign: 'center', display: 'flex', alignItems: 'center' }}>\r\n                                            <div>\r\n                                                {`Pet Bonus Finder`}\r\n                                            </div>\r\n                                            <div style={{ fontSize: '16px', fontWeight: 'normal', color: numGround >= maxType ? 'red' : '', marginLeft: \"6px\" }}>\r\n                                                {`(${numGround} / ${maxType} Ground)`}\r\n                                            </div>\r\n                                            <div style={{ marginLeft: '6px', fontSize: '16px', fontWeight: 'normal', }}>\r\n                                                {`&`}\r\n                                            </div>\r\n                                            <div style={{ fontSize: '16px', fontWeight: 'normal', color: numAir >= maxType ? 'red' : '', marginLeft: \"6px\" }}>\r\n                                                {`(${numAir} / ${maxType} Air) `}\r\n                                            </div>\r\n                                        </h4>\r\n\r\n                                    </div>\r\n\r\n                                    {/* Table */}\r\n                                    <div\r\n                                        style={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'center',\r\n                                            margin: '6px 0 0 0',\r\n                                            // paddingLeft: '6px'\r\n                                        }}\r\n                                    >\r\n                                        <div style={{ marginLeft: '6px' }}>\r\n\r\n                                            <SearchBox\r\n                                                updateBox={true}\r\n                                                placeholder='Enter a bonus'\r\n                                                data={{\r\n                                                    list: filterableBonuses\r\n                                                }}\r\n                                                onSelect={(e) => {\r\n                                                    console.log(e);\r\n                                                    setLeftOverBonus1(Number(e.id));\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Headers */}\r\n                                    <div\r\n                                        style={{\r\n                                            display: 'flex',\r\n                                            borderTop: '1px solid rgba(255,255,255,0.8)',\r\n                                            borderBottom: '1px solid rgba(255,255,255,0.8)',\r\n                                            backgroundColor: 'rgba(255,255,255, 0.14)',\r\n                                            margin: '6px 0 0 0'\r\n                                        }}\r\n                                    >\r\n                                        <div\r\n                                            style={{\r\n                                                width: '70%',\r\n                                                display: 'flex',\r\n                                                justifyContent: 'center',\r\n                                                alignItems: 'center',\r\n                                                borderRight: '1px solid rgba(255,255,255,0.8)',\r\n                                            }}\r\n                                        >\r\n                                            {`${BonusMap[leftOverBonus1].label} Pets`}\r\n                                        </div>\r\n\r\n                                        {/* placement */}\r\n                                        <div\r\n                                            style={{\r\n                                                width: '30%',\r\n                                                display: 'flex',\r\n                                                justifyContent: 'center',\r\n                                                alignItems: 'center'\r\n                                            }}\r\n                                        >\r\n                                            <MouseOverPopover tooltip={\r\n                                                <div style={{ padding: '6px' }}>\r\n                                                    <div>The {`pet's`} damage </div>\r\n                                                </div>\r\n                                            }>\r\n                                                <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                                    <div>\r\n                                                        Damage\r\n                                                    </div>\r\n                                                </div>\r\n                                            </MouseOverPopover>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                    {/* Pets */}\r\n                                    <div style={{ margin: '0 0px 0 0px', }}>\r\n                                        {leftOver1Pets.map((pet, index) => {\r\n                                            let staticPetData = petNameArray.find(staticPetDatum => staticPetDatum.petId === pet.ID)\r\n\r\n                                            if (!staticPetData) {\r\n                                                staticPetData = {\r\n                                                    img: '/images/pets/missing.png',\r\n                                                    location: '??-??',\r\n                                                    name: 'Unknown',\r\n                                                    petId: pet.ID\r\n                                                }\r\n                                            }\r\n                                            return (\r\n                                                <div\r\n                                                    key={pet.ID}\r\n                                                    style={{\r\n                                                        display: 'flex',\r\n                                                        width: '100%',\r\n                                                        backgroundColor: (index % 2) === 0 ? 'rgba(255,255,255, 0.09)' : 'rgba(255,255,255, 0.03)',\r\n                                                    }}\r\n                                                >\r\n                                                    {/* Pet name + pin */}\r\n                                                    <div style={{\r\n                                                        width: '70%',\r\n                                                        display: 'flex',\r\n                                                        alignItems: 'center',\r\n                                                        justifyContent: 'center',\r\n                                                        position: 'relative',\r\n                                                    }}\r\n                                                    >\r\n                                                        <div\r\n                                                            style={{\r\n                                                                // position: 'absolute',\r\n                                                                width: '100%',\r\n                                                                display: 'flex',\r\n                                                                flex: '1',\r\n                                                                justifyContent: 'space-between',\r\n                                                                // alignContent: 'space-between',\r\n                                                                // zIndex: '-1'\r\n                                                            }}\r\n\r\n                                                        >\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    width: '100%',\r\n                                                                    borderTop: index === 0 ? '' : '1px solid rgba(255,255,255,0.8)',\r\n                                                                    paddingLeft: '6px',\r\n\r\n                                                                }}\r\n                                                            >\r\n                                                                {/* {petNames[pet.ID].name} */}\r\n                                                                <PetItemCoin\r\n                                                                    showNameOnly={true}\r\n                                                                    grayBackground={pet.equipped}\r\n                                                                    key={pet.ID}\r\n                                                                    petData={staticPetData}\r\n                                                                    fullPetData={pet}\r\n                                                                    data={data}\r\n                                                                    onClick={() => { }}\r\n                                                                    weightMap={weightMap}\r\n                                                                    defaultRank={defaultRank}\r\n                                                                />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        {/* Pin icon */}\r\n                                                        {!pet.whitelisted && (\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    height: 'calc(100% - 1px)',\r\n                                                                    width: '24px',\r\n                                                                    display: 'flex',\r\n                                                                    alignItems: 'center',\r\n                                                                    justifyContent: 'center',\r\n                                                                    borderTop: index === 0 ? '' : '1px solid rgba(255,255,255,0.8)',\r\n\r\n                                                                }}\r\n                                                            >\r\n                                                                <div style={{\r\n                                                                    position: 'relative',\r\n                                                                    width: '20px', height: '20px'\r\n                                                                }}\r\n                                                                    onClick={(e) => {\r\n                                                                        setPetWhiteList((curr) => {\r\n                                                                            let temp = [...curr];\r\n\r\n                                                                            let pet_inner = temp.find((sample_pet) => sample_pet.id === pet.ID);\r\n                                                                            if (!pet_inner) {\r\n                                                                                temp.push({ label: petNames[pet.ID].name, pet: pet, id: pet.ID, placement: 'auto', parameters: { team: 0, damageBias: 17 } });\r\n                                                                            }\r\n                                                                            else {\r\n                                                                                throw new Error(`should not have an existing pet in this list!`)\r\n                                                                            }\r\n                                                                            return temp;\r\n                                                                        })\r\n\r\n                                                                        setRefreshGroups(true);\r\n                                                                        return;\r\n\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <Image\r\n                                                                        fill\r\n                                                                        src={pinIcon}\r\n                                                                        alt='push pin'\r\n                                                                    />\r\n                                                                </div>\r\n                                                                {/* <img alt='push pin'\r\n                                                                    style={{\r\n                                                                        maxHeight: '12px',\r\n                                                                    }}\r\n                                                                    onClick={(e) => {\r\n                                                                        setPetWhiteList((curr) => {\r\n                                                                            let temp = [...curr];\r\n\r\n                                                                            let pet_inner = temp.find((sample_pet) => sample_pet.id === pet.ID);\r\n                                                                            if (!pet_inner) {\r\n                                                                                temp.push({ label: petNames[pet.ID].name, id: pet.ID, placement: 'rel', parameters: { team: 0, damageBias: 17 } });\r\n                                                                            }\r\n                                                                            else {\r\n                                                                                throw new Error(`should not have an existing pet in this list!`)\r\n                                                                            }\r\n                                                                            return temp;\r\n                                                                        })\r\n\r\n                                                                        setRefreshGroups(true);\r\n                                                                        return;\r\n\r\n                                                                    }}\r\n                                                                    src={pinIcon}\r\n                                                                /> */}\r\n                                                            </div>\r\n                                                        )}\r\n\r\n                                                    </div>\r\n                                                    {/* Pet Damage */}\r\n                                                    <div style={{\r\n                                                        width: '30%',\r\n                                                        display: 'flex',\r\n                                                        alignItems: 'center',\r\n                                                        justifyContent: 'center',\r\n                                                        borderTop: index === 0 ? '' : '1px solid rgba(255,255,255,0.8)',\r\n                                                        borderLeft: '1px solid rgba(255,255,255,0.8)',\r\n                                                    }}>\r\n                                                        {helper.roundTwoDecimal(petHelper.calculatePetBaseDamage(pet, defaultRank))}\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                            )\r\n                                        })}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Grid Right */}\r\n            <div style={{ display: 'flex', flex: '1' }}>\r\n                <div\r\n                    className='importantText'\r\n                    style={{\r\n                        border: '2px solid rgba(255,255,255,0.8)',\r\n                        borderRadius: '6px',\r\n                        marginTop: '6px',\r\n                        marginRight: '6px',\r\n                        maxHeight: 'calc(100vh - 50px)',\r\n                        backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                        // width: 'calc(100% - 66%)',\r\n                        minWidth: '200px',\r\n                        overflow: 'hidden'\r\n                    }}\r\n                >\r\n                    <div style={{ display: 'flex', flexDirection: 'column', marginBottom: '0' }}>\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            width: '100%',\r\n                            borderBottom: '2px solid rgba(255,255,255,0.8)',\r\n                            backgroundColor: 'rgba(255,255,255,0.12)',\r\n                            justifyContent: 'center'\r\n                        }}>\r\n                            <div style={{ fontWeight: 'bold', fontSize: '30px' }}>\r\n                                Pets\r\n                            </div>\r\n                            <div style={{ fontWeight: 'bold', alignSelf: 'end', marginLeft: '6px', marginBottom: '5px', fontSize: '16px' }}>\r\n                                (click to enable/disable)\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ display: 'flex' }}>\r\n\r\n                            <div className='hover' style={{\r\n                                width: '100%',\r\n                                borderBottom: '2px solid rgba(255,255,255,0.8)',\r\n                                display: 'flex',\r\n                                backgroundColor: 'rgba(255,255,255,0.12)'\r\n                            }}>\r\n                                <div style={{ width: '25%', borderRight: '2px solid rgba(255,255,255,0.8)', display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: '1px' }} onClick={(e) => {\r\n                                    ReactGA.event({\r\n                                        category: \"expedition_pets\",\r\n                                        action: 'enabled_all',\r\n                                        label: 'expedition'\r\n                                    })\r\n                                    if (data.PetsCollection) {\r\n                                        let petArr = [];\r\n                                        for (let i = 1; i < data.PetsCollection.length; i++) {\r\n                                            petArr.push(data.PetsCollection[i].ID)\r\n                                        }\r\n                                        handleItemSelected(petArr);\r\n                                    }\r\n\r\n                                }}>\r\n                                    Enable All\r\n                                </div>\r\n                                <div className='hover' style={{ width: '25%', borderRight: '2px solid rgba(255,255,255,0.8)', display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: '1px' }}\r\n                                    onClick={(e) => {\r\n                                        ReactGA.event({\r\n                                            category: \"expedition_pets\",\r\n                                            action: 'disabled_all',\r\n                                            label: 'expedition'\r\n                                        })\r\n                                        if (data.PetsCollection) {\r\n                                            handleItemSelected([]);\r\n                                        }\r\n\r\n                                    }}>\r\n                                    Disable All\r\n                                </div>\r\n                                <div className='hover' style={{ width: '25%', borderRight: '2px solid rgba(255,255,255,0.8)', display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: '1px' }}\r\n                                    onClick={(e) => {\r\n                                        ReactGA.event({\r\n                                            category: \"expedition_pets\",\r\n                                            action: 'reset_all',\r\n                                            label: 'expedition'\r\n                                        })\r\n                                        if (data.PetsCollection) {\r\n                                            let petArr = [];\r\n                                            for (let i = 0; i < originalPets.length; i++) {\r\n                                                petArr.push(originalPets[i].ID)\r\n                                            }\r\n                                            handleItemSelected(petArr);\r\n                                            setManualEnabledPets({});\r\n                                        }\r\n\r\n                                    }}>\r\n                                    Reset\r\n                                </div>\r\n                                <div className='hover' style={{ width: '25%', display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: '1px' }}\r\n                                    onClick={(e) => {\r\n                                        ReactGA.event({\r\n                                            category: \"expedition_pets\",\r\n                                            action: 'toggle_hide_locked',\r\n                                            label: hideLocked ? 'show_locked' : 'hide_locked',\r\n                                            value: hideLocked\r\n                                        })\r\n                                        setHideLocked(!hideLocked);\r\n                                    }}\r\n                                >\r\n                                    {hideLocked ? `Show Locked` : `Hide Locked`}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <ItemSelection\r\n                        weightMap={weightMap}\r\n                        data={data}\r\n                        selectedItems={selectedItems}\r\n                        onItemSelected={handleItemSelected}\r\n                        defaultRank={defaultRank}\r\n                        showLocked={!hideLocked}\r\n                        manualEnabledPets={manualEnabledPets}\r\n                        originalPets={originalPets}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n        </div >\r\n    );\r\n}","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\PetItem.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\PetItemCoin.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\farmingWorker.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\FarmPlant.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\graph.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\page_content.jsx",["253"],[],"\"use client\"\r\n\r\nimport { isMobile } from 'mobile-device-detect';\r\nimport { useState, useEffect, useRef, useMemo } from 'react';\r\nimport Image from 'next/image';\r\n\r\nimport useLocalStorage from \"use-local-storage\";\r\nimport MouseOverPopover from \"../util/Tooltip.jsx\";\r\nimport FarmingPlant from './FarmPlant.jsx';\r\nimport helper from \"../util/helper.js\";\r\nimport farmingHelper from \"../util/farmingHelper.js\";\r\nimport mathHelper from '../util/math.js';\r\nimport './page.css';\r\nimport ReactGA from \"react-ga4\";\r\nimport Graph from './graph.jsx';\r\nimport Timer from './Timer.jsx';\r\nimport DefaultSave from '../util/tempSave.json';\r\n\r\nimport PrestigeStar from '../../../public/images/icons/prestige_star.png'\r\nReactGA.initialize([{\r\n    trackingId: \"G-GGLPK02VH8\",\r\n    // gaOptions: {...}, // optional\r\n    // gtagOptions: {\r\n    //     send_page_view: false\r\n    // },\r\n}]);\r\nfunction generateCombinations(objects, people) {\r\n    const result = [];\r\n\r\n    function backtrack(index, remainingObjects, currentCombination) {\r\n        if (index === people) {\r\n            if (remainingObjects === 0) {\r\n                result.push([...currentCombination]);\r\n            }\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i <= remainingObjects; i++) {\r\n            currentCombination[index] = i;\r\n            backtrack(index + 1, remainingObjects - i, currentCombination);\r\n        }\r\n    }\r\n\r\n    backtrack(0, objects, []);\r\n\r\n    return result;\r\n}\r\n\r\nfunction splitArrayIndices(arr, x) {\r\n    if (x <= 0) {\r\n        return \"Invalid value for x\";\r\n    }\r\n\r\n    const n = arr.length;\r\n    if (n < x) {\r\n        return \"Array size is smaller than x\";\r\n    }\r\n\r\n    const chunkSize = Math.floor(n / x);\r\n    const remainder = n % x;\r\n\r\n    const indices = [];\r\n    let start = 0;\r\n    for (let i = 0; i < x; i++) {\r\n        const end = start + chunkSize + (i < remainder ? 1 : 0);\r\n        indices.push([start, end - 1]);\r\n        start = end;\r\n    }\r\n\r\n    return indices;\r\n}\r\n\r\n\r\nconst FarmingLanding = () => {\r\n    const [mobileMode, setMobileMode] = useState(false);\r\n    useEffect(() => {\r\n        setMobileMode(isMobile);\r\n        if (isMobile) {\r\n            setTimeout(() => {\r\n                var viewport = document.querySelector('meta[name=\"viewport\"]');\r\n                if (viewport) {\r\n                    viewport.content = \"initial-scale=0.1\";\r\n                    viewport.content = \"width=1200\";\r\n                }\r\n            }, 500);\r\n        }\r\n    }, [isMobile]);\r\n    const [clientData, setData] = useLocalStorage('userData', DefaultSave);\r\n    const [data, setRunTimeData] = useState(DefaultSave);\r\n\r\n    useEffect(() => {\r\n        setRunTimeData(clientData);\r\n    }, [clientData]);\r\n\r\n    const [customMultipliers, setCustomMultipliers] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);\r\n    const [futureTime, setFutureTime] = useState(0.01);\r\n    const [plantAutos, setPlantAutos] = useLocalStorage(\"plantAutos\", [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\r\n    const [plantAutosClient, setPlantAutosClient] = useState([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\r\n    useEffect(() => {\r\n        setPlantAutosClient(plantAutos);\r\n\r\n    }, [plantAutos]);\r\n\r\n    const [plantTimes, setPlantTimes] = useLocalStorage(\"plantTimes\", [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\n    const [plantTimesClient, setPlantTimesClient] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\n    useEffect(() => {\r\n        setPlantTimesClient(plantTimes);\r\n\r\n    }, [plantTimes]);\r\n\r\n\r\n    const secondsHour = 3600;\r\n    const farmCalcStarted = useRef({});\r\n    const farmTotals = useRef([]);\r\n    // const [numThreads, setNumThreads] = useState(8);\r\n    const [numThreads, setNumThreadsRunTime] = useState(8);\r\n    const [clientNumThreads, setNumThreads] = useLocalStorage(\"numThreads\", 8);\r\n    useEffect(() => {\r\n        setNumThreadsRunTime(clientNumThreads);\r\n    }, [clientNumThreads]);\r\n\r\n\r\n    const [openedInstructionsRunTime, setOpenedInstructionsRunTime] = useState(true);\r\n    const [clientOpenedInstructions, setOpenedInstructions] = useLocalStorage(\"openedInstructions\", false);\r\n    useEffect(() => {\r\n        setOpenedInstructionsRunTime(clientOpenedInstructions);\r\n    }, [clientOpenedInstructions]);\r\n\r\n\r\n    const [yScale, setYScaleRunTime] = useState('log');\r\n    const [yScaleClient, setYScale] = useLocalStorage(\"yScale\", 'log');\r\n    useEffect(() => {\r\n        setYScaleRunTime(yScaleClient);\r\n    }, [yScaleClient]);\r\n\r\n    const [timeStepMode, setTimeStepModeRunTime] = useState(false);\r\n    const [timeStepModeClient, setTimeStepMode] = useLocalStorage(\"timeStepMode\", false);\r\n    useEffect(() => {\r\n        setTimeStepModeRunTime(timeStepModeClient);\r\n    }, [timeStepModeClient]);\r\n\r\n    const [showFries, setShowFriesRunTime] = useState(true);\r\n    const [showFriesClient, setShowFries] = useLocalStorage(\"showFries\", true);\r\n    useEffect(() => {\r\n        setShowFriesRunTime(showFriesClient);\r\n    }, [showFriesClient])\r\n\r\n    const [showHP, setShowHPRunTime] = useState(true);\r\n    const [showHPClient, setShowHP] = useLocalStorage(\"showHP\", true);\r\n    useEffect(() => {\r\n        setShowHPRunTime(showHPClient);\r\n    }, [showHPClient]);\r\n\r\n    const [calcedFutureTime, setCalcedFutureTime] = useState(futureTime);//Used to lock in for pic displaying what future time what used when calculating\r\n\r\n    const [numSimulatedAutos, setNumSimulatedAutosRunTime] = useState(data.FarmingShopAutoPlotBought);\r\n    const [numSimulatedAutosClient, setNumSimulatedAutos] = useLocalStorage(\"numSimulatedAutos\", data.FarmingShopAutoPlotBought);\r\n    useEffect(() => {\r\n        setNumSimulatedAutosRunTime(numSimulatedAutosClient);\r\n    }, [numSimulatedAutosClient]);\r\n\r\n    const [farmCalcProgress, setFarmCalcProgress] = useState({ current: 0, max: 0 });\r\n    const [bestPlantCombo, setBestPlantCombo] = useState([]);//holds the best production, total made, pic and pic% after a calculation\r\n    // const [bestRunningCombo, setBestRunningCombo] = useState({});//same as above, but used to make the graph update during the loading\r\n    const bestRunningCombo = useMemo(() => {\r\n        return {}\r\n    }, []);//same as above, but used to make the graph update during the loading\r\n\r\n    const [autoBuyPBC, setAutoBuyPBCRunTime] = useState(data.ASCFarmingShopAutoPage1 === 1);\r\n    const [autoBuyPBCClient, setAutoBuyPBC] = useLocalStorage(\"autoBuyPBC\", data.ASCFarmingShopAutoPage1 === 1);\r\n    useEffect(() => {\r\n        setAutoBuyPBCRunTime(autoBuyPBCClient);\r\n    }, [autoBuyPBCClient]);\r\n\r\n    const [lockCustomAuto, setLockCustomAutoRunTime] = useState(false);\r\n    const [lockCustomAutoClient, setLockCustomAuto] = useLocalStorage(\"lockCustomAuto\", false);\r\n    useEffect(() => {\r\n        setLockCustomAutoRunTime(lockCustomAutoClient);\r\n    }, [lockCustomAutoClient]);\r\n\r\n    const [forceRankPotion, setForceRankPotionRunTime] = useState(false);\r\n    const [forceRankPotionClient, setForceRankPotion] = useLocalStorage(\"forceRankPotion\", false);\r\n    useEffect(() => {\r\n        setForceRankPotionRunTime(forceRankPotionClient);\r\n    }, [forceRankPotionClient]);\r\n\r\n    const [calcAFK, setCalcAFK] = useState(false);\r\n    const [calcStep, setCalcStep] = useState(false);\r\n\r\n    const [timeCompleted, setTimeCompleted] = useState(null);\r\n    const [showInstructions, setShowInstructions] = useState(false);\r\n\r\n    let petPlantCombo = 1;\r\n    let contagionPlantEXP = 1;\r\n    let contagionPlantGrowth = 1;\r\n    let contagionPlantProd = 1;\r\n    let contagionHarvest = 1;\r\n    let soulPlantEXP, shopGrowingSpeed, manualHarvestFormula, shopRankEXP, shopRankLevel, picPlants, plants,\r\n        assemblyPlantExp, assemblyProduction, assemblyPlantharvest, potionRank, potionRankTime;\r\n    if (data.GrasshopperCollection) {\r\n        if (data.GrasshopperCollection[2].Locked > 0) {\r\n            let base = helper.calcPOW(data.GrasshopperCollection[2].BaseBonus);\r\n            let level = helper.calcPOW(data.GrasshopperCollection[2].Level);\r\n            contagionPlantEXP = Math.pow(1 + base * 0.01, level);\r\n        }\r\n        if (data.GrasshopperCollection[3].Locked > 0) {\r\n            let base = helper.calcPOW(data.GrasshopperCollection[3].BaseBonus);\r\n            let level = helper.calcPOW(data.GrasshopperCollection[3].Level);\r\n            contagionPlantProd = Math.pow(1 + base * 0.01, level);\r\n        }\r\n        if (data.GrasshopperCollection[4].Locked > 0) {\r\n            let base = helper.calcPOW(data.GrasshopperCollection[4].BaseBonus);\r\n            let level = helper.calcPOW(data.GrasshopperCollection[4].Level);\r\n            contagionPlantGrowth = Math.pow(1 + base * 0.01, level);\r\n        }\r\n        if (data.GrasshopperCollection[6].Locked > 0) {\r\n            let base = helper.calcPOW(data.GrasshopperCollection[6].BaseBonus);\r\n            let level = helper.calcPOW(data.GrasshopperCollection[6].Level);\r\n            contagionHarvest = Math.pow(1 + base * 0.01, level);\r\n        }\r\n\r\n\r\n        soulPlantEXP = Math.pow(1.25, data.SoulLeafTreatment);\r\n\r\n        shopGrowingSpeed = data.FarmingShopPlantGrowingSpeed;\r\n        manualHarvestFormula = data.FarmingShopPlantManualHarvestFormula;\r\n        // let shopProdBonus = Math.pow(1.25, data.FarmingShopPlantTotalProduction);\r\n        shopRankEXP = 1 + data.FarmingShopPlantRankExpEarned * 0.1;\r\n        shopRankLevel = data.FarmingShopPlantRankExpEarned;\r\n        picPlants = data.FarmingShopPlantImprovement;\r\n        plants = data.PlantCollection;\r\n\r\n        assemblyPlantExp = 1;\r\n        assemblyProduction = 1;\r\n        assemblyPlantharvest = 1;\r\n        if (data?.AssemblerCollection[0].BonusList[1].StartingLevel <= data?.AssemblerCollection[0].Level) {\r\n            assemblyPlantExp *= farmingHelper.calcAssembly(data, 0, 1);\r\n        }\r\n        if (data?.AssemblerCollection[5].BonusList[2].StartingLevel <= data?.AssemblerCollection[5].Level) {\r\n            assemblyPlantExp *= farmingHelper.calcAssembly(data, 5, 2);\r\n        }\r\n\r\n        if (data?.AssemblerCollection[3].BonusList[2].StartingLevel <= data?.AssemblerCollection[3].Level) {\r\n            assemblyProduction *= farmingHelper.calcAssembly(data, 3, 2);\r\n        }\r\n        if (data?.AssemblerCollection[7].BonusList[1].StartingLevel <= data?.AssemblerCollection[7].Level) {\r\n            assemblyProduction *= farmingHelper.calcAssembly(data, 7, 1);\r\n        }\r\n\r\n        if (data?.AssemblerCollection[7].BonusList[0].StartingLevel <= data?.AssemblerCollection[7].Level) {\r\n            assemblyPlantharvest *= farmingHelper.calcAssembly(data, 7, 0);\r\n        }\r\n        if (data?.AssemblerCollection[9].BonusList[3].StartingLevel <= data?.AssemblerCollection[9].Level) {\r\n            assemblyPlantharvest *= farmingHelper.calcAssembly(data, 9, 3);\r\n        }\r\n\r\n        for (let i = 0; i < data.PetsSpecial.length; i++) {\r\n            let t = data.PetsSpecial[i];\r\n            if (t.BonusID === 5015 && t.Active === 1) {\r\n                petPlantCombo += t.BonusPower / 100;\r\n            }\r\n        }\r\n\r\n        potionRankTime = data.SoulPotionHealthyRankTime;\r\n        potionRank = potionRankTime > 0 ? data.SoulPotionHealthyRankBonus + 1 : 1;\r\n        if (forceRankPotion && potionRank === 1) {\r\n            potionRank = 1.5;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const modifiers = useMemo(() => {\r\n        if (!data.GrasshopperCollection) {\r\n            return {};\r\n        }\r\n        // console.log(`setin modif`);\r\n        let tempy =\r\n        {\r\n            time: 0,\r\n            // numAuto: numAuto,\r\n            originalPotionRank: data.SoulPotionHealthyRankTime,\r\n            shopGrowingSpeed: shopGrowingSpeed,\r\n            originalShopGrowingLevel: data.FarmingShopPlantGrowingSpeed,\r\n            originalShopGrowingBonus: data.PlantGrowingSpeedBonus,\r\n            manualHarvestFormula: manualHarvestFormula,\r\n            contagionHarvest: contagionHarvest,\r\n            shopRankEXP: shopRankEXP,\r\n            shopRankLevel: shopRankLevel,\r\n            originalShopRankLevel: data.FarmingShopPlantRankExpEarned,\r\n            originalRankLevelBonus: data.PlantRankExpBonus,\r\n            picPlants: picPlants,\r\n            petPlantCombo: petPlantCombo,\r\n            contagionPlantEXP: contagionPlantEXP,\r\n            contagionPlantGrowth: contagionPlantGrowth,\r\n            soulPlantEXP: soulPlantEXP,\r\n            assemblyPlantExp: assemblyPlantExp,\r\n            assemblyProduction: assemblyProduction,\r\n            assemblyPlantharvest: assemblyPlantharvest,\r\n            manualHarvestBonus: mathHelper.createDecimal(data.PlantManualHarvestBonus).toNumber(),\r\n            shopProdBonus: mathHelper.pow(1.25, data.FarmingShopPlantTotalProduction),\r\n            originalShopProdLevel: data.FarmingShopPlantTotalProduction,\r\n            originalShopProdBonus: data.PlantTotalProductionBonus,\r\n            shopProdLevel: data.FarmingShopPlantTotalProduction,\r\n            contagionPlantProd: contagionPlantProd,\r\n            hpBonus: mathHelper.createDecimal(data.HealthyPotatoBonus),\r\n            hpBonusExponent: 1 + 0.01\r\n                * (\r\n                    (data.FarmingShopUniqueHealthy[32] ? data.FarmingShopUniqueHealthy[32] : 0)\r\n                    + (data.FarmingShopUniqueHealthy[33] ? data.FarmingShopUniqueHealthy[33] : 0)\r\n                    + (data.FarmingShopUniqueHealthy[34] ? data.FarmingShopUniqueHealthy[34] : 0)\r\n                    + (data.FarmingShopUniqueHealthy[35] ? data.FarmingShopUniqueHealthy[35] : 0)\r\n                ),\r\n            nextCosts: farmingHelper.getNextShopCosts(data),\r\n            curPotatoes: mathHelper.createDecimal(data.HealthyPotatoCurrent),\r\n            totalPotatoes: mathHelper.createDecimal(data.HealthyPotatoTotal),\r\n            // expBonus: shopRankEXP * soulPlantEXP * contagionPlantEXP * assemblyPlantExp,\r\n            autoBuyPBC: autoBuyPBC,\r\n            // tickRate: Math.floor((futureTime * secondsHour) * 0.0015) < 1 ? 1 : Math.floor((futureTime * secondsHour) * 0.0015),\r\n            tickRate: Math.floor((futureTime * secondsHour) * 0.01) < 1 ? 1 : Math.floor((futureTime * secondsHour) * 0.012),\r\n            potionRankTime: potionRankTime,\r\n            potionRank: potionRank,\r\n            forceRankPotion: forceRankPotion,\r\n            fryBonus: data.FrenchFriesBonus,\r\n            fryBonusExponent: 1 + 0.01\r\n                * (\r\n                    (data.FarmingShopUniqueFries[16] ? data.FarmingShopUniqueFries[16] : 0)\r\n                    + (data.FarmingShopUniqueFries[17] ? data.FarmingShopUniqueFries[17] : 0)\r\n                    + (data.FarmingShopUniqueFries[18] ? data.FarmingShopUniqueFries[18] : 0)\r\n                ),\r\n            timePassed: data.TimePassedFarming\r\n        }\r\n        tempy.originalShopProdBonus = data.PlantTotalProductionBonus;\r\n        return tempy\r\n    },\r\n        [\r\n            shopGrowingSpeed, manualHarvestFormula, contagionHarvest, shopRankEXP, shopRankLevel, picPlants, petPlantCombo,\r\n            contagionPlantEXP, contagionPlantGrowth, soulPlantEXP, assemblyPlantExp, assemblyProduction, contagionPlantProd, assemblyPlantharvest,\r\n            data, autoBuyPBC, futureTime, potionRank, potionRankTime, forceRankPotion\r\n        ]\r\n    )\r\n\r\n    const finalPlants = useMemo(() => {\r\n        // console.log(`generating inter plants`);\r\n        let tempArr = [];\r\n\r\n        if (!data.GrasshopperCollection) {\r\n            return [];\r\n        }\r\n\r\n        //\r\n        for (let i = 0; i < plants.length; i++) {\r\n            let plant = plants[i];\r\n            if (plant.Locked === 0) continue;\r\n\r\n\r\n\r\n            plant.prestige = picPlants[i];\r\n\r\n            plant.prestigeBonus = Math.pow(1.02, plant.prestige)\r\n            plant.growthTime = farmingHelper.calcGrowthTime(plant, modifiers);\r\n\r\n            plant.created = mathHelper.createDecimal(plant.ManuallyCreated);\r\n            plant.totalMade = mathHelper.createDecimal(plant.TotalCreated);\r\n\r\n            plant.perHarvest = farmingHelper.calcPlantHarvest(plant, modifiers);\r\n            plant.curExp = plant.CurrentExp.mantissa * (Math.pow(10, plant.CurrentExp.exponent));\r\n            plant.reqExp = plant.ExpNeeded.mantissa * (Math.pow(10, plant.ExpNeeded.exponent));\r\n            //plant.timeToLevel = (plant.reqExp - plant.curExp) / plant.perHarvest * plant.growthTime;\r\n\r\n            plant.futureMult = farmingHelper.futureMultBD(plant, modifiers);\r\n            let prod = farmingHelper.calcProdOutput(plant, modifiers);\r\n            plant.production = prod;\r\n            plant.timeToLevel = farmingHelper.calcTimeTillLevel(plant, { ...modifiers, numAuto: plantAutosClient[i] });\r\n\r\n            plant.elapsedTime = 0;\r\n            plant.originalRank = plant.Rank;\r\n            tempArr.push(plant);\r\n        }\r\n        return tempArr;\r\n    }, [picPlants, plants, modifiers, plantAutosClient, data.GrasshopperCollection])\r\n\r\n\r\n    const [calcDone, setCalcDone] = useState(true);\r\n    const [expDiff, setExpDiff] = useState(0);\r\n    const [expDiffFry, setExpDiffFry] = useState(0);\r\n\r\n    let tempFuture = useMemo(() => {\r\n        // console.log(`calcing`);\r\n        if (!data.GrasshopperCollection) {\r\n            return { plants: [] };\r\n        }\r\n\r\n\r\n\r\n        let tempModif;\r\n        let result;\r\n\r\n        if (timeStepMode) {\r\n\r\n            let futureTime = 0;\r\n\r\n            tempModif = { ...modifiers, time: secondsHour * futureTime };\r\n            let steps = [];\r\n\r\n            for (let i = 0; i < finalPlants.length; i++) {\r\n                futureTime += plantTimes[i];\r\n                let autos = Array(finalPlants.length).fill(0);\r\n                autos[i] = numSimulatedAutos;\r\n                steps.push({\r\n                    time: helper.roundInt(plantTimes[i] * secondsHour),\r\n                    autos: autos\r\n                })\r\n            }\r\n\r\n            let tickRate = Math.floor((futureTime * secondsHour) * 0.01) < 1 ? 1 : Math.floor((futureTime * secondsHour) * 0.012);\r\n            steps.reverse();\r\n\r\n            result = farmingHelper.calcStepHPProd(finalPlants, { ...tempModif, steps: steps, tickRate: tickRate });\r\n\r\n        }\r\n        else {\r\n            tempModif = { ...modifiers, time: secondsHour * futureTime, numAutos: plantAutosClient };\r\n            result = farmingHelper.calcHPProd(finalPlants, tempModif);\r\n        }\r\n\r\n\r\n        for (let i = 0; i < result.dataPointsPotatoes.length; i++) {\r\n            let cur = result.dataPointsPotatoes[i];\r\n            cur.time = helper.roundInt(cur.time);\r\n            cur.originalProduction = mathHelper.createDecimal(cur.production.toString());\r\n        }\r\n        for (let i = 0; i < result.dataPointsFries.length; i++) {\r\n            let cur = result.dataPointsFries[i];\r\n            cur.time = helper.roundInt(cur.time);\r\n            cur.originalFry = mathHelper.createDecimal(cur.fries.toString());\r\n        }\r\n\r\n\r\n        if (!result.plants) {\r\n            result.plants = finalPlants;\r\n        }\r\n        return result;\r\n    },\r\n        [numSimulatedAutos, finalPlants, modifiers, futureTime, plantAutosClient, data.GrasshopperCollection, secondsHour, timeStepMode, plantTimes]);\r\n\r\n    //Go through all datapoints, find highest exp, and reduce it for all equally if necessary so JS doesn't break\r\n    const graphObjects = useMemo(() => {\r\n        // console.log(`updating EXPDIFF`);\r\n        if (!data.GrasshopperCollection) {\r\n            return [];\r\n        }\r\n        const maxExp = 300;\r\n        let currMaxExp = 0;\r\n        let diff_exp = 0;\r\n\r\n        let currMaxExpFry = 0;\r\n        let diff_expFry = 0;\r\n\r\n        // Go over all the custom input data points first\r\n        for (let i = 0; i < tempFuture.dataPointsPotatoes.length; i++) {\r\n            let cur = tempFuture.dataPointsPotatoes[i];\r\n            if (cur.originalProduction.exponent > currMaxExp) {\r\n                currMaxExp = cur.originalProduction.exponent;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < tempFuture.dataPointsFries.length; i++) {\r\n            let cur = tempFuture.dataPointsFries[i];\r\n            if (cur.originalFry.exponent > currMaxExpFry) {\r\n                currMaxExpFry = cur.originalFry.exponent;\r\n            }\r\n        }\r\n\r\n        if (bestPlantCombo.top10DataPointsPotatoes) {\r\n            // Go over all the top 1 results\r\n            for (let i = 0; i < bestPlantCombo.top10DataPointsPotatoes.length; i++) {\r\n                if (i > 0) break;\r\n                let cur = bestPlantCombo.top10DataPointsPotatoes[i];\r\n                for (let j = 0; j < cur.data.length; j++) {\r\n                    let cur_iner = cur.data[j];\r\n                    if (cur_iner.originalProduction.exponent > currMaxExp) {\r\n                        currMaxExp = cur_iner.originalProduction.exponent;\r\n                    }\r\n                }\r\n            }\r\n            for (let i = 0; i < bestPlantCombo.top10DataPointsFries.length; i++) {\r\n                if (i > 0) break;\r\n                let cur = bestPlantCombo.top10DataPointsFries[i];\r\n                for (let j = 0; j < cur.data.length; j++) {\r\n                    let cur_iner = cur.data[j];\r\n                    if (cur_iner.originalFry.exponent > currMaxExpFry) {\r\n                        currMaxExpFry = cur_iner.originalFry.exponent;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // go over the best PIC\r\n            for (let i = 0; i < bestPlantCombo.bestPic.result.result.dataPointsPotatoes.length; i++) {\r\n                let cur = bestPlantCombo.bestPic.result.result.dataPointsPotatoes[i];\r\n                if (cur.originalProduction.exponent > currMaxExp) {\r\n                    currMaxExp = cur.originalProduction.exponent;\r\n                }\r\n            }\r\n\r\n            // go over the best PIC %\r\n            for (let i = 0; i < bestPlantCombo.bestPicPerc.result.result.dataPointsPotatoes.length; i++) {\r\n                let cur = bestPlantCombo.bestPicPerc.result.result.dataPointsPotatoes[i];\r\n                if (cur.originalProduction.exponent > currMaxExp) {\r\n                    currMaxExp = cur.originalProduction.exponent;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        diff_exp = currMaxExp > maxExp ? currMaxExp - maxExp : 0;\r\n        diff_expFry = currMaxExpFry > maxExp ? currMaxExpFry - maxExp : 0;\r\n\r\n        // Reduce all the exponents for custom input first\r\n        for (let i = 0; i < tempFuture.dataPointsPotatoes.length; i++) {\r\n            let cur = tempFuture.dataPointsPotatoes[i];\r\n            cur.production = mathHelper.createDecimal(cur.originalProduction.toString());\r\n            cur.production.exponent -= diff_exp;\r\n            cur.production = cur.production.toNumber();\r\n        }\r\n        for (let i = 0; i < tempFuture.dataPointsFries.length; i++) {\r\n            let cur = tempFuture.dataPointsFries[i];\r\n            cur.fries = mathHelper.createDecimal(cur.originalFry.toString());\r\n            cur.fries.exponent -= diff_expFry;\r\n            cur.fries = cur.fries.toNumber();\r\n        }\r\n\r\n        if (bestPlantCombo.top10DataPointsPotatoes) {\r\n            // Go over all the top 1 results\r\n            for (let i = 0; i < bestPlantCombo.top10DataPointsPotatoes.length; i++) {\r\n                if (i > 0) break;\r\n                let cur = bestPlantCombo.top10DataPointsPotatoes[i];\r\n                for (let j = 0; j < cur.data.length; j++) {\r\n                    let cur_iner = cur.data[j];\r\n                    cur_iner.production = mathHelper.createDecimal(cur_iner.originalProduction.toString());\r\n                    cur_iner.production.exponent -= diff_exp;\r\n                    cur_iner.production = cur_iner.production.toNumber();\r\n                }\r\n            }\r\n            for (let i = 0; i < bestPlantCombo.top10DataPointsFries.length; i++) {\r\n                if (i > 0) break;\r\n                let cur = bestPlantCombo.top10DataPointsFries[i];\r\n                for (let j = 0; j < cur.data.length; j++) {\r\n                    let cur_iner = cur.data[j];\r\n                    cur_iner.fries = mathHelper.createDecimal(cur_iner.originalFry.toString());\r\n                    cur_iner.fries.exponent -= diff_expFry;\r\n                    cur_iner.fries = cur_iner.fries.toNumber();\r\n                }\r\n            }\r\n\r\n            // go over the best PIC\r\n            for (let i = 0; i < bestPlantCombo.bestPic.result.result.dataPointsPotatoes.length; i++) {\r\n                let cur = bestPlantCombo.bestPic.result.result.dataPointsPotatoes[i];\r\n                cur.production = mathHelper.createDecimal(cur.originalProduction.toString());\r\n                cur.production.exponent -= diff_exp;\r\n                cur.production = cur.production.toNumber();\r\n            }\r\n            // go over the best PIC %\r\n            for (let i = 0; i < bestPlantCombo.bestPicPerc.result.result.dataPointsPotatoes.length; i++) {\r\n                let cur = bestPlantCombo.bestPicPerc.result.result.dataPointsPotatoes[i];\r\n                cur.production = mathHelper.createDecimal(cur.originalProduction.toString());\r\n                cur.production.exponent -= diff_exp;\r\n                cur.production = cur.production.toNumber();\r\n            }\r\n        }\r\n\r\n        if (expDiff !== diff_exp) {\r\n            setExpDiff(diff_exp);\r\n        }\r\n        if (expDiffFry !== diff_expFry) {\r\n            setExpDiffFry(expDiffFry);\r\n        }\r\n\r\n        return {\r\n            customProduction: tempFuture,\r\n            top10Potatoes: bestPlantCombo.top10DataPointsPotatoes,\r\n            top10Fries: bestPlantCombo.top10DataPointsFries,\r\n            bestPic: bestPlantCombo?.bestPic?.result?.result?.dataPointsPotatoes,\r\n            bestPicPerc: bestPlantCombo?.bestPicPerc?.result?.result?.dataPointsPotatoes,\r\n        }\r\n\r\n    }, [tempFuture, expDiff, expDiffFry, data.GrasshopperCollection, bestPlantCombo])\r\n\r\n    const runningGraphObjects = useMemo(() => {\r\n        // console.log(`updating running EXPDIFF`);\r\n\r\n        const maxExp = 300;\r\n        let currMaxExp = 0;\r\n        let diff_exp = 0;\r\n\r\n        let runProd = bestRunningCombo.runningProd;\r\n\r\n        if (runProd) {\r\n            for (let i = 0; i < runProd.result.result.dataPointsPotatoes.length; i++) {\r\n                let cur_iner = runProd.result.result.dataPointsPotatoes[i];\r\n                if (cur_iner.originalProduction.exponent > currMaxExp) {\r\n                    currMaxExp = cur_iner.originalProduction.exponent;\r\n                }\r\n            }\r\n\r\n            diff_exp = currMaxExp > maxExp ? currMaxExp - maxExp : 0;\r\n\r\n            for (let i = 0; i < runProd.result.result.dataPointsPotatoes.length; i++) {\r\n                let cur_iner = runProd.result.result.dataPointsPotatoes[i];\r\n                cur_iner.production = mathHelper.createDecimal(cur_iner.originalProduction.toString());\r\n                cur_iner.production.exponent -= diff_exp;\r\n                cur_iner.production = cur_iner.production.toNumber();\r\n            }\r\n        }\r\n\r\n        return {\r\n            runningProd: runProd\r\n            // customProduction: tempFuture,\r\n            // top10Potatoes: bestPlantCombo.top10DataPointsPotatoes,\r\n            // bestPic: bestPlantCombo?.bestPic?.result?.result?.dataPointsPotatoes,\r\n            // bestPicPerc: bestPlantCombo?.bestPicPerc?.result?.result?.dataPointsPotatoes,\r\n        }\r\n\r\n        // if (bestPlantCombo.top10DataPointsPotatoes) {\r\n        //     // Go over all the top 1 results\r\n        //     for (let i = 0; i < bestPlantCombo.top10DataPointsPotatoes.length; i++) {\r\n        //         if (i > 0) break;\r\n        //         let cur = bestPlantCombo.top10DataPointsPotatoes[i];\r\n        //         for (let j = 0; j < cur.data.length; j++) {\r\n        //             let cur_iner = cur.data[j];\r\n        //             if (cur_iner.originalProduction.exponent > currMaxExp) {\r\n        //                 currMaxExp = cur_iner.originalProduction.exponent;\r\n        //             }\r\n        //         }\r\n        //     }\r\n\r\n        //     // go over the best PIC\r\n        //     for (let i = 0; i < bestPlantCombo.bestPic.result.result.dataPointsPotatoes.length; i++) {\r\n        //         let cur = bestPlantCombo.bestPic.result.result.dataPointsPotatoes[i];\r\n        //         if (cur.originalProduction.exponent > currMaxExp) {\r\n        //             currMaxExp = cur.originalProduction.exponent;\r\n        //         }\r\n        //     }\r\n        //     // go over the best PIC %\r\n        //     for (let i = 0; i < bestPlantCombo.bestPicPerc.result.result.dataPointsPotatoes.length; i++) {\r\n        //         let cur = bestPlantCombo.bestPicPerc.result.result.dataPointsPotatoes[i];\r\n        //         if (cur.originalProduction.exponent > currMaxExp) {\r\n        //             currMaxExp = cur.originalProduction.exponent;\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n\r\n        // diff_exp = currMaxExp > maxExp ? currMaxExp - maxExp : 0;\r\n\r\n        // // Reduce all the exponents for custom input first\r\n        // for (let i = 0; i < tempFuture.dataPointsPotatoes.length; i++) {\r\n        //     let cur = tempFuture.dataPointsPotatoes[i];\r\n        //     cur.production = mathHelper.createDecimal(cur.originalProduction.toString());\r\n        //     cur.production.exponent -= diff_exp;\r\n        //     cur.production = cur.production.toNumber();\r\n        // }\r\n\r\n        // if (bestPlantCombo.top10DataPointsPotatoes) {\r\n        //     // Go over all the top 1 results\r\n        //     for (let i = 0; i < bestPlantCombo.top10DataPointsPotatoes.length; i++) {\r\n        //         if (i > 0) break;\r\n        //         let cur = bestPlantCombo.top10DataPointsPotatoes[i];\r\n        //         for (let j = 0; j < cur.data.length; j++) {\r\n        //             let cur_iner = cur.data[j];\r\n        //             cur_iner.production = mathHelper.createDecimal(cur_iner.originalProduction.toString());\r\n        //             cur_iner.production.exponent -= diff_exp;\r\n        //             cur_iner.production = cur_iner.production.toNumber();\r\n        //         }\r\n        //     }\r\n\r\n        //     // go over the best PIC\r\n        //     for (let i = 0; i < bestPlantCombo.bestPic.result.result.dataPointsPotatoes.length; i++) {\r\n        //         let cur = bestPlantCombo.bestPic.result.result.dataPointsPotatoes[i];\r\n        //         cur.production = mathHelper.createDecimal(cur.originalProduction.toString());\r\n        //         cur.production.exponent -= diff_exp;\r\n        //         cur.production = cur.production.toNumber();\r\n        //     }\r\n        //     // go over the best PIC %\r\n        //     for (let i = 0; i < bestPlantCombo.bestPicPerc.result.result.dataPointsPotatoes.length; i++) {\r\n        //         let cur = bestPlantCombo.bestPicPerc.result.result.dataPointsPotatoes[i];\r\n        //         cur.production = mathHelper.createDecimal(cur.originalProduction.toString());\r\n        //         cur.production.exponent -= diff_exp;\r\n        //         cur.production = cur.production.toNumber();\r\n        //     }\r\n        // }\r\n\r\n        // if (expDiff !== diff_exp) {\r\n        //     setExpDiff(diff_exp);\r\n        // }\r\n\r\n        // return {\r\n        //     customProduction: tempFuture,\r\n        //     top10Potatoes: bestPlantCombo.top10DataPointsPotatoes,\r\n        //     bestPic: bestPlantCombo?.bestPic?.result?.result?.dataPointsPotatoes,\r\n        //     bestPicPerc: bestPlantCombo?.bestPicPerc?.result?.result?.dataPointsPotatoes,\r\n        // }\r\n\r\n    }, [bestRunningCombo])\r\n\r\n    const [showInstructionsBorder, setShowInstructionsBorder] = useState(false);\r\n    useEffect(() => {\r\n\r\n        if (!showInstructions) {\r\n            let timeout = setTimeout(() => {\r\n                setShowInstructionsBorder(false);\r\n            }, 450)\r\n            return () => { clearTimeout(timeout) }\r\n        }\r\n        else {\r\n            setShowInstructionsBorder(true);\r\n        }\r\n    }, [showInstructions])\r\n\r\n    let customFuturePlants = [];\r\n    let futurePlants = [];//ss\r\n    for (let i = 0; i < tempFuture.plants.length; i++) {\r\n        let newPlant = tempFuture.plants[i];\r\n        let prestigeTimings = farmingHelper.calcTimeTillPrestige(newPlant, { ...modifiers, time: secondsHour * futureTime, numAuto: timeStepMode ? numSimulatedAutos : plantAutosClient[i] });\r\n\r\n        newPlant.nextPrestige = prestigeTimings.prestige;\r\n        newPlant.timeToPrestige = prestigeTimings.remainingTime;\r\n\r\n        customFuturePlants.push(newPlant);\r\n        futurePlants.push(newPlant);\r\n    }\r\n\r\n    const FarmerWorker = useRef(null);\r\n    const FarmerWorker1 = useRef(null);\r\n    const FarmerWorker2 = useRef(null);\r\n    const FarmerWorker3 = useRef(null);\r\n    const FarmerWorker4 = useRef(null);\r\n    const FarmerWorker5 = useRef(null);\r\n    const FarmerWorker6 = useRef(null);\r\n    const FarmerWorker7 = useRef(null);\r\n    const FarmerWorker8 = useRef(null);\r\n    const FarmerWorker9 = useRef(null);\r\n    const FarmerWorker10 = useRef(null);\r\n    const FarmerWorker11 = useRef(null);\r\n    const workers = [FarmerWorker, FarmerWorker1, FarmerWorker2, FarmerWorker3, FarmerWorker4, FarmerWorker5, FarmerWorker6, FarmerWorker7, FarmerWorker8, FarmerWorker9, FarmerWorker10, FarmerWorker11];\r\n\r\n    //Calc best + listeners\r\n    useEffect(() => {\r\n\r\n        const findBest = () => {\r\n            let finished = true;\r\n            for (let i = 0; i < 6; i++) {\r\n                if (farmCalcStarted.current[i]) {\r\n                    finished = false;\r\n                }\r\n            }\r\n            if (finished) {\r\n                setTimeCompleted(new Date());\r\n                setBestPlantCombo((currBestCombo) => {\r\n                    console.log(`Time end: ` + (new Date()).getTime())\r\n                    setFarmCalcProgress((curr) => {\r\n                        let newAmount = { ...curr };\r\n                        newAmount.current = 100;\r\n                        newAmount.max = 100;\r\n                        return newAmount;\r\n                    })\r\n                    console.log(`ready to find best`);\r\n\r\n                    let bestProd = { prod: mathHelper.createDecimal(0) };\r\n                    let bestPot = { pot: mathHelper.createDecimal(0) };\r\n                    let bestPic = { pic: 0, prod: mathHelper.createDecimal(0) }\r\n                    let bestPicPerc = { pic: 0, prod: mathHelper.createDecimal(0) }\r\n\r\n                    let top10DataPointsPotatoes = [];\r\n                    let top10DataPointsFries = [];\r\n\r\n                    for (let i = 0; i < farmTotals.current.length; i++) {\r\n                        let cur = farmTotals.current[i];\r\n\r\n\r\n                        if (!cur.totalPotCombo.result) {\r\n                            continue;\r\n                        }\r\n\r\n\r\n                        //Have to reset potatoe values again\r\n                        cur.bestPicCombo.potatoeProduction = cur.bestPicCombo.potatoeProduction ? mathHelper.createDecimal(cur.bestPicCombo.potatoeProduction) : cur.bestPicCombo.potatoeProduction;\r\n                        cur.bestPicCombo.result.potatoeProduction = cur.bestPicCombo.result.potatoeProduction ? mathHelper.createDecimal(cur.bestPicCombo.result.potatoeProduction) : cur.bestPicCombo.result.potatoeProduction;\r\n                        cur.bestPicCombo.result.totalPotatoes = cur.bestPicCombo.result.totalPotatoes ? mathHelper.createDecimal(cur.bestPicCombo.result.totalPotatoes) : cur.bestPicCombo.result.totalPotatoes;\r\n                        cur.bestPICPercCombo.potatoeProduction = cur.bestPICPercCombo.potatoeProduction ? mathHelper.createDecimal(cur.bestPICPercCombo.potatoeProduction) : cur.bestPICPercCombo.potatoeProduction;\r\n                        cur.bestPICPercCombo.result.potatoeProduction = cur.bestPICPercCombo.result.potatoeProduction ? mathHelper.createDecimal(cur.bestPICPercCombo.result.potatoeProduction) : cur.bestPICPercCombo.result.potatoeProduction;\r\n                        cur.bestPICPercCombo.result.totalPotatoes = cur.bestPICPercCombo.result.totalPotatoes ? mathHelper.createDecimal(cur.bestPICPercCombo.result.totalPotatoes) : cur.bestPICPercCombo.result.totalPotatoes;\r\n                        cur.bestProdCombo.result.potatoeProduction = cur.bestProdCombo.result.potatoeProduction ? mathHelper.createDecimal(cur.bestProdCombo.result.potatoeProduction) : cur.bestProdCombo.result.potatoeProduction;\r\n                        cur.bestProdCombo.result.totalPotatoes = cur.bestProdCombo.result.totalPotatoes ? mathHelper.createDecimal(cur.bestProdCombo.result.totalPotatoes) : cur.bestProdCombo.result.totalPotatoes;\r\n                        cur.totalPotCombo.result.totalPotatoes = cur.totalPotCombo.result.totalPotatoes ? mathHelper.createDecimal(cur.totalPotCombo.result.totalPotatoes) : cur.totalPotCombo.result.totalPotatoes;\r\n                        cur.totalPotCombo.result.potatoeProduction = cur.totalPotCombo.result.potatoeProduction ? mathHelper.createDecimal(cur.totalPotCombo.result.potatoeProduction) : cur.totalPotCombo.result.potatoeProduction;\r\n\r\n\r\n\r\n                        for (let j = 0; j < cur.top10DataPointsPotatoes.length; j++) {\r\n\r\n                            let cur_top = cur.top10DataPointsPotatoes[j];\r\n                            cur_top.result = mathHelper.createDecimal(cur_top.result);\r\n\r\n                            for (let k = 0; k < cur_top.data.length; k++) {\r\n                                let cur_data = cur_top.data[k];\r\n                                cur_data.production = cur_data.originalProduction ? mathHelper.createDecimal(cur_data.originalProduction) : mathHelper.createDecimal(cur_data.production);\r\n                                cur_data.time = helper.roundInt(cur_data.time);\r\n                            }\r\n                        }\r\n\r\n                        for (let j = 0; j < cur.top10DataPointsFries.length; j++) {\r\n\r\n                            let cur_top = cur.top10DataPointsFries[j];\r\n                            cur_top.result = mathHelper.createDecimal(cur_top.result);\r\n\r\n                            for (let k = 0; k < cur_top.data.length; k++) {\r\n                                let cur_data = cur_top.data[k];\r\n                                cur_data.fries = cur_data.originalFry ? mathHelper.createDecimal(cur_data.originalFry) : mathHelper.createDecimal(cur_data.fries);\r\n                                cur_data.time = helper.roundInt(cur_data.time);\r\n                            }\r\n                        }\r\n\r\n\r\n                        for (let j = 0; j < cur.bestPicCombo.result.dataPointsPotatoes.length; j++) {\r\n                            let cur_data = cur.bestPicCombo.result.dataPointsPotatoes[j];\r\n                            cur_data.production = cur_data.originalProduction ? mathHelper.createDecimal(cur_data.originalProduction) : mathHelper.createDecimal(cur_data.production);\r\n                            cur_data.time = helper.roundInt(cur_data.time);\r\n                        }\r\n                        for (let j = 0; j < cur.bestPicCombo.result.dataPointsFries.length; j++) {\r\n                            let cur_data = cur.bestPicCombo.result.dataPointsFries[j];\r\n\r\n                            cur_data.fries = cur_data.originalFry ? mathHelper.createDecimal(cur_data.originalFry) : mathHelper.createDecimal(cur_data.fries);\r\n\r\n                            cur_data.time = helper.roundInt(cur_data.time);\r\n                        }\r\n                        for (let j = 0; j < cur.bestPICPercCombo.result.dataPointsPotatoes.length; j++) {\r\n                            let cur_data = cur.bestPICPercCombo.result.dataPointsPotatoes[j];\r\n                            cur_data.production = cur_data.originalProduction ? mathHelper.createDecimal(cur_data.originalProduction) : mathHelper.createDecimal(cur_data.production);\r\n                            cur_data.time = helper.roundInt(cur_data.time);\r\n                        }\r\n                        for (let j = 0; j < cur.bestPICPercCombo.result.dataPointsFries.length; j++) {\r\n                            let cur_data = cur.bestPICPercCombo.result.dataPointsFries[j];\r\n                            cur_data.fries = cur_data.originalFry ? mathHelper.createDecimal(cur_data.originalFry) : mathHelper.createDecimal(cur_data.fries);\r\n                            cur_data.time = helper.roundInt(cur_data.time);\r\n                        }\r\n\r\n\r\n                        top10DataPointsPotatoes.push(...cur.top10DataPointsPotatoes);\r\n                        top10DataPointsFries.push(...cur.top10DataPointsFries);\r\n                        if (cur.bestPicCombo.picGain > bestPic.pic) {\r\n                            bestPic = { pic: cur.bestPicCombo.picGain, result: cur.bestPicCombo, prod: cur.bestPicCombo.potatoeProduction }\r\n                        }\r\n                        else if (cur.bestPicCombo.picGain === bestPic.pic) {\r\n                            if (cur.bestPicCombo.potatoeProduction.greaterThan(bestPic.prod)) {\r\n                                bestPic = { pic: cur.bestPicCombo.picGain, result: cur.bestPicCombo, prod: cur.bestPicCombo.potatoeProduction }\r\n                            }\r\n                        }\r\n\r\n                        if (cur.bestPICPercCombo.picGain > bestPicPerc.pic) {\r\n                            bestPicPerc = { pic: cur.bestPICPercCombo.picGain, result: cur.bestPICPercCombo, prod: cur.bestPICPercCombo.potatoeProduction }\r\n                        }\r\n                        else if (cur.bestPICPercCombo.picGain === bestPicPerc.pic) {\r\n                            if (cur.bestPICPercCombo.potatoeProduction.greaterThan(bestPicPerc.prod)) {\r\n                                bestPicPerc = { pic: cur.bestPICPercCombo.picGain, result: cur.bestPICPercCombo, prod: cur.bestPICPercCombo.potatoeProduction }\r\n                            }\r\n                        }\r\n\r\n\r\n                        if (cur.bestProdCombo.result.potatoeProduction.greaterThan(bestProd.prod)) {\r\n                            bestProd = { prod: cur.bestProdCombo.result.potatoeProduction, result: cur.bestProdCombo }\r\n\r\n                        }\r\n                        if (cur.totalPotCombo.result.totalPotatoes.greaterThan(bestPot.pot)) {\r\n                            bestPot = { pot: cur.totalPotCombo.result.totalPotatoes, result: cur.totalPotCombo }\r\n                        }\r\n\r\n                        for (let j = 0; j < cur.top10DataPointsPotatoes.length; j++) {\r\n                            cur.top10DataPointsPotatoes[j].obj = cur.totalPotCombo;\r\n                        }\r\n\r\n                    }\r\n\r\n                    top10DataPointsPotatoes = top10DataPointsPotatoes.sort((a, b) => b.result.compare(a.result)).slice(0, 10);\r\n                    top10DataPointsFries = top10DataPointsFries.sort((a, b) => b.result.compare(a.result)).slice(0, 10);\r\n                    // top10DataPointsFries =[]\r\n\r\n\r\n                    for (let i = 0; i < top10DataPointsPotatoes.length; i++) {\r\n\r\n                        let cur = top10DataPointsPotatoes[i];\r\n                        for (let j = 0; j < cur.data.length; j++) {\r\n                            cur.data[j].time = helper.roundInt(cur.data[j].time);\r\n                            cur.data[j].originalProduction = mathHelper.createDecimal(cur.data[j].production.toString());\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 0; i < top10DataPointsFries.length; i++) {\r\n                        let cur = top10DataPointsFries[i];\r\n                        for (let j = 0; j < cur.data.length; j++) {\r\n                            cur.data[j].time = helper.roundInt(cur.data[j].time);\r\n                            cur.data[j].originalFry = mathHelper.createDecimal(cur.data[j].fries.toString());\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 0; i < bestPic.result.result.dataPointsPotatoes.length; i++) {\r\n                        let cur = bestPic.result.result.dataPointsPotatoes[i];\r\n                        cur.time = helper.roundInt(cur.time);\r\n                        cur.originalProduction = mathHelper.createDecimal(cur.production.toString());\r\n                    }\r\n                    for (let i = 0; i < bestPic.result.result.dataPointsFries.length; i++) {\r\n                        let cur = bestPic.result.result.dataPointsFries[i];\r\n                        cur.time = helper.roundInt(cur.time);\r\n                        cur.originalFry = mathHelper.createDecimal(cur.fries.toString());\r\n                    }\r\n                    for (let i = 0; i < bestPicPerc.result.result.dataPointsPotatoes.length; i++) {\r\n                        let cur = bestPicPerc.result.result.dataPointsPotatoes[i];\r\n                        cur.time = helper.roundInt(cur.time);\r\n                        cur.originalProduction = mathHelper.createDecimal(cur.production.toString());\r\n                    }\r\n                    for (let i = 0; i < bestPicPerc.result.result.dataPointsFries.length; i++) {\r\n                        let cur = bestPicPerc.result.result.dataPointsFries[i];\r\n                        cur.time = helper.roundInt(cur.time);\r\n                        cur.originalFry = mathHelper.createDecimal(cur.fries.toString());\r\n                    }\r\n\r\n                    if (bestProd.result) {\r\n                        bestProd.finalFry = farmingHelper.calcFryOutput(bestProd.result.result.totalPotatoes, bestProd.result.result.finalModifiers);\r\n                        bestPot.finalFry = farmingHelper.calcFryOutput(bestPot.result.result.totalPotatoes, bestPot.result.result.finalModifiers);\r\n                        bestPic.finalFry = farmingHelper.calcFryOutput(bestPic.result.result.totalPotatoes, bestPic.result.result.finalModifiers);\r\n                        bestPicPerc.finalFry = farmingHelper.calcFryOutput(bestPicPerc.result.result.totalPotatoes, bestPicPerc.result.result.finalModifiers);\r\n\r\n                        for (let i = 0; i < bestPic.result.plants.length; i++) {\r\n\r\n                            bestPic.result.plants[i].created = mathHelper.createDecimal(`${bestPic.result.plants[i].created.mantissa}e${bestPic.result.plants[i].created.exponent}`);\r\n                            bestPic.result.plants[i].totalMade = mathHelper.createDecimal(`${bestPic.result.plants[i].totalMade.mantissa}e${bestPic.result.plants[i].totalMade.exponent}`);\r\n                            bestPic.result.plants[i].production = mathHelper.createDecimal(`${bestPic.result.plants[i].production.mantissa}e${bestPic.result.plants[i].production.exponent}`);\r\n\r\n                            bestPicPerc.result.plants[i].created = mathHelper.createDecimal(`${bestPicPerc.result.plants[i].created.mantissa}e${bestPicPerc.result.plants[i].created.exponent}`);\r\n                            bestPicPerc.result.plants[i].totalMade = mathHelper.createDecimal(`${bestPicPerc.result.plants[i].totalMade.mantissa}e${bestPicPerc.result.plants[i].totalMade.exponent}`);\r\n                            bestPicPerc.result.plants[i].production = mathHelper.createDecimal(`${bestPicPerc.result.plants[i].production.mantissa}e${bestPicPerc.result.plants[i].production.exponent}`);\r\n\r\n                            bestProd.result.plants[i].created = mathHelper.createDecimal(`${bestProd.result.plants[i].created.mantissa}e${bestProd.result.plants[i].created.exponent}`);\r\n                            bestProd.result.plants[i].totalMade = mathHelper.createDecimal(`${bestProd.result.plants[i].totalMade.mantissa}e${bestProd.result.plants[i].totalMade.exponent}`);\r\n                            bestProd.result.plants[i].production = mathHelper.createDecimal(`${bestProd.result.plants[i].production.mantissa}e${bestProd.result.plants[i].production.exponent}`);\r\n\r\n                            bestPot.result.plants[i].created = mathHelper.createDecimal(`${bestPot.result.plants[i].created.mantissa}e${bestPot.result.plants[i].created.exponent}`);\r\n                            bestPot.result.plants[i].totalMade = mathHelper.createDecimal(`${bestPot.result.plants[i].totalMade.mantissa}e${bestPot.result.plants[i].totalMade.exponent}`);\r\n                            bestPot.result.plants[i].production = mathHelper.createDecimal(`${bestPot.result.plants[i].production.mantissa}e${bestPot.result.plants[i].production.exponent}`);\r\n                        }\r\n\r\n\r\n                        let finalBests = {\r\n                            bestProd: bestProd,\r\n                            prod: bestProd.result.combo,\r\n                            bestPot: bestPot,\r\n                            pot: bestPot.result.combo,\r\n                            bestPic: bestPic,\r\n                            pic: bestPic.result.combo,\r\n                            bestPicPerc: bestPicPerc,\r\n                            picPerc: bestPicPerc.result.combo,\r\n                            top10DataPointsPotatoes: top10DataPointsPotatoes,\r\n                            top10DataPointsFries: top10DataPointsFries\r\n                        }\r\n                        console.log(`Best:`);\r\n                        console.log(finalBests);\r\n\r\n\r\n\r\n                        setCalcDone(true);\r\n                        return finalBests;\r\n                    }\r\n                    else {\r\n                        return currBestCombo;\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        const updateRunningBest = ({ bestProduction }) => {\r\n            //sounded like a good idea, leads to very jerky graphs\r\n            return;\r\n            // setBestRunningCombo((currBestCombo) => {\r\n            //     let bestProd = currBestCombo.prod ? currBestCombo : { prod: mathHelper.createDecimal(0) };\r\n            //     let runningProd = { prod: mathHelper.createDecimal(bestProduction.result.potatoeProduction), result: bestProduction };\r\n\r\n\r\n            //     if (runningProd.prod.greaterThan(bestProd.prod)) {\r\n\r\n            //         setForceGraphUpdate(true);\r\n            //         runningProd.prod = mathHelper.createDecimal(runningProd.prod);\r\n            //         runningProd.result.result.potatoeProduction = mathHelper.createDecimal(runningProd.result.result.potatoeProduction);\r\n            //         runningProd.result.result.totalPotatoes = mathHelper.createDecimal(runningProd.result.result.totalPotatoes);\r\n\r\n            //         for (let i = 0; i < runningProd.result.result.dataPointsPotatoes.length; i++) {\r\n            //             let cur = runningProd.result.result.dataPointsPotatoes[i];\r\n            //             cur.originalProduction = mathHelper.createDecimal(cur.production);\r\n            //             cur.production = mathHelper.createDecimal(cur.production);\r\n            //             cur.time = helper.roundInt(cur.time);\r\n            //         }\r\n\r\n\r\n            //         return { ...currBestCombo, runningProd: runningProd };\r\n            //     }\r\n\r\n            //     return currBestCombo;\r\n\r\n\r\n            //     let bestPot = { pot: mathHelper.createDecimal(0) };\r\n            //     let bestPic = { pic: 0, prod: mathHelper.createDecimal(0) }\r\n            //     let bestPicPerc = { pic: 0, prod: mathHelper.createDecimal(0) }\r\n\r\n            //     let top10DataPointsPotatoes = [];\r\n            //     let top10DataPointsFries = [];\r\n\r\n            //     for (let i = 0; i < farmTotals.current.length; i++) {\r\n            //         let cur = farmTotals.current[i];\r\n\r\n\r\n            //         if (!cur.totalPotCombo.result) {\r\n            //             continue;\r\n            //         }\r\n\r\n\r\n            //         //Have to reset potatoe values again\r\n            //         cur.bestPicCombo.potatoeProduction = cur.bestPicCombo.potatoeProduction ? mathHelper.createDecimal(cur.bestPicCombo.potatoeProduction) : cur.bestPicCombo.potatoeProduction;\r\n            //         cur.bestPicCombo.result.potatoeProduction = cur.bestPicCombo.result.potatoeProduction ? mathHelper.createDecimal(cur.bestPicCombo.result.potatoeProduction) : cur.bestPicCombo.result.potatoeProduction;\r\n            //         cur.bestPicCombo.result.totalPotatoes = cur.bestPicCombo.result.totalPotatoes ? mathHelper.createDecimal(cur.bestPicCombo.result.totalPotatoes) : cur.bestPicCombo.result.totalPotatoes;\r\n            //         cur.bestPICPercCombo.potatoeProduction = cur.bestPICPercCombo.potatoeProduction ? mathHelper.createDecimal(cur.bestPICPercCombo.potatoeProduction) : cur.bestPICPercCombo.potatoeProduction;\r\n            //         cur.bestPICPercCombo.result.potatoeProduction = cur.bestPICPercCombo.result.potatoeProduction ? mathHelper.createDecimal(cur.bestPICPercCombo.result.potatoeProduction) : cur.bestPICPercCombo.result.potatoeProduction;\r\n            //         cur.bestPICPercCombo.result.totalPotatoes = cur.bestPICPercCombo.result.totalPotatoes ? mathHelper.createDecimal(cur.bestPICPercCombo.result.totalPotatoes) : cur.bestPICPercCombo.result.totalPotatoes;\r\n            //         cur.bestProdCombo.result.potatoeProduction = cur.bestProdCombo.result.potatoeProduction ? mathHelper.createDecimal(cur.bestProdCombo.result.potatoeProduction) : cur.bestProdCombo.result.potatoeProduction;\r\n            //         cur.bestProdCombo.result.totalPotatoes = cur.bestProdCombo.result.totalPotatoes ? mathHelper.createDecimal(cur.bestProdCombo.result.totalPotatoes) : cur.bestProdCombo.result.totalPotatoes;\r\n            //         cur.totalPotCombo.result.totalPotatoes = cur.totalPotCombo.result.totalPotatoes ? mathHelper.createDecimal(cur.totalPotCombo.result.totalPotatoes) : cur.totalPotCombo.result.totalPotatoes;\r\n            //         cur.totalPotCombo.result.potatoeProduction = cur.totalPotCombo.result.potatoeProduction ? mathHelper.createDecimal(cur.totalPotCombo.result.potatoeProduction) : cur.totalPotCombo.result.potatoeProduction;\r\n\r\n\r\n\r\n            //         for (let j = 0; j < cur.top10DataPointsPotatoes.length; j++) {\r\n\r\n            //             let cur_top = cur.top10DataPointsPotatoes[j];\r\n            //             cur_top.result = mathHelper.createDecimal(cur_top.result);\r\n\r\n            //             for (let k = 0; k < cur_top.data.length; k++) {\r\n            //                 let cur_data = cur_top.data[k];\r\n            //                 cur_data.production = mathHelper.createDecimal(cur_data.production);\r\n            //                 cur_data.time = helper.roundInt(cur_data.time);\r\n            //             }\r\n            //         }\r\n\r\n            //         for (let j = 0; j < cur.top10DataPointsFries.length; j++) {\r\n\r\n            //             let cur_top = cur.top10DataPointsFries[j];\r\n            //             cur_top.result = mathHelper.createDecimal(cur_top.result);\r\n\r\n            //             for (let k = 0; k < cur_top.data.length; k++) {\r\n            //                 let cur_data = cur_top.data[k];\r\n            //                 cur_data.fries = mathHelper.createDecimal(cur_data.fries);\r\n            //                 cur_data.time = helper.roundInt(cur_data.time);\r\n            //             }\r\n            //         }\r\n\r\n\r\n            //         for (let j = 0; j < cur.bestPicCombo.result.dataPointsPotatoes.length; j++) {\r\n            //             let cur_data = cur.bestPicCombo.result.dataPointsPotatoes[j];\r\n            //             cur_data.production = mathHelper.createDecimal(cur_data.production);\r\n            //             cur_data.time = helper.roundInt(cur_data.time);\r\n            //         }\r\n            //         for (let j = 0; j < cur.bestPicCombo.result.dataPointsFries.length; j++) {\r\n            //             let cur_data = cur.bestPicCombo.result.dataPointsFries[j];\r\n            //             cur_data.fries = mathHelper.createDecimal(cur_data.fries);\r\n            //             cur_data.time = helper.roundInt(cur_data.time);\r\n            //         }\r\n            //         for (let j = 0; j < cur.bestPICPercCombo.result.dataPointsPotatoes.length; j++) {\r\n            //             let cur_data = cur.bestPICPercCombo.result.dataPointsPotatoes[j];\r\n            //             cur_data.production = mathHelper.createDecimal(cur_data.production);\r\n            //             cur_data.time = helper.roundInt(cur_data.time);\r\n            //         }\r\n            //         for (let j = 0; j < cur.bestPICPercCombo.result.dataPointsFries.length; j++) {\r\n            //             let cur_data = cur.bestPICPercCombo.result.dataPointsFries[j];\r\n            //             cur_data.fries = mathHelper.createDecimal(cur_data.fries);\r\n            //             cur_data.time = helper.roundInt(cur_data.time);\r\n            //         }\r\n\r\n\r\n            //         top10DataPointsPotatoes.push(...cur.top10DataPointsPotatoes);\r\n            //         top10DataPointsFries.push(...cur.top10DataPointsFries);\r\n            //         if (cur.bestPicCombo.picGain > bestPic.pic) {\r\n            //             bestPic = { pic: cur.bestPicCombo.picGain, result: cur.bestPicCombo, prod: cur.bestPicCombo.potatoeProduction }\r\n            //         }\r\n            //         else if (cur.bestPicCombo.picGain === bestPic.pic) {\r\n            //             if (cur.bestPicCombo.potatoeProduction.greaterThan(bestPic.prod)) {\r\n            //                 bestPic = { pic: cur.bestPicCombo.picGain, result: cur.bestPicCombo, prod: cur.bestPicCombo.potatoeProduction }\r\n            //             }\r\n            //         }\r\n\r\n            //         if (cur.bestPICPercCombo.picGain > bestPicPerc.pic) {\r\n            //             bestPicPerc = { pic: cur.bestPICPercCombo.picGain, result: cur.bestPICPercCombo, prod: cur.bestPICPercCombo.potatoeProduction }\r\n            //         }\r\n            //         else if (cur.bestPICPercCombo.picGain === bestPicPerc.pic) {\r\n            //             if (cur.bestPICPercCombo.potatoeProduction.greaterThan(bestPicPerc.prod)) {\r\n            //                 bestPicPerc = { pic: cur.bestPICPercCombo.picGain, result: cur.bestPICPercCombo, prod: cur.bestPICPercCombo.potatoeProduction }\r\n            //             }\r\n            //         }\r\n\r\n\r\n            //         if (cur.bestProdCombo.result.potatoeProduction.greaterThan(bestProd.prod)) {\r\n            //             bestProd = { prod: cur.bestProdCombo.result.potatoeProduction, result: cur.bestProdCombo }\r\n\r\n            //         }\r\n            //         if (cur.totalPotCombo.result.totalPotatoes.greaterThan(bestPot.pot)) {\r\n            //             bestPot = { pot: cur.totalPotCombo.result.totalPotatoes, result: cur.totalPotCombo }\r\n            //         }\r\n\r\n            //         for (let j = 0; j < cur.top10DataPointsPotatoes.length; j++) {\r\n            //             cur.top10DataPointsPotatoes[j].obj = cur.totalPotCombo;\r\n            //         }\r\n\r\n            //     }\r\n\r\n            //     top10DataPointsPotatoes = top10DataPointsPotatoes.sort((a, b) => b.result.compare(a.result)).slice(0, 10);\r\n            //     top10DataPointsFries = top10DataPointsFries.sort((a, b) => b.result.compare(a.result)).slice(0, 10);\r\n            //     // top10DataPointsFries =[]\r\n\r\n\r\n            //     for (let i = 0; i < top10DataPointsPotatoes.length; i++) {\r\n\r\n            //         let cur = top10DataPointsPotatoes[i];\r\n            //         for (let j = 0; j < cur.data.length; j++) {\r\n            //             cur.data[j].time = helper.roundInt(cur.data[j].time);\r\n            //             cur.data[j].originalProduction = mathHelper.createDecimal(cur.data[j].production.toString());\r\n            //         }\r\n            //     }\r\n\r\n            //     for (let i = 0; i < bestPic.result.result.dataPointsPotatoes.length; i++) {\r\n            //         let cur = bestPic.result.result.dataPointsPotatoes[i];\r\n            //         cur.time = helper.roundInt(cur.time);\r\n            //         cur.originalProduction = mathHelper.createDecimal(cur.production.toString());\r\n            //     }\r\n            //     for (let i = 0; i < bestPicPerc.result.result.dataPointsPotatoes.length; i++) {\r\n            //         let cur = bestPicPerc.result.result.dataPointsPotatoes[i];\r\n            //         cur.time = helper.roundInt(cur.time);\r\n            //         cur.originalProduction = mathHelper.createDecimal(cur.production.toString());\r\n            //     }\r\n\r\n            //     if (bestProd.result) {\r\n            //         bestProd.finalFry = farmingHelper.calcFryOutput(bestProd.result.result.totalPotatoes);\r\n            //         bestPot.finalFry = farmingHelper.calcFryOutput(bestPot.result.result.totalPotatoes);\r\n            //         bestPic.finalFry = farmingHelper.calcFryOutput(bestPic.result.result.totalPotatoes);\r\n            //         bestPicPerc.finalFry = farmingHelper.calcFryOutput(bestPicPerc.result.result.totalPotatoes);\r\n\r\n            //         for (let i = 0; i < bestPic.result.plants.length; i++) {\r\n\r\n            //             bestPic.result.plants[i].created = mathHelper.createDecimal(`${bestPic.result.plants[i].created.mantissa}e${bestPic.result.plants[i].created.exponent}`);\r\n            //             bestPic.result.plants[i].totalMade = mathHelper.createDecimal(`${bestPic.result.plants[i].totalMade.mantissa}e${bestPic.result.plants[i].totalMade.exponent}`);\r\n            //             bestPic.result.plants[i].production = mathHelper.createDecimal(`${bestPic.result.plants[i].production.mantissa}e${bestPic.result.plants[i].production.exponent}`);\r\n\r\n            //             bestPicPerc.result.plants[i].created = mathHelper.createDecimal(`${bestPicPerc.result.plants[i].created.mantissa}e${bestPicPerc.result.plants[i].created.exponent}`);\r\n            //             bestPicPerc.result.plants[i].totalMade = mathHelper.createDecimal(`${bestPicPerc.result.plants[i].totalMade.mantissa}e${bestPicPerc.result.plants[i].totalMade.exponent}`);\r\n            //             bestPicPerc.result.plants[i].production = mathHelper.createDecimal(`${bestPicPerc.result.plants[i].production.mantissa}e${bestPicPerc.result.plants[i].production.exponent}`);\r\n\r\n            //             bestProd.result.plants[i].created = mathHelper.createDecimal(`${bestProd.result.plants[i].created.mantissa}e${bestProd.result.plants[i].created.exponent}`);\r\n            //             bestProd.result.plants[i].totalMade = mathHelper.createDecimal(`${bestProd.result.plants[i].totalMade.mantissa}e${bestProd.result.plants[i].totalMade.exponent}`);\r\n            //             bestProd.result.plants[i].production = mathHelper.createDecimal(`${bestProd.result.plants[i].production.mantissa}e${bestProd.result.plants[i].production.exponent}`);\r\n\r\n            //             bestPot.result.plants[i].created = mathHelper.createDecimal(`${bestPot.result.plants[i].created.mantissa}e${bestPot.result.plants[i].created.exponent}`);\r\n            //             bestPot.result.plants[i].totalMade = mathHelper.createDecimal(`${bestPot.result.plants[i].totalMade.mantissa}e${bestPot.result.plants[i].totalMade.exponent}`);\r\n            //             bestPot.result.plants[i].production = mathHelper.createDecimal(`${bestPot.result.plants[i].production.mantissa}e${bestPot.result.plants[i].production.exponent}`);\r\n            //         }\r\n\r\n\r\n            //         let finalBests = {\r\n            //             bestProd: bestProd,\r\n            //             prod: bestProd.result.combo,\r\n            //             bestPot: bestPot,\r\n            //             pot: bestPot.result.combo,\r\n            //             bestPic: bestPic,\r\n            //             pic: bestPic.result.combo,\r\n            //             bestPicPerc: bestPicPerc,\r\n            //             picPerc: bestPicPerc.result.combo,\r\n            //             top10DataPointsPotatoes: top10DataPointsPotatoes,\r\n            //             top10DataPointsFries: top10DataPointsFries\r\n            //         }\r\n            //         console.log(`Best:`);\r\n            //         console.log(finalBests);\r\n\r\n\r\n\r\n            //         setCalcDone(true);\r\n            //         return finalBests;\r\n            //     }\r\n            // })\r\n\r\n        }\r\n\r\n\r\n        FarmerWorker.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker1.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker2.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker3.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker4.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker5.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker6.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker7.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker8.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker9.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker10.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker11.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n\r\n\r\n        FarmerWorker.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n            console.log(`get sm back`)\r\n            farmCalcStarted.current[0] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker1.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    // console.log(`sm1 adding: ${response.updateAmount}`)\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n            console.log(`get sm1 back`)\r\n            farmCalcStarted.current[1] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker2.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n            console.log(`get sm2 back`)\r\n            farmCalcStarted.current[2] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker3.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm3 back`)\r\n            farmCalcStarted.current[3] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker4.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm4 back`)\r\n            farmCalcStarted.current[4] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker5.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm5 back`)\r\n            farmCalcStarted.current[5] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker6.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm6 back`)\r\n            farmCalcStarted.current[6] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker7.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm7 back`)\r\n            farmCalcStarted.current[7] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker8.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm8 back`)\r\n            farmCalcStarted.current[8] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker9.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm9 back`)\r\n            farmCalcStarted.current[9] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker10.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm10 back`)\r\n            farmCalcStarted.current[10] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker11.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm11 back`)\r\n            farmCalcStarted.current[11] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n\r\n\r\n        //Clean up on unmounts\r\n        return () => {\r\n            FarmerWorker.current.terminate();\r\n            FarmerWorker1.current.terminate();\r\n            FarmerWorker2.current.terminate();\r\n            FarmerWorker3.current.terminate();\r\n            FarmerWorker4.current.terminate();\r\n            FarmerWorker5.current.terminate();\r\n            FarmerWorker6.current.terminate();\r\n            FarmerWorker7.current.terminate();\r\n            FarmerWorker8.current.terminate();\r\n            FarmerWorker9.current.terminate();\r\n            FarmerWorker10.current.terminate();\r\n            FarmerWorker11.current.terminate();\r\n        }\r\n    }, [])\r\n\r\n    let notEnoughAuto = false;\r\n\r\n    if (lockCustomAuto) {\r\n        let tempTotal = 0\r\n        for (let i = 0; i < finalPlants.length; i++) {\r\n            tempTotal += plantAutosClient[i];\r\n        }\r\n        if (tempTotal > numSimulatedAutos) {\r\n            ReactGA.event({\r\n                category: \"farming_interaction\",\r\n                action: `not_enough_autos`,\r\n                label: `${tempTotal - numSimulatedAutos}`,\r\n                value: tempTotal - numSimulatedAutos\r\n            });\r\n            notEnoughAuto = true;\r\n        }\r\n    }\r\n\r\n    // let displayPicPerc = bestPlantCombo.pic !== bestPlantCombo.picPerc;\r\n    let displayPicPerc = false;\r\n    let tooManyAuto = 0;\r\n\r\n    for (let i = 0; i < tempFuture.plants.length; i++) {\r\n        tooManyAuto += plantAutosClient[i];\r\n    }\r\n\r\n    tooManyAuto = tooManyAuto > numSimulatedAutos;\r\n\r\n    if (!data.GrasshopperCollection) {\r\n        return (\r\n            <div>\r\n                <h1>{`Your save is most likely from an older version, please update your game and try with a new save. If that's not the case, please reach out on discord! Link can be found on the gratitude (heart) page`}</h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div\r\n            // className='importantText'\r\n            style={{ height: '100%', display: 'flex', flex: 1, flexDirection: 'column', paddingLeft: '6px', maxWidth: 'calc(100% - 10px)', minHeight: '0', backgroundColor: 'black', }}>\r\n            <div style={{\r\n                display: 'flex', flex: 1,\r\n                flexDirection: 'column',\r\n                width: '100%',\r\n                minHeight: '0'\r\n            }}>\r\n                <div\r\n                    style={{ display: 'flex', marginLeft: '-6px' }}\r\n                >\r\n\r\n                    {/* Future plants */}\r\n                    <div style={{ display: 'flex', overflowX: 'auto' }}>\r\n                        {/* <FarmingPlant data={{ fake: true }} /> */}\r\n                        {customFuturePlants.map((plant, index) => {\r\n                            return <FarmingPlant key={'future' + index} data={\r\n                                {\r\n                                    setPlantAutos: setPlantAutos, plantAutos: plantAutosClient,\r\n                                    plant: plant,\r\n                                    index: index,\r\n                                    customMultipliers: customMultipliers,\r\n                                    setCustomMultipliers: setCustomMultipliers,\r\n                                    allowSetMultipliers: false,\r\n                                    useFutureValues: true,\r\n                                    modifiers: modifiers,\r\n                                    timeStepMode: timeStepMode,\r\n                                    plantTimes: plantTimes,\r\n                                    setPlantTimes: setPlantTimes\r\n                                }\r\n                            } />\r\n                        }\r\n                        ).reverse()}\r\n\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                <div\r\n                    className='importantText'\r\n                    style={{\r\n                        display: 'flex', width: '100%',\r\n                        flex: 1,\r\n                        margin: '3px 0 0 0',\r\n                        minHeight: '0',\r\n                        // backgroundColor: 'yellow'\r\n                        // height: '100%'\r\n                        //  height: '-webkit-fill-available' \r\n                    }}>\r\n                    <div\r\n                        className='importantText'\r\n                        style={{\r\n                            color: 'black', width: '325px', minWidth: '325px', display: 'flex',\r\n                            flexDirection: 'column',\r\n                            overflowY: 'auto'\r\n                        }}\r\n                    >\r\n\r\n\r\n                        {/* timer + buttons */}\r\n                        <div\r\n                            className='importantText'\r\n                            style={{\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                alignSelf: 'flex-start',\r\n                                // alignItems: 'center',\r\n                                width: '97%',\r\n                                marginBottom: '12px'\r\n                            }}\r\n                        >\r\n\r\n\r\n                            {/* Calc buttons */}\r\n                            <div\r\n\r\n                                style={{\r\n                                    display: 'flex', flexDirection: 'column',\r\n                                    // border: '1px solid black',\r\n                                    border: '2px solid purple',\r\n                                    borderRadius: '5px',\r\n                                    padding: '3px',\r\n                                    width: '100%',\r\n                                    minHeight: '110px',\r\n                                    justifyContent: 'space-between',\r\n                                    backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                }}>\r\n                                <MouseOverPopover tooltip={\r\n                                    <div style={{ padding: '6px' }}>\r\n                                        Calculates the best auto distribution for desired time into the future\r\n                                    </div>\r\n                                }>\r\n                                    <div\r\n                                        className='importantText'\r\n                                        style={{ fontWeight: 'bold', display: 'flex', justifyContent: 'center', marginBottom: '3px', marginTop: '-3px' }}\r\n                                    >\r\n                                        Calculate best auto placements\r\n                                    </div>\r\n                                </MouseOverPopover>\r\n\r\n                                <div\r\n                                    className='importantText'\r\n                                    style={{ display: 'flex', flexDirection: 'column', width: '298px' }}\r\n                                >\r\n\r\n                                    {/* Hours to calc */}\r\n                                    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                        <MouseOverPopover tooltip={\r\n                                            <div>\r\n                                                How many hours into the future to calculate for each plant\r\n                                            </div>\r\n                                        }>\r\n                                            <div\r\n                                                style={{ width: '135px' }}\r\n                                            >\r\n                                                Hours to calculate\r\n                                            </div>\r\n\r\n                                        </MouseOverPopover>\r\n\r\n                                        <input\r\n                                            aria-label='Specify how many hours to simulate/calculate for'\r\n                                            style={{\r\n                                                marginLeft: '6px',\r\n                                                width: '48px',\r\n                                                backgroundColor: '#1b1b1b',\r\n                                                borderRadius: '4px',\r\n                                            }}\r\n                                            type='number'\r\n                                            className='prepNumber importantText textMedium2'\r\n                                            value={futureTime}\r\n                                            onChange={\r\n                                                (e) => {\r\n                                                    try {\r\n                                                        let x = Number(e.target.value);\r\n                                                        // x = Math.floor(x);\r\n                                                        if (x < 0.01 || x > 99999999) {\r\n                                                            return;\r\n                                                        }\r\n                                                        setFutureTime(x);\r\n\r\n                                                        ReactGA.event({\r\n                                                            category: \"farming_interaction\",\r\n                                                            action: `changed_futureHours`,\r\n                                                            label: `${x}`,\r\n                                                            value: x\r\n                                                        })\r\n\r\n                                                    }\r\n                                                    catch (err) {\r\n                                                        console.log(err);\r\n                                                    }\r\n                                                }}\r\n                                            placeholder={futureTime + ''}\r\n                                            min=\"0.01\"\r\n                                            max=\"99999999\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    {/* Unlocked autos */}\r\n                                    <div style={{\r\n                                        display: 'flex', alignItems: 'center', width: '100%'\r\n                                    }}>\r\n                                        <MouseOverPopover tooltip={\r\n                                            <div>\r\n                                                How many autos to consider for calculations as the max\r\n                                            </div>\r\n                                        }>\r\n                                            <div\r\n                                                style={{ width: '135px' }}\r\n                                            >Unlocked Autos</div>\r\n                                        </MouseOverPopover>\r\n\r\n                                        <input\r\n                                            aria-label='Specify how many auto plots to consider for best placements'\r\n                                            style={{\r\n                                                marginLeft: '6px',\r\n                                                width: '48px',\r\n                                                backgroundColor: '#1b1b1b',\r\n                                                borderRadius: '4px',\r\n                                            }}\r\n                                            type='number'\r\n                                            className='prepNumber importantText textMedium2'\r\n                                            value={numSimulatedAutos}\r\n                                            onChange={\r\n                                                (e) => {\r\n                                                    try {\r\n                                                        let x = Number(e.target.value);\r\n                                                        // x = Math.floor(x);\r\n                                                        if (x < 0 || x > 12) {\r\n                                                            return;\r\n                                                        }\r\n                                                        setNumSimulatedAutos(x);\r\n\r\n                                                        ReactGA.event({\r\n                                                            category: \"farming_interaction\",\r\n                                                            action: `changed_maxAutos`,\r\n                                                            label: `${x}`,\r\n                                                            value: x\r\n                                                        })\r\n\r\n                                                    }\r\n                                                    catch (err) {\r\n                                                        console.log(err);\r\n                                                    }\r\n                                                }}\r\n                                            placeholder={numSimulatedAutos + ''}\r\n                                            min=\"1\"\r\n                                            max=\"12\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n\r\n                                {/* Calc Start buttons */}\r\n                                <div style={{ display: 'flex', flex: '1', marginTop: '6px' }}>\r\n                                    <div style={{\r\n                                        maxWidth: '50%', margin: '0',\r\n                                        border: notEnoughAuto ? '1px solid white' : '',\r\n                                        display: 'flex',\r\n                                        flexDirection: 'column'\r\n                                    }}>\r\n                                        <MouseOverPopover opacity='0.95' tooltip={\r\n                                            <div style={{ padding: '6px' }}>\r\n                                                Calculates the best auto distribution of autos per plant. Set it and forget it mode\r\n                                            </div>\r\n                                        }>\r\n                                            <button\r\n                                                disabled={notEnoughAuto || !calcDone}\r\n                                                onClick={(e) => {\r\n                                                    setCalcDone(false);\r\n                                                    setCalcedFutureTime(futureTime);\r\n                                                    console.log(`Time start: ` + (new Date()).getTime())\r\n                                                    ReactGA.event({\r\n                                                        category: \"farming_interaction\",\r\n                                                        action: `clicked_optomise_auto`,\r\n                                                        label: `${futureTime}`,\r\n                                                        value: futureTime\r\n                                                    })\r\n\r\n                                                    let combinations = generateCombinations(numSimulatedAutos, finalPlants.length);\r\n                                                    setCalcAFK(true);\r\n                                                    setCalcStep(false);\r\n                                                    if (lockCustomAuto) {\r\n                                                        let finalCombo = [];\r\n                                                        for (let i = 0; i < combinations.length; i++) {\r\n                                                            let curr = combinations[i];\r\n                                                            let matches = true;\r\n                                                            for (let j = 0; j < finalPlants.length; j++) {\r\n                                                                //Meaning there is not enough assigned to match user's preference\r\n                                                                if (plantAutosClient[j] > curr[j]) {\r\n                                                                    matches = false;\r\n                                                                    break;\r\n                                                                }\r\n                                                            }\r\n                                                            if (matches) {\r\n                                                                finalCombo.push(curr);\r\n                                                            }\r\n                                                        }\r\n                                                        combinations = finalCombo;\r\n                                                    }\r\n\r\n                                                    // const combinations = generateCombinations(3, finalPlants.length);\r\n                                                    let splitArraysIndicies = splitArrayIndices(combinations, numThreads);\r\n                                                    if (combinations.length < numThreads) {\r\n                                                        splitArraysIndicies = Array(numThreads).fill([]);\r\n                                                        splitArraysIndicies[0] = [0, combinations.length - 1];\r\n                                                    }\r\n                                                    farmTotals.current = [];\r\n                                                    setFarmCalcProgress((cur) => {\r\n                                                        let temp = { ...cur };\r\n                                                        temp.max = combinations.length;\r\n                                                        temp.current = 0;\r\n                                                        return temp;\r\n                                                    })\r\n                                                    for (let i = 0; i < numThreads; i++) {\r\n                                                        if (farmCalcStarted.current[i]) {\r\n                                                            continue;\r\n                                                        }\r\n\r\n                                                        if (splitArraysIndicies[i].length === 0) continue;\r\n\r\n                                                        let worker = workers[i];\r\n                                                        worker.current.postMessage({\r\n                                                            data: {\r\n                                                                combinations: combinations,\r\n                                                                start: splitArraysIndicies[i][0],\r\n                                                                end: splitArraysIndicies[i][1],\r\n                                                                time: futureTime,\r\n                                                                modifiers: { ...modifiers, },\r\n                                                                finalPlants: finalPlants,\r\n                                                                mode: 'afk',\r\n                                                            },\r\n                                                            id: i\r\n                                                        })\r\n                                                        farmCalcStarted.current[i] = true;\r\n                                                    }\r\n                                                }}>Calculate AFK\r\n                                            </button>\r\n                                        </MouseOverPopover>\r\n\r\n\r\n\r\n\r\n                                        {notEnoughAuto && (\r\n                                            <div>\r\n                                                Not enough autos remaining!\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n\r\n\r\n                                    <div style={{\r\n                                        maxWidth: '50%', margin: '0 6px',\r\n                                        border: futureTime < 1 ? '1px solid white' : '',\r\n                                        display: 'flex',\r\n                                        flexDirection: 'column',\r\n                                        backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                    }}>\r\n                                        <MouseOverPopover opacity='0.95' tooltip={\r\n                                            <div style={{ padding: '6px' }}>\r\n                                                Calculates the best step-down timings of all autos for a single plant. Start at the highest plant for specified time with max autos, then step down\r\n                                            </div>\r\n                                        }>\r\n                                            <button\r\n\r\n                                                disabled={futureTime < 1 || !calcDone}\r\n                                                onClick={(e) => {\r\n                                                    setCalcDone(false);\r\n                                                    setCalcedFutureTime(futureTime);\r\n                                                    console.log(`Time start: ` + (new Date()).getTime())\r\n                                                    ReactGA.event({\r\n                                                        category: \"farming_interaction\",\r\n                                                        action: `clicked_optomise_step`,\r\n                                                        label: `${futureTime}`,\r\n                                                        value: futureTime\r\n                                                    })\r\n\r\n                                                    setCalcAFK(false);\r\n                                                    setCalcStep(true);\r\n\r\n\r\n                                                    let min = 0.92;\r\n                                                    let max = secondsHour * futureTime;\r\n                                                    let step_max = 0.009 * finalPlants.length;\r\n\r\n                                                    let nums = [];\r\n                                                    let red = Math.floor(step_max * max);\r\n                                                    for (let i = 0; i < finalPlants.length; i++) {\r\n                                                        let timer = farmingHelper.calcGrowthTime(finalPlants[i], modifiers);\r\n                                                        if (timer < red) {\r\n                                                            timer = red;\r\n                                                        }\r\n                                                        nums.push(timer);\r\n                                                    }\r\n\r\n                                                    nums.reverse();\r\n                                                    let combinations = farmingHelper.findMultipliersWithMinPercentage(max, nums, min);\r\n\r\n                                                    console.log(`num combinations: ${combinations.length}`);\r\n                                                    let splitArraysIndicies = splitArrayIndices(combinations, numThreads);\r\n                                                    if (combinations.length < numThreads) {\r\n                                                        splitArraysIndicies = Array(12).fill([]);\r\n                                                        splitArraysIndicies[0] = [0, combinations.length - 1];\r\n                                                    }\r\n                                                    farmTotals.current = [];\r\n                                                    setFarmCalcProgress((cur) => {\r\n                                                        let temp = { ...cur };\r\n                                                        temp.max = combinations.length;\r\n                                                        temp.current = 0;\r\n                                                        return temp;\r\n                                                    })\r\n\r\n                                                    for (let i = 0; i < numThreads; i++) {\r\n                                                        if (farmCalcStarted.current[i]) {\r\n                                                            continue;\r\n                                                        }\r\n                                                        if (splitArraysIndicies[i].length === 0) continue;\r\n                                                        let worker = workers[i];\r\n                                                        worker.current.postMessage({\r\n                                                            data: {\r\n                                                                baseTimers: nums,\r\n                                                                combinations: combinations,\r\n                                                                start: splitArraysIndicies[i][0],\r\n                                                                end: splitArraysIndicies[i][1],\r\n                                                                time: futureTime,\r\n                                                                modifiers: { ...modifiers, },\r\n                                                                finalPlants: finalPlants,\r\n                                                                mode: 'step',\r\n                                                                numSimulatedAutos: numSimulatedAutos\r\n                                                            },\r\n                                                            id: i\r\n                                                        })\r\n                                                        farmCalcStarted.current[i] = true;\r\n                                                    }\r\n\r\n\r\n                                                }}>Calculate Step</button>\r\n                                        </MouseOverPopover>\r\n                                        {futureTime < 1 && (\r\n                                            <div>\r\n                                                Minimum 1 future hour!\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                    {(farmCalcProgress.current > 0) && (\r\n                                        <div>\r\n                                            {`${helper.roundTwoDecimal(farmCalcProgress.current / farmCalcProgress.max * 100)}%`}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n\r\n\r\n                                <div\r\n                                    style={{\r\n                                        marginTop: '6px'\r\n                                    }}\r\n                                >\r\n                                    {`Last run time: ${timeCompleted ? timeCompleted.toLocaleString() : 'N/A'}`}\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Top Plant Settings */}\r\n                            {\r\n                                (\r\n                                    <div\r\n                                        style={{\r\n                                            display: 'flex',\r\n                                            flexDirection: 'column',\r\n                                            // margin: '1px 25px 0 0',\r\n                                            height: '75px',\r\n                                            border: '2px solid purple',\r\n                                            borderRadius: '5px',\r\n                                            padding: '3px',\r\n                                            width: '100%',\r\n                                            marginTop: '12px',\r\n                                            backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                            // flex: '1',\r\n                                            // flexDirection: 'column',\r\n                                            //  width: '172px'\r\n                                        }}>\r\n\r\n                                        <MouseOverPopover tooltip={\r\n                                            <div style={{ padding: '6px' }}>\r\n                                                Change settings for the top row of plants functionality\r\n                                            </div>\r\n                                        }>\r\n                                            <div\r\n                                                style={{ fontWeight: 'bold', display: 'flex', justifyContent: 'center', marginBottom: '3px', marginTop: '-3px' }}\r\n                                            >\r\n                                                Top Plant Settings\r\n                                            </div>\r\n                                        </MouseOverPopover>\r\n\r\n\r\n                                        {/* Max / Clear Autos */}\r\n                                        <div\r\n                                            style={{ display: 'flex', marginTop: '4px', }}\r\n                                        >\r\n                                            {/* Max all autos */}\r\n                                            <div style={{\r\n                                                display: 'flex', alignItems: 'center',\r\n                                                margin: '0 12px 0 0'\r\n                                            }}>\r\n                                                {/* <div>Max All Autos</div> */}\r\n\r\n                                                <MouseOverPopover opacity='0.95' tooltip={\r\n                                                    <div style={{ padding: '6px' }}>\r\n                                                        {`Sets each plants' auto to the \"Unlocked Autos\" value`}\r\n                                                    </div>\r\n                                                }>\r\n                                                    <button onClick={(e) => {\r\n                                                        let temp = Array(20).fill(numSimulatedAutos);\r\n                                                        setPlantAutos(temp);\r\n                                                        ReactGA.event({\r\n                                                            category: \"farming_interaction\",\r\n                                                            action: `max_auto`,\r\n                                                            label: `max_auto`,\r\n                                                        })\r\n                                                    }}>Max Autos</button>\r\n                                                </MouseOverPopover>\r\n                                            </div>\r\n                                            <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                                <MouseOverPopover opacity='0.95' tooltip={\r\n                                                    <div style={{ padding: '6px' }}>\r\n                                                        {`Sets each plants' auto to 0`}\r\n                                                    </div>\r\n                                                }>\r\n                                                    <button onClick={(e) => {\r\n                                                        let temp = Array(20).fill(0);\r\n                                                        setPlantAutos(temp);\r\n                                                        ReactGA.event({\r\n                                                            category: \"farming_interaction\",\r\n                                                            action: `clear_auto`,\r\n                                                            label: `clear_auto`,\r\n                                                        })\r\n                                                    }}>Clear Autos</button>\r\n                                                </MouseOverPopover>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div style={{ display: 'flex', marginTop: '6px' }}>\r\n                                            <MouseOverPopover tooltip={\r\n                                                <div>\r\n                                                    Enabes\r\n                                                </div>\r\n                                            }\r\n                                            >\r\n\r\n                                                <div style={{ width: '260px' }}>Time Step Mode</div>\r\n                                            </MouseOverPopover>\r\n                                            <input type=\"checkbox\" checked={timeStepMode}\r\n                                                aria-label='Specify if time step mode should be used instead of num auto'\r\n                                                id=\"enable timestep mode for plants\"\r\n                                                onChange={(e) => {\r\n\r\n                                                    setTimeStepMode(e.target.checked ? 1 : 0);\r\n                                                    ReactGA.event({\r\n                                                        category: \"farming_interaction\",\r\n                                                        action: `changed_show_timeStep`,\r\n                                                        label: `${e.target.checked}`,\r\n                                                    })\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n\r\n                        {/* Various settings */}\r\n                        <div\r\n                            style={{\r\n                                display: 'flex',\r\n                                alignSelf: 'flex-start',\r\n                                flexDirection: 'column',\r\n                                width: '97%',\r\n\r\n                            }}\r\n                        >\r\n\r\n                            <div\r\n                                className='importantText'\r\n                                style={{\r\n                                    border: \"1px solid rgba(255,255,255,0.8)\",\r\n                                    backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                    padding: '3px', width: '100%', marginBottom: '12px',\r\n                                }}\r\n                            >\r\n\r\n\r\n\r\n                                <div style={{ display: 'flex' }}>\r\n\r\n                                    <MouseOverPopover tooltip={\r\n                                        <div style={{ padding: '6px' }}>\r\n                                            How many parallel simulations to run, higher number means more CPU usage but quicker result (diminishing returns with more threads)\r\n                                        </div>\r\n                                    }>\r\n                                        <div>\r\n                                            Num threads to use for calculating\r\n                                        </div>\r\n                                    </MouseOverPopover>\r\n\r\n                                    <select\r\n                                        className='importantText'\r\n                                        aria-label='Specify how many threads to use for calculations'\r\n                                        style={{ maxWidth: '144px', marginLeft: '12px', backgroundColor: '#171717', borderRadius: '4px' }}\r\n                                        onChange={\r\n                                            (e) => {\r\n                                                setNumThreads(Number(e.target.value));\r\n                                                ReactGA.event({\r\n                                                    category: \"farming_interaction\",\r\n                                                    action: `changed_num_threads`,\r\n                                                    label: `${e.target.value}`,\r\n                                                    value: Number(e.target.value)\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                        value={numThreads + ''}\r\n                                    >\r\n                                        <option id=\"1 thread calculation\" value=\"1\">1</option>\r\n                                        <option id=\"2 thread calculations\" value=\"2\">2</option>\r\n                                        <option id=\"3 thread calculations\" value=\"3\">3</option>\r\n                                        <option id=\"4 thread calculations\" value=\"4\">4</option>\r\n                                        <option id=\"5 thread calculations\" value=\"5\">5</option>\r\n                                        <option id=\"6 thread calculations\" value=\"6\">6</option>\r\n                                        <option id=\"7 thread calculations\" value=\"7\">7</option>\r\n                                        <option id=\"8 thread calculations\" value=\"8\">8</option>\r\n                                        <option id=\"9 thread calculations\" value=\"9\">9</option>\r\n                                        <option id=\"10 thread calculations\" value=\"10\">10</option>\r\n                                        <option id=\"11 thread calculations\" value=\"11\">11</option>\r\n                                        <option id=\"12 thread calculations\" value=\"12\">12</option>\r\n                                    </select>\r\n                                </div>\r\n\r\n                                {/* Show HP + Fry */}\r\n                                <div\r\n                                    style={{ display: 'flex', flexDirection: 'column', marginTop: '4px' }}\r\n                                >\r\n                                    <div style={{ display: 'flex' }}>\r\n                                        <div style={{ width: '260px' }}>Show Fries On Graph</div>\r\n                                        <input type=\"checkbox\" checked={showFries}\r\n                                            aria-label='Specify if fries should be displayed on the graph'\r\n                                            id=\"enable display of fries on the graph\"\r\n                                            onChange={(e) => {\r\n                                                setShowFries(e.target.checked ? 1 : 0);\r\n                                                ReactGA.event({\r\n                                                    category: \"farming_interaction\",\r\n                                                    action: `changed_show_fry`,\r\n                                                    label: `${e.target.checked}`,\r\n                                                })\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div style={{ display: 'flex', marginBottom: '' }}>\r\n                                        <div style={{ width: '260px' }}>Show HP On Graph</div>\r\n                                        <input type=\"checkbox\" checked={showHP}\r\n                                            aria-label='Specify if healthy potatoes should be displayed on the graph'\r\n                                            id=\"enable display of HP on the graph\"\r\n                                            onChange={(e) => {\r\n                                                setShowHP(e.target.checked ? 1 : 0);\r\n                                                ReactGA.event({\r\n                                                    category: \"farming_interaction\",\r\n                                                    action: `changed_show_HP`,\r\n                                                    label: `${e.target.checked}`,\r\n                                                })\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                                <div style={{ display: 'flex' }}>\r\n\r\n                                    <MouseOverPopover tooltip={\r\n                                        <div style={{ padding: '6px' }}>\r\n                                            Whether the simulation should automatically buy Farming Shop page 1 (Plant Boost Corner) upgrades. (This is an ascension perk)\r\n                                        </div>\r\n                                    }>\r\n                                        <div style={{ width: '260px' }}>\r\n                                            Auto purchase Page 1 (PBC)\r\n                                        </div>\r\n                                    </MouseOverPopover>\r\n\r\n\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        aria-label='Specify if page 1 upgrades should be auto bought'\r\n                                        onChange={(e) => {\r\n                                            setAutoBuyPBC(e.target.checked ? 1 : 0);\r\n                                            ReactGA.event({\r\n                                                category: \"farming_interaction\",\r\n                                                action: `changed_auto_pbc`,\r\n                                                label: `${e.target.checked}`,\r\n                                            })\r\n                                        }}\r\n                                        id=\"enable auto purchase of page 1 upgrades\"\r\n                                        checked={!!autoBuyPBC}\r\n                                        value={!!autoBuyPBC}\r\n                                    />\r\n                                </div>\r\n                                {/* Lock in checkbox */}\r\n                                <div style={{ display: 'flex' }}>\r\n\r\n                                    <MouseOverPopover tooltip={\r\n                                        <div style={{ padding: '6px' }}>\r\n                                            If checked, generates only possible auto distributions from your `Num Autos` selected above. Meaning if you have set 4 autos for P1, it will force best `AFK` to have a minimum of 4 autos in P1. Only applies for `Calculate AFK`\r\n                                        </div>\r\n                                    }>\r\n                                        <div style={{ width: '260px' }}>\r\n                                            Lock in above `Num Autos`\r\n                                        </div>\r\n                                    </MouseOverPopover>\r\n\r\n\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        aria-label='Specify minimum number of autos per plant'\r\n                                        id=\"enable forcing of minimum number of autos per plant\"\r\n                                        onChange={(e) => {\r\n                                            setLockCustomAuto(e.target.checked ? 1 : 0);\r\n                                            ReactGA.event({\r\n                                                category: \"farming_interaction\",\r\n                                                action: `changed_lock_auto`,\r\n                                                label: `${e.target.checked}`,\r\n                                            })\r\n                                        }}\r\n                                        checked={!!lockCustomAuto}\r\n                                        value={!!lockCustomAuto}\r\n                                    />\r\n                                </div>\r\n                                {/* Ignore current potion, force it always on */}\r\n                                <div style={{ display: 'flex' }}>\r\n\r\n                                    <MouseOverPopover tooltip={\r\n                                        <div style={{ padding: '6px' }}>\r\n                                            If checked, assums plant rank EXP + 50% for the whole run, otherwise uses the remaining potion time in your save\r\n                                        </div>\r\n                                    }>\r\n                                        <div style={{ width: '260px' }}>\r\n                                            Plant Rank Potion Force On\r\n                                        </div>\r\n                                    </MouseOverPopover>\r\n\r\n\r\n                                    <input\r\n                                        aria-label='Specify if a farming potion should be considered for an entire run'\r\n                                        id=\"enable plant potion considered on entire run\"\r\n                                        type=\"checkbox\"\r\n                                        onChange={(e) => {\r\n                                            setForceRankPotion(e.target.checked ? 1 : 0);\r\n                                            ReactGA.event({\r\n                                                category: \"farming_interaction\",\r\n                                                action: `changed_potion_rank`,\r\n                                                label: `${e.target.checked}`,\r\n                                            })\r\n                                        }}\r\n                                        checked={!!forceRankPotion}\r\n                                        value={!!forceRankPotion}\r\n                                    />\r\n                                </div>\r\n                                <div style={{ display: 'flex', alignItems: 'center', }}>\r\n                                    <div style={{ width: '260px' }}>\r\n                                        Y-Axis Scale\r\n                                    </div>\r\n                                    <button\r\n                                        onClick={(e) => {\r\n                                            setYScale(yScale === 'auto' ? `Log` : 'auto')\r\n                                        }}\r\n                                    >\r\n                                        {yScale === 'Log' ? `Log` : 'Linear'}\r\n                                    </button>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            {/* Timer Stuff */}\r\n                            <div\r\n                                className='importantText'\r\n                                style={{\r\n                                    margin: '0 0 0 0',\r\n                                    border: \"1px solid rgba(255,255,255,0.8)\",\r\n                                    backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                    padding: '3px',\r\n                                    width: '100%',\r\n\r\n                                }}\r\n                            >\r\n                                <h3\r\n                                    style={{\r\n                                        marginBottom: '6px',\r\n                                        marginTop: '0',\r\n                                        display: 'flex',\r\n                                        justifyContent: 'center'\r\n                                    }}\r\n                                >\r\n                                    Timer\r\n                                </h3>\r\n                                <div>\r\n                                    <Timer timeCompleted={timeCompleted} />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div\r\n                                className={openedInstructionsRunTime ? '' : 'borderToFadeInAndOutRed'}\r\n                                style={{ margin: '12px auto', borderRadius: '6px', padding: '6px' }}>\r\n                                <button onClick={(e) => {\r\n                                    setShowInstructions(!showInstructions);\r\n                                    setOpenedInstructions(true);\r\n                                }}>{showInstructions ? `Hide Instructions` : `Show Instructions`}</button>\r\n                            </div>\r\n\r\n\r\n                            <div\r\n                                className={(showInstructions ? 'elementExpandHeight' : 'elementCollapseHeight') + ' importantText'}\r\n                                style={{\r\n                                    margin: '0 0 0 0',\r\n                                    border: showInstructionsBorder ? \"1px solid rgba(255,255,255,0.8)\" : '',\r\n                                    backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                    padding: showInstructionsBorder ? '3px' : '',\r\n                                    width: '100%',\r\n                                    overflow: 'hidden'\r\n                                }}>\r\n                                <h1 style={{ fontSize: '18px', margin: '', textAlign: 'center' }}>Farm Page Explanation / Guide</h1>\r\n                                <div style={{ marginBottom: \"6px\" }}>{`1. Hover over any text your are unsure of to see a description`}</div>\r\n                                <div style={{ marginBottom: \"6px\" }}> {`2. Enter 'Hours to calculate' corresponding to how many more hours you want your current run to last`}</div>\r\n                                <div style={{ marginBottom: \"6px\" }}> {`3. Calculate AFK suggests number of plants to place in each auto`}</div>\r\n                                <div style={{ marginBottom: \"6px\" }}> {`4. Calculate Step suggests time to run each plant (starting from highest) with all autos in order`}</div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div style={{\r\n\r\n                        maxWidth: 'calc(100% - 337px)',\r\n                        minHeight: '100px',\r\n                        display: 'flex',\r\n                        flex: 1,\r\n                        flexDirection: 'column',\r\n                        alignItems: 'flex-start',\r\n                        marginLeft: '12px',\r\n                        backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                        fill: '#fffff!important'\r\n                    }}>\r\n\r\n                        {(farmCalcProgress.current === farmCalcProgress.max && farmCalcProgress.current !== 0 && bestPlantCombo.prod && calcDone) && (\r\n                            <>\r\n                                {/* best potato */}\r\n                                {calcAFK && (\r\n                                    <div className='calcResult'\r\n                                        style={{\r\n                                            width: `calc(200px + ${tempFuture.plants.length * 115}px)`,\r\n                                            maxWidth: 'calc(100% - 6px)',\r\n                                            backgroundColor: 'rgba(255,255,255,0.05)'\r\n                                        }}>\r\n                                        <>\r\n                                            {/* Top Header */}\r\n                                            <div className='calcHeader'>\r\n                                                <div\r\n                                                    style={{ width: '200px', display: 'flex', flex: '1' }}\r\n                                                >\r\n                                                    <div style={{\r\n                                                        display: 'flex',\r\n                                                        justifyContent: 'flex-end',\r\n                                                        alignItems: 'center',\r\n                                                        flex: '1',\r\n                                                        paddingRight: '6px',\r\n                                                        borderRight: '2px solid rgba(0, 119, 255, 0.563)',\r\n                                                        borderBottom: '2px solid rgba(0, 119, 255, 0.563)',\r\n                                                    }}>Goal</div>\r\n                                                </div>\r\n                                                <div\r\n                                                    style={{\r\n                                                        width: 'calc(100% - 200px)',\r\n                                                        display: 'flex',\r\n                                                        flexDirection: 'column'\r\n                                                    }}\r\n                                                >\r\n                                                    <div style={{ textAlign: 'center' }}>Number of Autos to assign per plant</div>\r\n                                                    <div\r\n                                                        style={{ display: 'flex', width: '100%' }}\r\n                                                    >\r\n\r\n                                                        {bestPlantCombo.pot.map((val, index) => {\r\n                                                            return (\r\n                                                                <div className='calcHeaderPlantTab' key={index} style={{ borderRight: index === 0 ? '' : '1px solid rgba(0, 119, 255, 0.563)' }}>\r\n                                                                    {`P${index + 1}`}\r\n                                                                </div>\r\n                                                            )\r\n                                                        }).reverse()}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div style={{ display: 'flex', borderBottom: '2px solid rgba(0, 119, 255, 0.563)' }}>\r\n                                                <div style={{\r\n                                                    width: '200px',\r\n                                                    display: 'flex',\r\n                                                    flexDirection: 'column',\r\n                                                }}>\r\n\r\n                                                    <div className='calcInfo'>\r\n                                                        <div>\r\n                                                            Best Potatoe Generation\r\n                                                        </div>\r\n                                                        <div>\r\n                                                            {`${100}% Fries`}:\r\n                                                        </div>\r\n                                                    </div>\r\n\r\n\r\n                                                    <div className='futurePicExplanation'>\r\n                                                        <div>Next PIC **</div>\r\n                                                        {/* <div>\r\n                                                            Next PIC after {calcedFutureTime} hours + x hours\r\n                                                        </div>\r\n                                                        <div>\r\n                                                            with {numSimulatedAutos} autos per plant\r\n                                                        </div> */}\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                {bestPlantCombo.pot.map((val, index) => {\r\n                                                    return (\r\n                                                        <div className='suggestionHolder' key={index} style={{ borderRight: index === 0 ? '' : '1px solid rgba(0, 119, 255, 0.563)' }}>\r\n                                                            <MouseOverPopover extraClasses={'suggestionHolder'} key={'popover' + index} tooltip={\r\n                                                                <div>\r\n                                                                    <div>\r\n                                                                        <div>\r\n                                                                            Show how many PIC levels are gained (if any) and the time to hit the NEXT pic with your MAX num autos used\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            }>\r\n\r\n                                                                <div className='autoPicSuggestion'>\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            display: 'flex',\r\n                                                                            justifyContent: 'center'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {`${val} autos`}\r\n                                                                    </div>\r\n                                                                    {bestPlantCombo.bestPot.result.plants[index].picIncrease > 0 && (\r\n                                                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', }}>\r\n\r\n                                                                            <div\r\n                                                                                style={{\r\n                                                                                    margin: '-6px 0 -2px -3px',\r\n                                                                                    fontSize: '22px'\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                +\r\n                                                                            </div>\r\n                                                                            <div\r\n                                                                                style={{\r\n                                                                                    margin: '-6px 2px -2px 0',\r\n                                                                                    fontSize: '22px',\r\n                                                                                    display: 'flex',\r\n                                                                                    alignContent: 'center'\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                {\r\n                                                                                    (bestPlantCombo.bestPot.result.plants[index].prestige + bestPlantCombo.bestPot.result.plants[index].picIncrease)\r\n                                                                                    - bestPlantCombo.bestPot.result.plants[index].prestige\r\n                                                                                }\r\n                                                                            </div>\r\n                                                                            {/* <img\r\n                                                                             style={{ height: '24px', width: '24px', marginTop: '-4px', position: 'relative' }}\r\n                                                                             alt='prestige star, yellow star in a red/orange circle'\r\n                                                                            \r\n                                                                             src={PrestigeStar}\r\n                                                                            /> */}\r\n                                                                            <div style={{ height: '24px', width: '24px', marginTop: '-4px', position: 'relative' }}>\r\n                                                                                <Image\r\n                                                                                    alt='prestige star, yellow star in a red/orange circle'\r\n                                                                                    fill\r\n                                                                                    src={PrestigeStar}\r\n                                                                                    unoptimized={true}\r\n                                                                                />\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    )}\r\n                                                                </div>\r\n\r\n                                                                <div className='futurePicHolder'>\r\n                                                                    {`${helper.secondsToString(farmingHelper.calcTimeTillPrestige(\r\n                                                                        bestPlantCombo.bestPot.result.plants[index],\r\n                                                                        {\r\n                                                                            ...bestPlantCombo.bestPot.result.result.finalModifiers,\r\n                                                                            // numAuto: bestPlantCombo.bestPic.result.combo[index]\r\n                                                                            numAuto: numSimulatedAutos\r\n                                                                        }\r\n                                                                    ).remainingTime)\r\n                                                                        }`}\r\n                                                                </div>\r\n                                                            </MouseOverPopover>\r\n                                                        </div>\r\n                                                    )\r\n                                                }).reverse()}\r\n                                            </div>\r\n\r\n                                            {/* Gray seperater */}\r\n                                            <div className='graySeperator' style={{ width: `calc(200px + ${tempFuture.plants.length * 115}px)` }}>\r\n                                                <div style={{ width: '200px', height: '6px', boxSizing: 'border-box', borderRight: '2px solid rgba(0, 119, 255, 0.563)' }}></div>\r\n                                                {bestPlantCombo.pot.map((val, index) => {\r\n                                                    return <div key={index} style={{ boxSizing: 'border-box', height: '6px', width: '115px', borderRight: index === 0 ? '' : '1px solid rgba(0, 119, 255, 0.563)' }} />\r\n                                                }).reverse()}\r\n                                            </div>\r\n\r\n\r\n                                            {/* best raw pic levels */}\r\n                                            <div style={{ display: 'flex', borderBottom: '2px solid rgba(0, 119, 255, 0.563)' }}>\r\n                                                <div style={{\r\n                                                    width: '200px',\r\n                                                    display: 'flex',\r\n                                                    flexDirection: 'column',\r\n                                                }}>\r\n\r\n                                                    <div className='calcInfo' >\r\n                                                        <div>\r\n                                                            Most PIC (+{`${bestPlantCombo.bestPic.result.picStats.picLevel} -> ${helper.roundTwoDecimal(bestPlantCombo.bestPic.result.picStats.picPercent * 100)}%`})\r\n                                                        </div>\r\n                                                        <div>\r\n                                                            {` ${helper.roundTwoDecimal(\r\n                                                                mathHelper.divideDecimal(bestPlantCombo.bestPic.finalFry, bestPlantCombo.bestProd.finalFry).toNumber()\r\n                                                                * 100)\r\n                                                                }% Fries`}\r\n                                                        </div>\r\n\r\n\r\n                                                    </div>\r\n\r\n                                                    <div className='futurePicExplanation' >\r\n                                                        <div> Next PIC ** </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                {bestPlantCombo.pic.map((val, index) => {\r\n                                                    return (\r\n                                                        <div className='suggestionHolder' key={index} style={{ borderRight: index === 0 ? '' : '1px solid rgba(0, 119, 255, 0.563)' }}>\r\n                                                            <MouseOverPopover extraClasses={'suggestionHolder'} key={'popover' + index} tooltip={\r\n                                                                <div>\r\n                                                                    <div>\r\n                                                                        <div>\r\n                                                                            Show how many PIC levels are gained (if any) and the time to hit the NEXT pic with your MAX num autos used\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            }>\r\n\r\n                                                                <div className='autoPicSuggestion'>\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            display: 'flex',\r\n                                                                            justifyContent: 'center'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {`P${index + 1}: ${val} autos`}\r\n                                                                    </div>\r\n                                                                    {bestPlantCombo.bestPic.result.plants[index].picIncrease > 0 && (\r\n                                                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', }}>\r\n                                                                            <div\r\n                                                                                style={{\r\n                                                                                    margin: '-6px 0 -2px -3px',\r\n                                                                                    fontSize: '22px'\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                +\r\n                                                                            </div>\r\n                                                                            <div\r\n                                                                                style={{\r\n                                                                                    margin: '-6px 2px -2px 0',\r\n                                                                                    fontSize: '22px',\r\n                                                                                    display: 'flex',\r\n                                                                                    alignContent: 'center'\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                {\r\n                                                                                    (bestPlantCombo.bestPic.result.plants[index].prestige + bestPlantCombo.bestPic.result.plants[index].picIncrease)\r\n                                                                                    - bestPlantCombo.bestPic.result.plants[index].prestige\r\n                                                                                }\r\n                                                                            </div>\r\n                                                                            {/* <img \r\n                                                                            alt='prestige star, yellow star in a red/orange circle'\r\n                                                                            src={PrestigeStar}\r\n                                                                            style={{ height: '24px', width: '24px', marginTop: '-4px', position: 'relative' }}\r\n                                                                            /> */}\r\n                                                                            <div style={{ height: '24px', width: '24px', marginTop: '-4px', position: 'relative' }}>\r\n                                                                                <Image\r\n                                                                                    alt='prestige star, yellow star in a red/orange circle'\r\n                                                                                    fill\r\n                                                                                    src={PrestigeStar}\r\n                                                                                    unoptimized={true}\r\n                                                                                />\r\n                                                                            </div>\r\n                                                                        </div>\r\n\r\n                                                                    )}\r\n\r\n                                                                </div>\r\n\r\n                                                                <div className='futurePicHolder'>\r\n                                                                    {`${helper.secondsToString(farmingHelper.calcTimeTillPrestige(\r\n                                                                        bestPlantCombo.bestPic.result.plants[index],\r\n                                                                        {\r\n                                                                            ...bestPlantCombo.bestPic.result.result.finalModifiers,\r\n                                                                            numAuto: numSimulatedAutos\r\n                                                                        }\r\n                                                                    ).remainingTime)\r\n                                                                        }`}\r\n                                                                </div>\r\n                                                            </MouseOverPopover>\r\n                                                        </div>\r\n                                                    )\r\n                                                }).reverse()}\r\n                                            </div>\r\n                                            <div style={{ width: '100%', textAlign: 'center', padding: '2px 0' }}>\r\n                                                {`**Note: for \"Next PIC\" value rows, this indeciates the number of hours PAST your current \"Hours to Calculate\" assuming ${numSimulatedAutos} autos per plant`}\r\n                                            </div>\r\n                                        </>\r\n                                    </div>\r\n                                )}\r\n\r\n\r\n                                {/* Best step by step breakdown */}\r\n                                {calcStep && (\r\n                                    <div className='calcResult' style={{ width: `calc(200px + ${tempFuture.plants.length * 115}px)`, maxWidth: 'calc(100% - 6px)' }}>\r\n                                        <>\r\n                                            {/* Top Header */}\r\n                                            <div className='calcHeader'>\r\n                                                <div\r\n                                                    style={{ width: '200px', display: 'flex', flex: '1' }}\r\n                                                >\r\n                                                    <div style={{\r\n                                                        display: 'flex',\r\n                                                        justifyContent: 'flex-end',\r\n                                                        alignItems: 'center',\r\n                                                        flex: '1',\r\n                                                        paddingRight: '6px',\r\n                                                        borderRight: '2px solid rgba(0, 119, 255, 0.563)',\r\n                                                        borderBottom: '2px solid rgba(0, 119, 255, 0.563)',\r\n                                                    }}>Goal</div>\r\n                                                </div>\r\n                                                <div\r\n                                                    style={{\r\n                                                        width: 'calc(100% - 200px)',\r\n                                                        display: 'flex',\r\n                                                        flexDirection: 'column'\r\n                                                    }}\r\n                                                >\r\n                                                    <div style={{ textAlign: 'center' }}>{`Time per plant with ${numSimulatedAutos} autos`}</div>\r\n                                                    <div\r\n                                                        style={{ display: 'flex', width: '100%' }}\r\n                                                    >\r\n\r\n                                                        {bestPlantCombo.pot.map((val, index) => {\r\n                                                            return (\r\n                                                                <div className='calcHeaderPlantTab' key={index} style={{ borderRight: index === 0 ? '' : '1px solid rgba(0, 119, 255, 0.563)' }}>\r\n                                                                    {`P${index + 1}`}\r\n                                                                </div>\r\n                                                            )\r\n                                                        }).reverse()}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n\r\n\r\n                                            <div style={{ display: 'flex', borderBottom: '2px solid rgba(0, 119, 255, 0.563)' }}>\r\n                                                <div style={{\r\n                                                    width: '200px',\r\n                                                    display: 'flex',\r\n                                                    flexDirection: 'column',\r\n                                                }}>\r\n                                                    <div className='calcInfo'>\r\n                                                        <div>\r\n                                                            Best order, 100% Fries\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className='futurePicExplanation'>\r\n                                                        <div>\r\n                                                            Next PIC **\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n\r\n                                                {bestPlantCombo.bestPot.result.result.steps.map((val, index) => {\r\n                                                    return (\r\n                                                        <div className='suggestionHolder' key={index} style={{ borderRight: index !== (bestPlantCombo.bestPot.result.result.steps.length - 1) ? '1px solid rgba(0, 119, 255, 0.563)' : '' }}>\r\n                                                            <MouseOverPopover extraClasses={'suggestionHolder'} key={'popover' + index} tooltip={\r\n                                                                <div>\r\n                                                                    <div>\r\n                                                                        <div>\r\n                                                                            Show how many PIC levels are gained (if any) and the time to hit the NEXT pic with your MAX num autos used\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            }>\r\n\r\n                                                                <div className='autoPicSuggestion'>\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            display: 'flex',\r\n                                                                            justifyContent: 'center'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {`${val.time > secondsHour ? helper.secondsToString(val.time) : helper.secondsToString(val.time)}`}\r\n                                                                    </div>\r\n                                                                    {bestPlantCombo.bestPot.result.plants[bestPlantCombo.bestPot.result.result.steps.length - index - 1].picIncrease > 0 && (\r\n                                                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', }}>\r\n\r\n                                                                            <div\r\n                                                                                style={{\r\n                                                                                    margin: '-6px 0 -2px -3px',\r\n                                                                                    fontSize: '22px'\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                +\r\n                                                                            </div>\r\n                                                                            <div\r\n                                                                                style={{\r\n                                                                                    margin: '-6px 2px -2px 0',\r\n                                                                                    fontSize: '22px',\r\n                                                                                    display: 'flex',\r\n                                                                                    alignContent: 'center'\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                {\r\n                                                                                    (bestPlantCombo.bestPot.result.plants[bestPlantCombo.bestPot.result.result.steps.length - index - 1].prestige + bestPlantCombo.bestPot.result.plants[bestPlantCombo.bestPot.result.result.steps.length - index - 1].picIncrease)\r\n                                                                                    - bestPlantCombo.bestPot.result.plants[bestPlantCombo.bestPot.result.result.steps.length - index - 1].prestige\r\n                                                                                }\r\n                                                                            </div>\r\n                                                                            {/* <img \r\n                                                                            alt='prestige star, yellow star in a red/orange circle'\r\n                                                                            src={PrestigeStar}\r\n                                                                            style={{ height: '24px', width: '24px', marginTop: '-4px', position: 'relative' }}\r\n                                                                            /> */}\r\n                                                                            <div style={{ height: '24px', width: '24px', marginTop: '-4px', position: 'relative' }}>\r\n                                                                                <Image\r\n                                                                                    alt='prestige star, yellow star in a red/orange circle'\r\n                                                                                    fill\r\n                                                                                    src={PrestigeStar}\r\n                                                                                    unoptimized={true}\r\n                                                                                />\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    )}\r\n                                                                </div>\r\n\r\n                                                                <div className='futurePicHolder'>\r\n                                                                    {`${helper.secondsToString(farmingHelper.calcTimeTillPrestige(\r\n                                                                        bestPlantCombo.bestPot.result.plants[bestPlantCombo.bestPot.result.result.steps.length - index - 1],\r\n                                                                        {\r\n                                                                            ...bestPlantCombo.bestPot.result.result.finalModifiers,\r\n                                                                            // numAuto: bestPlantCombo.bestPic.result.combo[index]\r\n                                                                            numAuto: numSimulatedAutos\r\n                                                                        }\r\n                                                                    ).remainingTime)\r\n                                                                        }`}\r\n                                                                </div>\r\n                                                            </MouseOverPopover>\r\n                                                        </div>\r\n                                                    )\r\n                                                })}\r\n                                            </div>\r\n\r\n                                            {/* Gray seperater */}\r\n                                            <div className='graySeperator' style={{ width: `calc(200px + ${tempFuture.plants.length * 115}px)` }}>\r\n                                                <div style={{ width: '200px', height: '6px', boxSizing: 'border-box', borderRight: '2px solid rgba(0, 119, 255, 0.563)' }}></div>\r\n                                                {bestPlantCombo.pot.map((val, index) => {\r\n                                                    return <div key={index} style={{ boxSizing: 'border-box', height: '6px', width: '115px', borderRight: index === 0 ? '' : '1px solid rgba(0, 119, 255, 0.563)' }} />\r\n                                                }).reverse()}\r\n                                            </div>\r\n\r\n\r\n                                            {/* Best PIC */}\r\n                                            {bestPlantCombo.bestPic.pic > 0 && (\r\n                                                <div style={{ display: 'flex', borderBottom: '2px solid rgba(0, 119, 255, 0.563)' }}>\r\n                                                    <div style={{\r\n                                                        width: '200px',\r\n                                                        display: 'flex',\r\n                                                        flexDirection: 'column',\r\n                                                    }}>\r\n                                                        <div className='calcInfo' >\r\n                                                            <div>\r\n                                                                Most PIC (+{`${bestPlantCombo.bestPic.result.picStats.picLevel} -> ${helper.roundTwoDecimal(bestPlantCombo.bestPic.result.picStats.picPercent * 100)}%`})\r\n                                                            </div>\r\n                                                            <div>\r\n                                                                {` ${helper.roundTwoDecimal(\r\n                                                                    mathHelper.divideDecimal(bestPlantCombo.bestPic.finalFry, bestPlantCombo.bestProd.finalFry).toNumber()\r\n                                                                    * 100)\r\n                                                                    }% Fries`}:\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                        <div className='futurePicExplanation' >\r\n                                                            <div>\r\n                                                                Next PIC **\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                    </div>\r\n                                                    {bestPlantCombo.bestPic.result.result.steps.map((val, index) => {\r\n\r\n                                                        return (\r\n                                                            <div className='suggestionHolder' key={index} style={{ borderRight: index !== (bestPlantCombo.bestPot.result.result.steps.length - 1) ? '1px solid rgba(0, 119, 255, 0.563)' : '' }}>\r\n                                                                <MouseOverPopover key={'popover' + index} tooltip={\r\n                                                                    <div>\r\n                                                                        <div>\r\n                                                                            <div>\r\n                                                                                Show how many PIC levels are gained (if any) and the time to hit the NEXT pic with your MAX num autos used\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                } >\r\n                                                                    <div className='autoPicSuggestion'>\r\n                                                                        {\r\n                                                                            `${val.time > secondsHour ? helper.secondsToString(val.time) : helper.secondsToString(val.time)}`\r\n                                                                        }\r\n                                                                        {bestPlantCombo.bestPic.result.plants[bestPlantCombo.bestPic.result.plants.length - 1 - index].picIncrease > 0 && (\r\n                                                                            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', }}>\r\n                                                                                <div\r\n                                                                                    style={{\r\n                                                                                        margin: '-6px 0 -2px -3px',\r\n                                                                                        fontSize: '22px'\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    +\r\n                                                                                </div>\r\n                                                                                <div\r\n                                                                                    style={{\r\n                                                                                        margin: '-6px 2px -2px 0',\r\n                                                                                        fontSize: '22px',\r\n                                                                                        display: 'flex',\r\n                                                                                        alignContent: 'center'\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    {\r\n                                                                                        (bestPlantCombo.bestPic.result.plants[bestPlantCombo.bestPic.result.plants.length - 1 - index].prestige + bestPlantCombo.bestPic.result.plants[bestPlantCombo.bestPic.result.plants.length - 1 - index].picIncrease)\r\n                                                                                        - bestPlantCombo.bestPic.result.plants[bestPlantCombo.bestPic.result.plants.length - 1 - index].prestige\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                                <div style={{ height: '24px', width: '24px', marginTop: '-4px', position: 'relative' }}>\r\n                                                                                    <Image\r\n                                                                                        alt='prestige star, yellow star in a red/orange circle'\r\n                                                                                        fill\r\n                                                                                        src={PrestigeStar}\r\n                                                                                        unoptimized={true}\r\n                                                                                    />\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                        )}\r\n                                                                    </div>\r\n\r\n\r\n                                                                    <div className='futurePicHolder'>\r\n                                                                        {`${helper.secondsToString(farmingHelper.calcTimeTillPrestige(\r\n                                                                            bestPlantCombo.bestPic.result.plants[bestPlantCombo.bestPic.result.plants.length - 1 - index],\r\n                                                                            {\r\n                                                                                ...bestPlantCombo.bestPic.result.result.finalModifiers,\r\n                                                                                // numAuto: bestPlantCombo.bestPic.result.combo[bestPlantCombo.bestPic.result.plants.length - 1 - index]\r\n                                                                                numAuto: numSimulatedAutos\r\n                                                                            }\r\n                                                                        ).remainingTime)\r\n                                                                            }`}\r\n                                                                    </div>\r\n                                                                </MouseOverPopover>\r\n                                                            </div>\r\n                                                        )\r\n                                                    })}\r\n                                                </div>\r\n                                            )}\r\n                                            <div style={{ width: '100%', textAlign: 'center', padding: '2px 0' }}>\r\n                                                {`**Note: for \"Next PIC\" value rows, this indeciates the number of hours PAST your current \"Hours to Calculate\" assuming ${numSimulatedAutos} autos per plant`}\r\n                                            </div>\r\n                                        </>\r\n                                    </div>\r\n                                )}\r\n\r\n                            </>\r\n                        )}\r\n\r\n                        <div className=\"rainbowLeft\"\r\n                            style={{\r\n                                display: 'flex',\r\n                                flex: 1,\r\n                                flexDirection: 'column',\r\n                                position: 'relative',\r\n                                minHeight: '200px',\r\n                                width: 'calc(100% - 12px)'\r\n\r\n                            }}>\r\n                            {/* Graph stuff */}\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                flex: 1,\r\n                                position: 'absolute',\r\n                                height: '99%',\r\n                                width: '100%',\r\n                                minWidth: '400px',\r\n                                overflow: 'hidden'\r\n                            }}>\r\n                                <Graph\r\n                                    graphObjects={graphObjects}\r\n                                    runningGraphObjects={runningGraphObjects}\r\n                                    showCalc={(farmCalcProgress.current === farmCalcProgress.max && farmCalcProgress.current !== 0 && bestPlantCombo.prod && calcDone)}\r\n                                    yScale={yScale}\r\n                                    bestPic={!!bestPlantCombo?.bestPic?.pic}\r\n                                    expDiff={expDiff}\r\n                                    expDiffFry={expDiffFry}\r\n                                    displayPicPerc={displayPicPerc}\r\n                                    calcDone={calcDone}\r\n                                    calcAFK={calcAFK}\r\n                                    showFries={showFries}\r\n                                    showHP={showHP}\r\n                                    tooManyAuto={tooManyAuto}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default FarmingLanding;","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\Timer.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\gratitude\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\gratitude\\page_content.jsx",["254"],[],"\"use client\"\r\n\r\nimport { isMobile } from 'mobile-device-detect';\r\nimport { useState, useEffect } from 'react';\r\nimport ReactGA from \"react-ga4\";\r\nReactGA.initialize([{\r\n    trackingId: \"G-GGLPK02VH8\",\r\n}]);\r\n\r\nimport Image from 'next/image';\r\nimport Link from 'next/link';\r\n\r\n\r\n\r\n\r\nexport default function Expeditions() {\r\n\r\n    const [mobileMode, setMobileMode] = useState(false);\r\n    useEffect(() => {\r\n        setMobileMode(isMobile);\r\n        if (isMobile) {\r\n            setTimeout(() => {\r\n                var viewport = document.querySelector('meta[name=\"viewport\"]');\r\n                if (viewport) {\r\n                    viewport.content = \"initial-scale=0.1\";\r\n                    viewport.content = \"width=1200\";\r\n                }\r\n            }, 500);\r\n        }\r\n    }, [isMobile]);\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n                flex: '1',\r\n                backgroundColor: 'black',\r\n                position: 'relative',\r\n            }}\r\n        >\r\n            <div style={{\r\n                display: 'flex',\r\n                flex: '1',\r\n                // alignItems: 'center',\r\n                // justifyContent: 'center',\r\n                backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                paddingLeft: '12px'\r\n            }}>\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    alignSelf: 'start',\r\n                    width: '550px',\r\n                    // maxHeight: 'calc(100% - 49px)',\r\n                    margin: '12px 36px 12px 0px', padding: '12px', borderRadius: '12px'\r\n                }}>\r\n                    {/* <div\r\n                        className='importantText'\r\n                        style={{ fontSize: '36px', marginTop: '-6px', marginBottom: '6px' }}\r\n                    >\r\n                        Thank you for supporting the Gameplay Planner\r\n                    </div > */}\r\n                    <div\r\n                        className='importantText'\r\n                        style={{ fontSize: '28px', marginTop: '0px', marginBottom: '6px' }}\r\n                    >\r\n                        Feel free to press the icon below to help keep the planner up for everyone\r\n                    </div >\r\n\r\n\r\n                    <div style={{ margin: '24px auto' }}>\r\n                        <Link href={`https://buy.stripe.com/aEU7w16jwa4X1xu4gh`} style={{ textDecoration: 'none' }}\r\n                            onClick={() => {\r\n                                ReactGA.event({\r\n                                    category: \"donation_interaction\",\r\n                                    action: `click_donate`,\r\n                                    label: `redirect_donation`\r\n                                })\r\n                            }}\r\n                            onMouseDown={(event) => {\r\n                                if (event.button === 1) {\r\n                                    // do something on middle mouse button click\r\n                                    ReactGA.event({\r\n                                        category: \"donation_interaction\",\r\n                                        action: `click_donate`,\r\n                                        label: `redirect_donation`\r\n                                    })\r\n                                }\r\n                            }}\r\n\r\n                        >\r\n                            <div\r\n                                className={`hover`}\r\n                                style={{\r\n                                    height: \"148px\",\r\n                                    width: \"170px\",\r\n                                    marginRight: \"48px\",\r\n                                    borderRadius: \"6px\",\r\n                                }}\r\n                            >\r\n                                <div className={``}\r\n                                    style={{\r\n                                        height: \"80%\",\r\n                                        display: \"flex\",\r\n                                        alignItems: \"center\",\r\n                                        justifyContent: \"center\",\r\n                                        backgroundColor: \"rgba(255,255,255, 0.05)\",\r\n                                        borderTopRightRadius: \"12px\",\r\n                                        borderTopLeftRadius: \"12px\",\r\n                                        padding: \"6px 6px 6px 6px\",\r\n                                        borderTop: \"2px solid rgba(255,255,255,0.8)\",\r\n                                        borderLeft: \"2px solid rgba(255,255,255,0.8)\",\r\n                                        borderRight: \"2px solid rgba(255,255,255,0.8)\",\r\n                                    }}\r\n                                >\r\n                                    <div\r\n                                        style={{\r\n                                            position: \"relative\",\r\n                                            height: \"calc(100% - 12px)\",\r\n                                            width: \"calc(100% - 12px)\",\r\n                                        }}\r\n                                    >\r\n                                        <Image\r\n                                            alt={`navigation item, picture of a donation jar`}\r\n                                            src={`/images/icons/donation-cropped.svg`}\r\n                                            fill\r\n                                            priority\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className={``}\r\n                                    style={{\r\n                                        height: \"20%\",\r\n                                        display: \"flex\",\r\n                                        alignItems: \"center\",\r\n                                        justifyContent: \"center\",\r\n                                        backgroundColor: \"rgba(255,255,255, 0.12)\",\r\n                                        borderBottomRightRadius: \"12px\",\r\n                                        borderBottomLeftRadius: \"12px\",\r\n                                        borderBottom: \"2px solid rgba(255,255,255,0.8)\",\r\n                                        borderLeft: \"2px solid rgba(255,255,255,0.8)\",\r\n                                        borderRight: \"2px solid rgba(255,255,255,0.8)\",\r\n                                    }}\r\n                                >\r\n                                    <div\r\n                                        className=\"importantText\"\r\n                                        style={{\r\n                                            // marginTop: '6px',\r\n                                            fontSize: \"20px\",\r\n                                        }}\r\n                                    >\r\n                                        {`Donations`}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    alignSelf: 'start',\r\n                    width: '750px',\r\n                    // maxHeight: 'calc(100% - 49px)',\r\n                    margin: '12px 36px 12px 0px', padding: '12px', borderRadius: '12px'\r\n                }}>\r\n                    {/* <div\r\n                        className='importantText'\r\n                        style={{ fontSize: '36px', marginTop: '-6px', marginBottom: '6px' }}\r\n                    >\r\n                        Thank you for supporting the Gameplay Planner\r\n                    </div > */}\r\n                    <div\r\n                        className='importantText'\r\n                        style={{ fontSize: '28px', marginTop: '0px', marginBottom: '6px' }}\r\n                    >\r\n                        Want to get in touch or have questions? You can find me in the offical Farmer Against Potatoes Idle discord server\r\n                    </div >\r\n\r\n\r\n                    <div style={{ margin: '24px auto' }}>\r\n                        <Link href={`https://discord.gg/pt8a9Y3mSv`} style={{ textDecoration: 'none' }}\r\n                            onClick={() => {\r\n                                ReactGA.event({\r\n                                    category: \"discord_interaction\",\r\n                                    action: `click_discord`,\r\n                                    label: `redirect_discord`\r\n                                })\r\n                            }}\r\n\r\n                            onMouseDown={(event) => {\r\n                                if (event.button === 1) {\r\n                                    ReactGA.event({\r\n                                        category: \"discord_interaction\",\r\n                                        action: `click_discord`,\r\n                                        label: `redirect_discord`\r\n                                    })\r\n                                }\r\n                            }}\r\n                        >\r\n                            <div\r\n                                className={`hover`}\r\n                                style={{\r\n                                    height: \"148px\",\r\n                                    width: \"170px\",\r\n                                    marginRight: \"48px\",\r\n                                    borderRadius: \"6px\",\r\n                                }}\r\n                            >\r\n                                <div className={``}\r\n                                    style={{\r\n                                        height: \"80%\",\r\n                                        display: \"flex\",\r\n                                        alignItems: \"center\",\r\n                                        justifyContent: \"center\",\r\n                                        backgroundColor: \"rgba(255,255,255, 0.05)\",\r\n                                        borderTopRightRadius: \"12px\",\r\n                                        borderTopLeftRadius: \"12px\",\r\n                                        padding: \"6px 6px 6px 6px\",\r\n                                        borderTop: \"2px solid rgba(255,255,255,0.8)\",\r\n                                        borderLeft: \"2px solid rgba(255,255,255,0.8)\",\r\n                                        borderRight: \"2px solid rgba(255,255,255,0.8)\",\r\n                                    }}\r\n                                >\r\n                                    <div\r\n                                        style={{\r\n                                            position: \"relative\",\r\n                                            height: \"calc(100% - 12px)\",\r\n                                            width: \"calc(100% - 12px)\",\r\n                                        }}\r\n                                    >\r\n                                        <Image\r\n                                            alt={`navigation item, discord logo`}\r\n                                            src={`/images/icons/discord_gray.svg`}\r\n                                            fill\r\n                                            priority\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className={``}\r\n                                    style={{\r\n                                        height: \"20%\",\r\n                                        display: \"flex\",\r\n                                        alignItems: \"center\",\r\n                                        justifyContent: \"center\",\r\n                                        backgroundColor: \"rgba(255,255,255, 0.12)\",\r\n                                        borderBottomRightRadius: \"12px\",\r\n                                        borderBottomLeftRadius: \"12px\",\r\n                                        borderBottom: \"2px solid rgba(255,255,255,0.8)\",\r\n                                        borderLeft: \"2px solid rgba(255,255,255,0.8)\",\r\n                                        borderRight: \"2px solid rgba(255,255,255,0.8)\",\r\n                                    }}\r\n                                >\r\n                                    <div\r\n                                        className=\"importantText\"\r\n                                        style={{\r\n                                            // marginTop: '6px',\r\n                                            fontSize: \"20px\",\r\n                                        }}\r\n                                    >\r\n                                        {`@TheLastSpark`}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Link>\r\n                    </div>\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </div >\r\n    );\r\n}","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\layout.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_content.jsx",["255"],[],"\"use client\"\r\n\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport Image from 'next/image';\r\nimport { useRouter } from 'next/navigation';\r\nimport { isMobile } from 'mobile-device-detect';\r\n\r\nimport './App.css';\r\n\r\nimport DefaultSave from './util/tempSave.json';\r\nimport useLocalStorage from \"use-local-storage\";\r\n\r\nimport pako from 'pako';\r\nimport MouseOverPopover from \"./util/Tooltip.jsx\";\r\n// import infoIcon from '/images/icons/info_lightgray.svg';\r\nimport backgroundImage from '../../public/images/coming_soon.png'\r\n//  /public/images/coming_soon.png';\r\n\r\n// import { GoogleAdSense } from \"nextjs-google-adsense\";\r\nimport ReactGA from \"react-ga4\";\r\nReactGA.initialize([{ trackingId: \"G-GGLPK02VH8\", }]);\r\n\r\nexport default function Home() {\r\n\r\n  const [userData, setUserData] = useLocalStorage('userData', DefaultSave);\r\n  const router = useRouter();\r\n  const stringInputRef = useRef(null);\r\n\r\n  const handleFileUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n    const fileReader = new FileReader();\r\n\r\n    fileReader.onload = (event) => {\r\n      const compressedData = new Uint8Array(event.target.result);\r\n      const decompressedData = pako.inflate(compressedData);\r\n      const textDecoder = new TextDecoder('utf-8');\r\n      const decodedString = textDecoder.decode(decompressedData);\r\n\r\n      const startPosition = decodedString.indexOf('{');\r\n      const endPosition = decodedString.lastIndexOf('}') + 1;\r\n      let jsonString = decodedString.slice(startPosition, endPosition);\r\n\r\n      let infIndex = jsonString.indexOf('Infinity');\r\n\r\n      while (infIndex > 0) {\r\n        jsonString = jsonString.replaceAll('Infinity', '-999');\r\n        infIndex = jsonString.indexOf('Infinity');\r\n      }\r\n\r\n      try {\r\n        const parsedJson = JSON.parse(jsonString);\r\n        setUserData(parsedJson);\r\n        console.log(parsedJson);\r\n        console.log(`trying to redirect`)\r\n        return router.push('/page_selection');\r\n      } catch (error) {\r\n        console.error('Invalid JSON:', error);\r\n      }\r\n    };\r\n\r\n    fileReader.readAsArrayBuffer(file);\r\n  };\r\n\r\n  const [forceOpen, setForceOpen] = useState(false);\r\n\r\n  const aPressed = useRef(false);\r\n  const sPressed = useRef(false);\r\n  const dPressed = useRef(false);\r\n  const fileFlushed = useRef(false);\r\n\r\n  useEffect(() => {\r\n    const callback = (event) => {\r\n\r\n      switch (event.code) {\r\n        case 'KeyA':\r\n          aPressed.current = true;\r\n          break;\r\n        case 'KeyS':\r\n          sPressed.current = true;\r\n          break;\r\n        case 'KeyD':\r\n          dPressed.current = true;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      if (aPressed.current && sPressed.current && dPressed.current && !fileFlushed.current) {\r\n        console.log('flush file');\r\n        fileFlushed.current = true;\r\n\r\n        // create file in browser\r\n        const fileName = \"fapi_save_planner\";\r\n        const json = JSON.stringify(userData, null, 2);\r\n        const blob = new Blob([json], { type: \"application/json\" });\r\n        const href = URL.createObjectURL(blob);\r\n\r\n        // create \"a\" HTLM element with href to file\r\n        const link = document.createElement(\"a\");\r\n        link.href = href;\r\n        link.download = fileName + \".txt\";\r\n        document.body.appendChild(link);\r\n        link.click();\r\n\r\n        // clean up \"a\" element & remove ObjectURL\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(href);\r\n      }\r\n    };\r\n\r\n    const releaseCallback = (event) => {\r\n      switch (event.code) {\r\n        case 'KeyA':\r\n          aPressed.current = false;\r\n          break;\r\n        case 'KeyS':\r\n          sPressed.current = false;\r\n          break;\r\n        case 'KeyD':\r\n          dPressed.current = false;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      if (!aPressed.current && !sPressed.current && !dPressed.current && fileFlushed.current) {\r\n        fileFlushed.current = false;\r\n      }\r\n    }\r\n\r\n    document.addEventListener('keydown', callback);\r\n    document.addEventListener('keyup', releaseCallback);\r\n    return () => {\r\n      document.removeEventListener('keydown', callback);\r\n      document.removeEventListener('keyup', releaseCallback);\r\n    };\r\n  }, [userData]);\r\n\r\n  const [mobileMode, setMobileMode] = useState(false);\r\n  useEffect(() => {\r\n    setMobileMode(isMobile);\r\n  }, [isMobile]);\r\n  \r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        flex: '1',\r\n        backgroundColor: 'rgba(0,0,0,1)',\r\n        position: 'relative',\r\n        paddingLeft: '6px',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n      }}\r\n    >\r\n      <Image\r\n        style={{\r\n          position: 'absolute', top: '0', left: '0', width: '100%', height: '100%', zIndex: '1',\r\n          opacity: '0.3'\r\n        }}\r\n        alt='fullscreen picture of a Farmer Against Potatoes Idle game'\r\n        src={backgroundImage}\r\n        priority={true}\r\n        unoptimized={true}\r\n      />\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          marginTop: mobileMode ? '-20vh' : 'calc(0px - 50vh)',\r\n          zIndex: '2'\r\n        }}\r\n      >\r\n        <MouseOverPopover\r\n          forceOpen={forceOpen}\r\n          setForceOpen={setForceOpen}\r\n          forceXPlacement={'right'}\r\n          tooltip={\r\n            <div\r\n              onMouseEnter={(e) => { if (!forceOpen) setForceOpen(true) }}\r\n              onMouseLeave={(e) => { if (forceOpen) setForceOpen(false) }}\r\n            >\r\n              <h3 style={{ marginTop: '6px', marginBottom: '12px' }}>Your save file can be found at:</h3>\r\n              <div style={{ display: 'flex' }}>\r\n                <div\r\n                  style={{ fontWeight: 'bold', marginRight: '6px' }}>\r\n                  PC:\r\n                </div>\r\n                <div>\r\n                  <div>\r\n                    %LOCALAPPDATA%Low\\Oni Gaming\\Farmer Against Potatoes Idle\\fapi-save.txt\r\n                  </div>\r\n                  <div style={{ textAlign: 'center', fontWeight: 'bold' }}>\r\n                    or you can copy:\r\n                  </div>\r\n                  <div>\r\n                    %LOCALAPPDATA%Low\\Oni Gaming\\Farmer Against Potatoes Idle\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div style={{ display: 'flex', marginTop: '12px' }}>\r\n                <div\r\n                  style={{ fontWeight: 'bold', marginRight: '6px' }}>\r\n                  Mobile:\r\n                </div>\r\n                <div>\r\n                  /storage/emulated/0/Android/data/com.oninou.FAPI/files/fapi-save.txt\r\n                </div>\r\n              </div>\r\n            </div>\r\n          }>\r\n          <div className=\"mediumImportantText blackTextStroke\" style={{ margin: '0 0 0 0', fontSize: '60px', fontWeight: 'bold' }}>Upload save file to view calculator</div>\r\n          <div\r\n            onMouseEnter={(e) => { if (!forceOpen) setForceOpen(true) }}\r\n            onMouseLeave={(e) => { if (forceOpen) setForceOpen(false) }}\r\n            style={{ display: 'flex', alignItems: 'center' }}>\r\n            <div style={{ position: 'relative', height: '36px', width: '36px', marginLeft: '6px', marginTop: '6px' }}>\r\n              <Image alt='on hover I in a cirlce icon, shows more information on hover' src={'/images/icons/info_lightgray.svg'}\r\n                fill />\r\n            </div>\r\n          </div>\r\n        </MouseOverPopover>\r\n        <div className=\"mediumImportantText blackTextStroke\" style={{ margin: '0 0 0 0', fontSize: '35px', fontWeight: 'bold', textStroke: '' }}>Warning: contains spoilers!</div>\r\n\r\n        <div style={{ marginTop: '16px' }}>\r\n          <input style={{ display: 'none' }} id='chooseFileButton' aria-label='save file upload button' type=\"file\" title=\"\" accept=\".txt\" onChange={handleFileUpload} />\r\n          <button style={{ fontSize: '1.3rem' }} onClick={(e) => { chooseFileButton.click(); return false; }}>Choose File</button>\r\n        </div>\r\n        <div style={{ marginTop: '16px' }}>\r\n          <input type=\"string\" id='stringSave' ref={stringInputRef} placeholder={'Paste save string here'} style={{ marginRight: '12px' }} />\r\n          <button style={{ fontSize: '1.3rem' }}\r\n            onClick={async (e) => {\r\n\r\n              let incomingString = stringInputRef.current.value;\r\n              try {\r\n                incomingString = atob(incomingString);\r\n                const startPosition = incomingString.indexOf('{');\r\n                const endPosition = incomingString.lastIndexOf('}') + 1;\r\n                let jsonString = incomingString.slice(startPosition, endPosition);\r\n\r\n                let infIndex = jsonString.indexOf('Infinity');\r\n\r\n                while (infIndex > 0) {\r\n                  jsonString = jsonString.replaceAll('Infinity', '-999');\r\n                  infIndex = jsonString.indexOf('Infinity');\r\n                }\r\n\r\n                try {\r\n                  const parsedJson = JSON.parse(jsonString);\r\n                  setUserData(parsedJson);\r\n                  console.log(parsedJson);\r\n                  console.log(`trying to redirect`)\r\n                  return router.push('/page_selection');\r\n                } catch (error) {\r\n                  console.error('Invalid JSON:', error);\r\n                }\r\n              }\r\n              catch (err) {\r\n                console.log(err);\r\n                console.log(`caught error reading string save`)\r\n              }\r\n            }}>\r\n            Load\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page_card.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page_content.jsx",["256"],[],"\"use client\"\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport ReactGA from \"react-ga4\";\r\nimport PageCard from './page_card.jsx';\r\nimport BlinkingDot from '../util/BlinkingDot.jsx';\r\nimport { isMobile } from 'mobile-device-detect';\r\nimport useLocalStorage from 'use-local-storage';\r\n\r\nimport DefaultSave from '../util/tempSave.json';\r\nReactGA.initialize([{\r\n    trackingId: \"G-GGLPK02VH8\",\r\n    // gaOptions: {...}, // optional\r\n    // gtagOptions: {\r\n    //     send_page_view: false\r\n    // },\r\n}]);\r\nexport default function PageSelection() {\r\n    const [mobileMode, setMobileMode] = useState(false);\r\n    useEffect(() => {\r\n        setMobileMode(isMobile);\r\n        if (isMobile) {\r\n            setTimeout(() => {\r\n                var viewport = document.querySelector('meta[name=\"viewport\"]');\r\n                if (viewport) {\r\n                    viewport.content = \"initial-scale=0.1\";\r\n                    viewport.content = \"width=1200\";\r\n                }\r\n            }, 500);\r\n        }\r\n    }, [isMobile]);\r\n    useEffect(() => {\r\n\r\n\r\n        // setTimeout(() => {\r\n        //     ReactGA.send({ hitType: \"pageview\", page: \"/page_selection_\", title: \"_Page Selection\" });\r\n        // }, 500);\r\n\r\n    }, []);\r\n\r\n    const [clientData, setData] = useLocalStorage('userData', DefaultSave);\r\n    const [data, setRunTimeData] = useState(DefaultSave);\r\n\r\n    useEffect(() => {\r\n        setRunTimeData(clientData);\r\n    }, [clientData]);\r\n\r\n    const chargesMax = (data.CurrentCardCharge === data.MaxCardCharge) && (data.MaxCardCharge !== 0) && (data.AscensionCount >= 6);\r\n\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n                flex: '1',\r\n                backgroundColor: 'black',\r\n                position: 'relative',\r\n            }}\r\n        >\r\n            {/* <BlinkingDot data={data} /> */}\r\n            <div style={{\r\n                paddingLeft: '6px',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                flex: '1',\r\n                justifyContent: 'center',\r\n                backgroundColor: 'rgba(255,255,255, 0.08)',\r\n                paddingLeft: '60px'\r\n            }}>\r\n                <div\r\n                    style={{ display: 'flex' }}\r\n                >\r\n                    <PageCard page='upload' />\r\n                    <PageCard page='expedition' />\r\n                    <PageCard page='pets' />\r\n                    <PageCard page='farm' />\r\n                </div>\r\n                <div\r\n                    style={{ display: 'flex', marginTop: '36px' }}\r\n                >\r\n                    <PageCard page='cards' redBorder={chargesMax} />\r\n                    <PageCard page='protein' />\r\n                    <PageCard page='residue' />\r\n                    <PageCard page='gratitude' />\r\n                </div>\r\n\r\n                {/* <button onClick={(e) => {\r\n                    ReactGA.event({\r\n                        category: \"tester_events\",\r\n                        action: 'tested_event',\r\n                        label: 'tested_event_label'\r\n                    })\r\n\r\n                }}>Something</button> */}\r\n            </div>\r\n        </div>\r\n    );\r\n}","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\page_content.jsx",["257","258","259"],[],"\"use client\"\r\n\r\nimport { isMobile } from 'mobile-device-detect';\r\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\r\nimport Accordion from '@mui/material/Accordion';\r\nimport ComboListCSS from './comboList.css';\r\nimport AccordionSummary from '@mui/material/AccordionSummary';\r\nimport AccordionDetails from '@mui/material/AccordionDetails';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport { petNameArray, BonusMap, petNames, getPet } from \"../util/itemMapping.js\";\r\nimport { StaticPetItem } from './PetItem.js';\r\nimport ReactGA from \"react-ga4\";\r\nimport helper from '../util/helper.js';\r\nimport petHelper from '../util/petHelper.js';\r\nimport SearchBox from '../util/search.jsx';\r\n\r\nimport { Reorder } from 'framer-motion'\r\nimport useLocalStorage from \"use-local-storage\";\r\n\r\nimport CrossIcon from '../../../public/images/icons/x_icon.svg';\r\nimport DragIcon from '../../../public/images/icons/drag_icon.svg';\r\n\r\nimport DefaultSave from '../util/tempSave.json';\r\nimport { mainTeamSuggestions, reincTeamSuggestions, gearTeamSuggestions, statTeamSuggestions, statTeamMasterList, maxKey } from './teamSuggestions.js';\r\n\r\nimport Image from 'next/image';\r\n\r\nReactGA.initialize([{\r\n    trackingId: \"G-GGLPK02VH8\",\r\n    // gaOptions: {...}, // optional\r\n    // gtagOptions: {\r\n    //     send_page_view: false\r\n    // },\r\n}]);\r\n\r\n\r\nconst bonusCutOff = 1000;\r\n\r\nfunction PetComboDisplay({ petCombos, unlockedPets, petMap }) {\r\n\r\n    if (!BonusMap[petCombos[0].BonusID]) return <></>\r\n\r\n    const comboBonusLabel = BonusMap[petCombos[0].BonusID].label;\r\n    const numCombos = petCombos.length;\r\n    let numPossibleCombos = 0;\r\n    let possibleCombosMap = {};\r\n\r\n    for (let i = 0; i < petCombos.length; i++) {\r\n        let cur = petCombos[i];\r\n        let possible = true;\r\n\r\n        if (!(cur.BonusID in possibleCombosMap)) {\r\n\r\n            possibleCombosMap[cur.BonusID] = {};\r\n        }\r\n        //\r\n        for (let j = 0; j < cur.PetID.length; j++) {\r\n            if (cur.PetID[j] === -99) {\r\n                continue;\r\n            }\r\n            if (!(cur.PetID[j] in unlockedPets)) {\r\n                possible = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n\r\n        //s\r\n        if (possible) {\r\n            numPossibleCombos++;\r\n            possibleCombosMap[cur.BonusID][cur.ID] = true;\r\n        }\r\n\r\n        if (cur.PetID.length === 2) {\r\n            cur.PetID.push(-99)\r\n        }\r\n\r\n    }\r\n\r\n    let completeArray = Array(numCombos).fill(true);\r\n\r\n    for (let i = 0; i < numCombos; i++) {\r\n        if (i + 1 > numPossibleCombos) {\r\n            completeArray[i] = false;\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Accordion>\r\n            <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        flex: '1',\r\n                        justifyContent: 'space-between',\r\n                        // backgroundColor: '#4b4b4b',\r\n                    }}\r\n                >\r\n                    <div>\r\n                        {comboBonusLabel}\r\n                    </div>\r\n                    <div\r\n                        style={{ marginLeft: '12px' }}\r\n                    >\r\n                        {completeArray.map((e, index) => {\r\n\r\n                            if (e) {\r\n                                return (\r\n                                    <span className='greenDot'\r\n                                        style={{\r\n                                            margin: '0 1px 0 1px'\r\n                                        }}\r\n                                        key={index}\r\n                                    >\r\n\r\n                                    </span>\r\n                                )\r\n                            }\r\n                            return (\r\n                                <span className='redDot'\r\n                                    style={{\r\n                                        margin: '0 1px 0 1px'\r\n                                    }}\r\n                                    key={index}\r\n                                >\r\n                                </span>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </AccordionSummary>\r\n            <AccordionDetails >\r\n                <div\r\n                    style={{\r\n                        display: 'flex', flexDirection: 'column', width: '270px',\r\n                        position: 'relative'\r\n                    }}\r\n                    // className={`greenStripes`}\r\n                    className={`grayStripes`}\r\n                >\r\n                    {petCombos && petCombos.map((petCombo, i) => {\r\n                        const PetIDArray = petCombo.PetID;\r\n                        let margin = ``;\r\n                        if (i === 0) {\r\n                            margin = '0'\r\n                        }\r\n                        else if (possibleCombosMap[petCombo.BonusID][petCombo.ID] === possibleCombosMap[petCombos[i - 1].BonusID][petCombos[i - 1].ID]) {\r\n                            margin = '-5px 0 0 0'\r\n                        }\r\n                        else {\r\n                            margin = '0 0 0 0'\r\n                        }\r\n\r\n\r\n\r\n                        return (\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                margin: margin,\r\n                                border: `5px solid ${possibleCombosMap[petCombo.BonusID][petCombo.ID] ? 'green' : 'red'}`\r\n                            }} key={i}>\r\n                                {PetIDArray.map((petId, j) => {\r\n\r\n                                    let staticPetData = petNameArray.find(staticPetDatum => staticPetDatum.petId === petId)\r\n                                    return (\r\n                                        <div key={j}\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                justifyContent: \"center\",\r\n                                                alignItems: \"center\",\r\n                                                width: '90px',\r\n                                                height: '90px',\r\n                                                opacity: petId in unlockedPets || petId === -99 ? `` : `0.6`\r\n                                                // margin: j % 2 === 0 ? '1px 1px 1px 1px' : '1px 0 1px 0'\r\n                                                // border: '1px solid black'\r\n                                            }}\r\n                                            // className={petId in unlockedPets ? `` : 'whiteBackground redBorder'}\r\n                                            className={petId in unlockedPets || petId === -99 ? `lightGrayBackground` : ``}\r\n                                        >\r\n                                            {petId !== -99 && (\r\n                                                <StaticPetItem petData={{ ...staticPetData, pet: petMap[petId] }} highlight={petId in unlockedPets} />\r\n                                            )}\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {/* <div\r\n                        style={{\r\n                            position: 'absolute',\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            top: '0',\r\n                            left: '0',\r\n                            // zIndex: '-2'\r\n                        }}\r\n                        className={`greenStripes`}\r\n                    /> */}\r\n\r\n\r\n                </div>\r\n            </AccordionDetails>\r\n        </Accordion >\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default function Pets() {\r\n\r\n    const [mobileMode, setMobileMode] = useState(false);\r\n    useEffect(() => {\r\n        setMobileMode(isMobile);\r\n        if (isMobile) {\r\n            setTimeout(() => {\r\n                var viewport = document.querySelector('meta[name=\"viewport\"]');\r\n                if (viewport) {\r\n                    viewport.content = \"initial-scale=0.1\";\r\n                    viewport.content = \"width=1200\";\r\n                }\r\n            }, 500);\r\n        }\r\n    }, [isMobile]);\r\n    const [clientData, setData] = useLocalStorage('userData', DefaultSave);\r\n    const [data, setRunTimeData] = useState(DefaultSave);\r\n\r\n    useEffect(() => {\r\n        setRunTimeData(clientData);\r\n    }, [clientData]);\r\n\r\n    const [statMode, setStatMode] = useState(false);\r\n    const [statModePets, setStatModePets] = useState({});\r\n\r\n    const [clientUseExpedition, setUseExpedition] = useLocalStorage('useExpedition', false);\r\n    const [useExpedition, setRunTimeUseExpedition] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setRunTimeUseExpedition(clientUseExpedition);\r\n    }, [clientUseExpedition]);\r\n\r\n    const [manualEnabledPetsLoaded, setManualEnabledPetsLoaded] = useState(false);\r\n    const [manualEnabledPets, setManualEnabledPetsRunTime] = useState({});\r\n    const [manualEnabledPetsClient, setManualEnabledPets] = useLocalStorage(\"manualEnabledPets\", {});\r\n    useEffect(() => {\r\n        setManualEnabledPetsLoaded(true);\r\n        setManualEnabledPetsRunTime(manualEnabledPetsClient);\r\n    }, [manualEnabledPetsClient])\r\n\r\n\r\n    const [priorityList, setPriorityList] = useState([]);\r\n\r\n    const [priorityMap, setPriorityMap] = useState({\r\n        // 1: { mode: 'max', label: BonusMap[1].label, id: 1 },\r\n        // 2: { mode: 'max', label: BonusMap[2].label, id: 2 },\r\n        // 3: { mode: 'max', label: BonusMap[3].label, id: 3 },\r\n        // 4: { mode: 'max', label: BonusMap[4].label, id: 4 },\r\n        // 28: { mode: 'max', label: BonusMap[28].label, id: 28 },s\r\n    });\r\n\r\n    const [currentPresetName, setCurrentPresetName] = useState('');\r\n    const [petWhiteList, setPetWhiteList] = useState({});\r\n    const [recommendedSelected, setRecommendedSelected] = useState(false);\r\n    const [customeSelected, setCustomSelected] = useState(false);\r\n\r\n    const [customPresets, setCustomPresetsRuntTime] = useState({});\r\n    const [customPresetsClient, setCustomPresets] = useLocalStorage(`customPresets`, {});\r\n    useEffect(() => {\r\n        setCustomPresetsRuntTime(customPresetsClient);\r\n    }, [customPresetsClient]);\r\n\r\n\r\n\r\n    const [loadPreset, setLoadPreset] = useState('');\r\n\r\n\r\n    const comboList = data.PetsSpecial;\r\n\r\n    let airPets, groundPets, currentBonuses, selectedPetMap;\r\n    [airPets, groundPets, currentBonuses, selectedPetMap] = useMemo(() => {\r\n        let result = petHelper.findBestTeam(data,\r\n            {\r\n                statMode: statMode,\r\n                statModePets: statModePets,\r\n                manualEnabledPets: useExpedition ? manualEnabledPets : {},\r\n                priorityList: priorityList,\r\n                priorityMap: priorityMap,\r\n                petWhiteList: petWhiteList\r\n            });\r\n        let currentBonuses = result[2];\r\n\r\n        for (const [key, value] of Object.entries(priorityMap)) {\r\n            if (value.id >= 1000) {\r\n                continue;\r\n            }\r\n            if (!currentBonuses[value.id] && value.count !== 0) {\r\n                currentBonuses[value.id] = { ID: value.id, Power: 0, Gain: 0, count: 0, sum: 0, label: value.label }\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n        [data, priorityList, priorityMap, petWhiteList, useExpedition, manualEnabledPets, statMode]\r\n    );\r\n\r\n\r\n    const [statPriorityList, setStatPriorityList] = useState({});\r\n    const [statPriorityMap, setStatPriorityMap] = useState({});\r\n    const [statPriorityWhitelist, setStatPriorityWhitelist] = useState({});\r\n\r\n    let preGeneratedTeams = useMemo(() => {\r\n\r\n        setRecommendedSelected(true);\r\n        let priorityList = {};\r\n        let priorityMap = {};\r\n        let petWhiteList = {};\r\n        let presetPets = {};\r\n\r\n        let mainTeam = {};\r\n        let reincTeam = {};\r\n        let gearTeam = {};\r\n        for (let i = 0; i < 3; i++) {\r\n            switch (i) {\r\n                case 0:\r\n                    priorityList = JSON.parse(JSON.stringify(mainTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityList));\r\n                    priorityMap = JSON.parse(JSON.stringify(mainTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityMap));\r\n                    presetPets = mainTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList ? JSON.parse(JSON.stringify(mainTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList)) : {};\r\n                    break;\r\n                case 1:\r\n                    priorityList = JSON.parse(JSON.stringify(reincTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityList));\r\n                    priorityMap = JSON.parse(JSON.stringify(reincTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityMap));\r\n                    presetPets = reincTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList ? JSON.parse(JSON.stringify(reincTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList)) : {};\r\n                    break;\r\n                case 2:\r\n                    priorityList = JSON.parse(JSON.stringify(gearTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityList));\r\n                    priorityMap = JSON.parse(JSON.stringify(gearTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityMap));\r\n                    presetPets = gearTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList ? JSON.parse(JSON.stringify(gearTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList)) : {};\r\n                    break;\r\n                case 'None':\r\n                    priorityList = [];\r\n                    priorityMap = {};\r\n                    break;\r\n                default:\r\n            }\r\n            let airPets, groundPets, currentBonuses, selectedPetMap;\r\n            [airPets, groundPets, currentBonuses, selectedPetMap] = petHelper.findBestTeam(\r\n                data,\r\n                { manualEnabledPets: manualEnabledPets, priorityList: priorityList, priorityMap: priorityMap, petWhiteList: petWhiteList }\r\n            );\r\n\r\n            let combinedList = airPets.concat(groundPets);\r\n            switch (i) {\r\n                case 0:\r\n                    mainTeam = combinedList;\r\n                    break;\r\n\r\n                case 1:\r\n                    reincTeam = combinedList;\r\n                    break;\r\n\r\n                case 2:\r\n                    gearTeam = combinedList;\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n\r\n        let existingStats = {};\r\n\r\n        let poopCombo = {\r\n            satisfied: false,\r\n            requiredID: {\r\n                4: true,\r\n                16: true,\r\n            }\r\n        };\r\n\r\n        if (!poopCombo.satisfied) {\r\n            let missed = false;\r\n            Object.keys(poopCombo.requiredID).forEach((inner_val) => {\r\n                let temp = mainTeam.find((a) => {\r\n                    return a.BonusList.find(\r\n                        (b) => {\r\n                            return b.ID === Number(inner_val)\r\n                        }\r\n                    )\r\n                })\r\n                if (!temp) {\r\n                    missed = true;\r\n                }\r\n            });\r\n            if (!missed) {\r\n                poopCombo.satisfied = true;\r\n                poopCombo.team = mainTeam;\r\n            }\r\n        }\r\n        if (!poopCombo.satisfied) {\r\n            let missed = false;\r\n            Object.keys(poopCombo.requiredID).forEach((inner_val) => {\r\n                let temp = reincTeam.find((a) => {\r\n                    return a.BonusList.find(\r\n                        (b) => {\r\n                            return b.ID === Number(inner_val)\r\n                        }\r\n                    )\r\n                })\r\n                if (!temp) {\r\n                    missed = true;\r\n                }\r\n            });\r\n            if (!missed) {\r\n                poopCombo.satisfied = true;\r\n                poopCombo.team = reincTeam;\r\n            }\r\n        }\r\n        if (!poopCombo.satisfied) {\r\n            let missed = false;\r\n            Object.keys(poopCombo.requiredID).forEach((inner_val) => {\r\n                let temp = gearTeam.find((a) => {\r\n                    return a.BonusList.find(\r\n                        (b) => {\r\n                            return b.ID === Number(inner_val)\r\n                        }\r\n                    )\r\n                })\r\n                if (!temp) {\r\n                    missed = true;\r\n                }\r\n            });\r\n            if (!missed) {\r\n                poopCombo.satisfied = true;\r\n                poopCombo.team = gearTeam;\r\n            }\r\n        }\r\n\r\n        let fullPetList = mainTeam.concat(reincTeam.concat(gearTeam));\r\n        let fullPetMap = {};\r\n        fullPetList.forEach((inner_val) => {\r\n\r\n            fullPetMap[inner_val.ID] = inner_val;\r\n\r\n            inner_val.BonusList.forEach((inner_bonus) => {\r\n                if (inner_bonus.ID >= 1000) return;\r\n                if (!existingStats[inner_bonus.ID]) {\r\n                    existingStats[inner_bonus.ID] = 0;\r\n                }\r\n                existingStats[inner_bonus.ID]++;\r\n            })\r\n        });\r\n\r\n        let newPriorityList = JSON.parse(JSON.stringify(statTeamMasterList.priorityList));\r\n        let newPriorityMap = JSON.parse(JSON.stringify(statTeamMasterList.priorityMap));\r\n        let newPetWhiteList = statTeamMasterList.petWhiteList ? JSON.parse(JSON.stringify(statTeamMasterList.petWhiteList)) : {};\r\n\r\n        setStatPriorityList(newPriorityList);\r\n        setStatPriorityMap(newPriorityMap);\r\n        setStatPriorityWhitelist(newPetWhiteList);\r\n        setStatModePets(fullPetMap);\r\n\r\n        for (const [key, value] of Object.entries(newPriorityMap)) {\r\n            //only turn off poop stuff if we have the combo in the other teams\r\n            if (key in poopCombo.requiredID) {\r\n                if (poopCombo.satisfied) {\r\n                    newPriorityMap[key].count = 0;\r\n                }\r\n            }\r\n            //Do not reset card power or exp, also reinc and ir for lower A fallback\r\n            else if (key in existingStats && key !== '21' && key !== '22'\r\n                && key !== '5' && key !== '6'\r\n            ) {\r\n                newPriorityMap[key].count = 0;\r\n            }\r\n        }\r\n    },\r\n        [data, petWhiteList, useExpedition, manualEnabledPets])\r\n    // statTeamMasterList\r\n\r\n    let specialCombos = {};\r\n    let partialCombos = {};\r\n\r\n    comboList.forEach((combo, index) => {\r\n        if (index === 0) return;\r\n\r\n        if (!BonusMap[combo.BonusID]) return;\r\n\r\n        let matched = true;\r\n        let required = 0;\r\n        let partial = 0;\r\n\r\n        for (let i = 0; i < combo.PetID.length; i++) {\r\n\r\n            if (combo.PetID[i] <= 0) {\r\n                continue;\r\n            }\r\n\r\n            required++;\r\n\r\n            let found = false;\r\n\r\n            found = airPets.find((pet) => pet.ID === combo.PetID[i]);\r\n            if (found) {\r\n                partial++;\r\n                continue\r\n            }\r\n            found = groundPets.find((pet) => pet.ID === combo.PetID[i]);\r\n            if (found) {\r\n                partial++;\r\n                continue\r\n            }\r\n        }\r\n\r\n        if (partial === required) {\r\n            if (!specialCombos[combo.BonusID]) {\r\n                specialCombos[combo.BonusID] = { ...combo, rootName: BonusMap[combo.BonusID].rootName, odd: BonusMap[combo.BonusID].odd, name: BonusMap[combo.BonusID].label, count: 1 };\r\n            }\r\n            else {\r\n                specialCombos[combo.BonusID].count++;\r\n            }\r\n\r\n        }\r\n        else if (partial > 0) {\r\n            if (!partialCombos[combo.BonusID]) {\r\n                partialCombos[combo.BonusID] = { ...combo, rootName: BonusMap[combo.BonusID].rootName, odd: BonusMap[combo.BonusID].odd, name: BonusMap[combo.BonusID].label, count: 1 };\r\n            }\r\n            else {\r\n                partialCombos[combo.BonusID].count++;\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n\r\n    const comboByBonusId = comboList.reduce((accum, combo, i) => {\r\n        if (i === 0) return accum;\r\n        accum[combo.BonusID] = accum[combo.BonusID] ? [...accum[combo.BonusID], combo] : [combo];\r\n        return accum;\r\n    }, {});\r\n\r\n    let unlockedPetsMap = {};\r\n    let petMap = {};\r\n\r\n    const positiveRankedPets = data.PetsCollection.filter(\r\n        (pet) => {\r\n            // const isValidRank = !!pet.Rank;//Instead of relying on defaultRank always = 0, select valid ranks if they exist (not 0)\r\n            petMap[pet.ID] = pet;\r\n            const isValidLocked = !!pet.Locked;\r\n            return isValidLocked;\r\n        }\r\n    )\r\n\r\n    let petSearchList = [];\r\n    for (let i = 0; i < positiveRankedPets.length; i++) {\r\n        let cur = positiveRankedPets[i];\r\n        unlockedPetsMap[cur.ID] = cur;\r\n        if (!petWhiteList[cur.ID]) {\r\n            petSearchList.push({ label: cur.name, id: cur.ID });\r\n        }\r\n    }\r\n\r\n    let bonusesWithPets = {};\r\n    data.PetsCollection.forEach((bonus_pet) => {\r\n        bonus_pet.BonusList.forEach((pet_bonus_inner) => {\r\n            bonusesWithPets[pet_bonus_inner.ID] = bonus_pet;\r\n        })\r\n    })\r\n\r\n    let searchList = [];\r\n    for (const [key, value] of Object.entries(BonusMap)) {\r\n\r\n        if (value.id >= bonusCutOff || priorityMap[key] || !bonusesWithPets[value.id]) {\r\n            continue;\r\n        }\r\n        searchList.push({ label: value.label, id: value.id });\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n                flex: '1',\r\n                backgroundColor: 'black',\r\n                position: 'relative',\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    flex: '1',\r\n                    // alignItems: 'center',\r\n                    // justifyContent: 'center',\r\n                    backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                    paddingLeft: '12px'\r\n                }}\r\n            >\r\n                {/* Pet Combos */}\r\n                <div style={{\r\n                    marginTop: '12px',\r\n                    backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                    maxHeight: 'calc(100% - 40px)',\r\n                    // overflowY: 'auto',\r\n                    padding: '6px',\r\n                    borderRadius: '6px',\r\n                    border: `2px solid rgba(255,255,255,0.7)`,\r\n                }}>\r\n                    <h2 className='importantText' style={{ textAlign: 'center', marginTop: '0', marginBottom: '12px' }}>Pet Combo List</h2>\r\n                    <div style={{ borderRadius: '6px', maxHeight: 'calc(100% - 42px)', height: 'calc(100% - 42px)', overflow: 'hidden' }}>\r\n                        <div\r\n                            className='importantText'\r\n                            style={{\r\n                                display: 'flex', flexDirection: 'column',\r\n                                maxHeight: '100%',\r\n                                overflowY: 'auto'\r\n\r\n                            }}>\r\n                            {comboByBonusId && Object.values(comboByBonusId).map((comboArray, i) => {\r\n                                return <PetComboDisplay\r\n                                    petMap={petMap}\r\n                                    petCombos={comboArray}\r\n                                    key={i}\r\n                                    unlockedPets={unlockedPetsMap}\r\n                                />\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n                <>\r\n                    {/* Active team builder */}\r\n                    {true && (<div className='teamBuilder importantText'\r\n                        style={{\r\n                            borderRadius: '6px',\r\n                            border: `2px solid rgba(255,255,255,0.7)`,\r\n                            margin: '12px 24px',\r\n                            maxHeight: 'calc(100% - 24px)',\r\n                            overflow: 'auto',\r\n                            display: 'flex',\r\n                            alignItems: 'flex-start',\r\n                            backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                            minWidth: mobileMode ? '903px' : ''\r\n                        }}>\r\n\r\n                        {/* List Table */}\r\n                        <div\r\n                            style={{ alignSelf: 'flex-start', minWidth: '580px', margin: '0 12px' }}\r\n                        >\r\n                            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                {/* Priority List */}\r\n                                <div\r\n                                    style={{ fontSize: '32px', fontWeight: 'bold', textAlign: 'center', }}\r\n                                >\r\n                                    Priority List\r\n                                </div>\r\n                            </div>\r\n                            <div\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    // flexDirection: 'column',\r\n                                    justifyContent: 'space-between',\r\n                                    alignItems: 'center',\r\n                                    marginTop: '12px'\r\n                                }}>\r\n\r\n                                <SearchBox\r\n                                    margin='1px 0 0 6px'\r\n                                    data={{\r\n                                        list: searchList\r\n                                    }}\r\n                                    placeholder={`Select a bonus`}\r\n                                    onSelect={(e) => {\r\n                                        ReactGA.event({\r\n                                            category: \"pets_interaction\",\r\n                                            action: `whitelist_bonus`,\r\n                                            label: e.label,\r\n                                            value: e.id\r\n                                        })\r\n\r\n                                        setPriorityMap((curMap) => {\r\n                                            let newMap = { ...curMap };\r\n                                            newMap[e.id] = { mode: 'max', label: BonusMap[e.id].label, id: e.id, count: -1, current: 0 };\r\n                                            return newMap;\r\n                                        });\r\n                                        setPriorityList((curList) => {\r\n                                            let newList = [...curList];\r\n                                            newList.push(e.id);\r\n                                            return newList;\r\n                                        });\r\n                                    }}\r\n                                />\r\n                                <div className='rainbowBorder' style={{ margin: '0 12px 0 0', display: 'flex', borderWidth: '4px', padding: '3px' }}>\r\n                                    <div>\r\n                                        Recommended Presets\r\n                                    </div>\r\n                                    <div>\r\n                                        <select\r\n                                            className='importantText'\r\n                                            aria-label='Select a default team preset'\r\n                                            style={{ maxWidth: '144px', marginLeft: '12px', backgroundColor: '#171717', borderRadius: '4px' }}\r\n                                            onChange={\r\n                                                (selected_mode) => {\r\n                                                    setRecommendedSelected(true);\r\n                                                    ReactGA.event({\r\n                                                        category: \"pets_interaction\",\r\n                                                        action: `selected_recommended_team`,\r\n                                                        label: selected_mode.target.value\r\n                                                    })\r\n                                                    let presetPets = {};\r\n                                                    switch (selected_mode.target.value) {\r\n                                                        case 'Main Team':\r\n                                                            setStatMode(false);\r\n                                                            setPriorityList(JSON.parse(JSON.stringify(mainTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityList)))\r\n                                                            setPriorityMap(JSON.parse(JSON.stringify(mainTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityMap)));\r\n                                                            presetPets = mainTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList ? JSON.parse(JSON.stringify(mainTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList)) : {};\r\n                                                            break;\r\n                                                        case 'Reinc. Team':\r\n                                                            setStatMode(false);\r\n                                                            setPriorityList(JSON.parse(JSON.stringify(reincTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityList)))\r\n                                                            setPriorityMap(JSON.parse(JSON.stringify(reincTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityMap)));\r\n                                                            presetPets = reincTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList ? JSON.parse(JSON.stringify(reincTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList)) : {};\r\n                                                            break;\r\n                                                        case 'Gear Team':\r\n                                                            setStatMode(false);\r\n                                                            setPriorityList(JSON.parse(JSON.stringify(gearTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityList)))\r\n                                                            setPriorityMap(JSON.parse(JSON.stringify(gearTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityMap)));\r\n                                                            presetPets = gearTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList ? JSON.parse(JSON.stringify(gearTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList)) : {};\r\n                                                            break;\r\n                                                        case 'Stat Team':\r\n                                                            // setPriorityList(statTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityList)\r\n                                                            // setPriorityMap(statTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].priorityMap);\r\n                                                            // presetPets = statTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList ? statTeamSuggestions[data.AscensionCount > maxKey ? maxKey : data.AscensionCount].petWhiteList : {};\r\n                                                            setPriorityList(JSON.parse(JSON.stringify(statPriorityList)));\r\n                                                            setPriorityMap(JSON.parse(JSON.stringify(statPriorityMap)));\r\n                                                            presetPets = JSON.parse(JSON.stringify(statPriorityWhitelist));\r\n                                                            setStatMode(true);\r\n                                                            break;\r\n                                                        case 'None':\r\n                                                            setPriorityList([]);\r\n                                                            setPriorityMap({});\r\n                                                            setPetWhiteList({});\r\n                                                            // setRecommendedSelected(true);\r\n                                                            break;\r\n                                                        default:\r\n\r\n                                                    }\r\n\r\n                                                    let petWhiteListNew = {};\r\n                                                    for (const [key, value] of Object.entries(presetPets)) {\r\n                                                        if (!unlockedPetsMap[key]) {\r\n                                                            petWhiteListNew[key] = { ID: key, name: petNames[key].name, mode: value.mode };\r\n                                                        }\r\n                                                        else {\r\n                                                            petWhiteListNew[key] = { ...unlockedPetsMap[key], mode: value.mode };\r\n                                                        }\r\n                                                    }\r\n                                                    setPetWhiteList(petWhiteListNew);\r\n                                                }\r\n                                            }\r\n                                            defaultValue={'None'}\r\n                                        // value={petWhiteList[e.ID].mode}\r\n                                        >\r\n                                            {!recommendedSelected && (<option value=\"None\">Select Preset</option>)}\r\n                                            <option value=\"Main Team\">Main Team</option>\r\n                                            <option value=\"Reinc. Team\">Reinc. Team</option>\r\n                                            <option value=\"Gear Team\">Gear Team</option>\r\n                                            {data.AscensionCount >= 5 && (\r\n                                                <option value=\"Stat Team\">Stat Team</option>\r\n                                            )}\r\n                                            {recommendedSelected && (<option value=\"None\">Blank</option>)}\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* List of priorities */}\r\n                            <div style={{\r\n                                display: 'flex', flex: '1',\r\n                                border: '1px solid gray',\r\n                                margin: '6px', justifyContent: 'center',\r\n                                backgroundColor: 'rgba(255,255,255, 0.04)',\r\n                                borderRadius: '6px',\r\n                                maxHeight: '58vh',\r\n                                paddingLeft: '6px',\r\n                                overflow: \"hidden\"\r\n                            }}>\r\n                                <div style={{ width: '100%', overflow: 'auto' }}>\r\n                                    <Reorder.Group\r\n                                        axis=\"y\"\r\n                                        values={priorityList}\r\n                                        onReorder={setPriorityList}>\r\n                                        {priorityList.map((item, index) => {\r\n                                            let showSelectedPets = false;\r\n                                            let color = 'gray';\r\n                                            let priority = priorityMap[item];\r\n                                            let current = currentBonuses[item];\r\n                                            if (priority.count === -1) {\r\n                                                color = 'white';\r\n                                            }\r\n                                            else if (priority.count === 0) {\r\n                                                color = 'gray';\r\n                                            }\r\n                                            else if (priority.count === current?.count) {\r\n                                                color = '#4caf50'\r\n                                            }\r\n                                            else if (priority.count < current?.count) {\r\n                                                color = '#ffeb3b'\r\n                                            }\r\n                                            else {\r\n                                                color = '#e53935';\r\n                                            }\r\n                                            if (selectedPetMap[item]) {\r\n                                                if (selectedPetMap[item].length > 0) {\r\n                                                    showSelectedPets = true;\r\n                                                }\r\n                                            }//\r\n                                            return (\r\n                                                < Reorder.Item key={item} value={item} style={{ marginLeft: '6px' }}>\r\n                                                    <div\r\n                                                        className='drag'\r\n                                                        style={{\r\n                                                            margin: '6px 3px',\r\n                                                            border: `2px solid ${color}`,\r\n                                                            display: 'flex',\r\n                                                            alignItems: 'center', flexDirection: 'column',\r\n                                                            width: '220px',\r\n                                                            backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                                            borderRadius: '6px'\r\n                                                        }}>\r\n                                                        <div style={{\r\n                                                            display: 'flex', justifyContent: 'space-between', alignItems: 'center',\r\n                                                            width: '100%', margin: '3px 0 6px 0',\r\n                                                            borderBottom: '1px solid black'\r\n                                                        }}>\r\n\r\n                                                            <Image\r\n                                                                className='drag noPointerEvents'\r\n                                                                src={DragIcon}\r\n                                                                style={{ height: '24px', width: 'auto', marginLeft: '3px' }}\r\n                                                                alt='hand in a fist with index poting at a vertical line with arrows on both ends'\r\n                                                            />\r\n\r\n\r\n                                                            <div style={{ marginLeft: '6px' }}>\r\n                                                                {` ${priorityMap[item].label}`}\r\n                                                            </div>\r\n                                                            <Image\r\n                                                                onClick={(e) => {\r\n                                                                    setPriorityMap((curMap) => {\r\n                                                                        let newMap = { ...curMap };\r\n                                                                        delete newMap[item];\r\n                                                                        return newMap;\r\n                                                                    });\r\n                                                                    setPriorityList((curList) => {\r\n                                                                        let newList = [...curList];\r\n                                                                        newList = newList.filter((cur) => cur !== item);\r\n                                                                        return newList;\r\n                                                                    });\r\n                                                                }}\r\n                                                                className='hover'\r\n                                                                src={CrossIcon}\r\n                                                                alt='red x'\r\n                                                                style={{ height: '16px', width: 'auto', marginRight: '6px' }} />\r\n                                                        </div>\r\n\r\n                                                        {/* Extra options */}\r\n                                                        <div style={{ alignSelf: 'flex-start', marginLeft: '6px', marginBottom: '3px' }}>\r\n                                                            <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                                                <div style={{ marginRight: '6px' }}>\r\n                                                                    Max Pets:\r\n                                                                </div>\r\n                                                                <div>\r\n                                                                    <input\r\n                                                                        aria-label='Select how the bonus will be rewarded'\r\n                                                                        // className='importantText textMedium2'\r\n                                                                        style={{\r\n                                                                            //  borderRadius: '4px',\r\n                                                                            width: '30px',\r\n                                                                            //    height: '65%', \r\n                                                                            //    backgroundColor: index % 2 === 0 ? '#2D2D2D' : '#353535'\r\n                                                                            backgroundColor: '#f3f0f5'\r\n                                                                        }}\r\n                                                                        type='number' value={priorityMap[item].count}\r\n                                                                        onChange={\r\n                                                                            (inner_e) => {\r\n                                                                                try {\r\n                                                                                    let x = Number(inner_e.target.value);\r\n                                                                                    x = Math.floor(x);\r\n                                                                                    if (x < -1 || x > 6) {\r\n                                                                                        return;\r\n                                                                                    }\r\n                                                                                    setPriorityMap((current_map) => {\r\n                                                                                        let newMap = { ...current_map };\r\n                                                                                        newMap[item].count = x;\r\n                                                                                        return newMap;\r\n                                                                                    })\r\n\r\n                                                                                    ReactGA.event({\r\n                                                                                        category: \"pet_team_builder\",\r\n                                                                                        action: `changed_bonus_max_pets`,\r\n                                                                                        label: `${priorityMap[item].label}`,\r\n                                                                                        value: x\r\n                                                                                    });\r\n                                                                                }\r\n                                                                                catch (err) {\r\n                                                                                    console.log(err);\r\n                                                                                }\r\n                                                                            }}\r\n                                                                        min=\"-1\"\r\n                                                                        max=\"6\"\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                    </div>\r\n                                                </Reorder.Item>\r\n                                            )\r\n                                        })}\r\n                                    </Reorder.Group>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n\r\n\r\n\r\n                            {/* List of whitelisted pets*/}\r\n                            <div\r\n                                style={{ fontSize: '32px', fontWeight: 'bold', textAlign: 'center' }}\r\n                            >\r\n                                Manual Pet Selection\r\n                            </div>\r\n\r\n                            <SearchBox\r\n                                margin='0 0 0 6px'\r\n                                data={{\r\n                                    list: petSearchList\r\n                                }}\r\n                                placeholder={`Select a pet`}\r\n                                onSelect={(e) => {\r\n\r\n                                    ReactGA.event({\r\n                                        category: \"pets_interaction\",\r\n                                        action: `whitelist_pet`,\r\n                                        label: e.label,\r\n                                        value: e.id\r\n                                    })\r\n\r\n\r\n\r\n                                    setPetWhiteList((curr_whitelist) => {\r\n                                        let newList = { ...curr_whitelist };\r\n\r\n                                        newList[e.id] = { ...unlockedPetsMap[e.id], mode: 'include' };\r\n                                        return newList;\r\n                                    })\r\n                                }}\r\n                            />\r\n\r\n\r\n                            <div style={{\r\n                                display: 'flex', flex: '1',\r\n                                flexDirection: 'column',\r\n                                border: '1px solid gray',\r\n                                justifyContent: 'center',\r\n                                alignItems: 'center',\r\n                                margin: '6px',\r\n                                backgroundColor: 'rgba(255,255,255, 0.04)',\r\n                                borderRadius: '6px',\r\n                                maxHeight: '19.5vh',\r\n                                overflow: 'hidden'\r\n                            }}>\r\n                                <div style={{ maxHeight: '100%', overflow: 'auto', width: '100%' }}>\r\n                                    <div\r\n                                        style={{\r\n                                            display: \"flex\",\r\n                                            flexDirection: \"column\",\r\n                                            justifyContent: \"center\",\r\n                                            alignItems: \"center\"\r\n                                        }}\r\n                                    >\r\n                                        {Object.values(petWhiteList).map((e, index) => (\r\n                                            <div\r\n                                                key={index}\r\n                                                style={{\r\n                                                    display: 'flex', flexDirection: 'column',\r\n                                                    width: '250px', height: '60px',\r\n                                                    backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                                    borderRadius: '6px',\r\n                                                    margin: '6px  12px'\r\n                                                }}>\r\n                                                <div style={{\r\n                                                    display: 'flex', justifyContent: 'space-between', alignItems: 'center',\r\n                                                    width: '100%', height: '32px',\r\n                                                    borderBottom: '1px solid black'\r\n                                                }}>\r\n                                                    <div style={{ fontSize: '24px', marginLeft: '6px' }}>\r\n                                                        {e.name}\r\n                                                    </div>\r\n                                                    <Image\r\n                                                        className='hover'\r\n                                                        src={CrossIcon}\r\n                                                        alt='red x'\r\n                                                        style={{ height: '16px', width: 'auto', marginRight: '6px' }}\r\n                                                        onClick={(click_e) => {\r\n                                                            setPetWhiteList((cur_whitelist) => {\r\n                                                                let newList = { ...cur_whitelist };\r\n                                                                delete newList[e.ID];\r\n                                                                return newList;\r\n                                                            });\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n\r\n\r\n                                                <div>\r\n                                                    <div style={{ display: 'flex', alignItems: 'center', margin: '6px' }}>\r\n                                                        <div style={{ marginRight: '6px' }}>\r\n                                                            Placement:\r\n                                                        </div>\r\n                                                        <div>\r\n                                                            <select\r\n                                                                aria-label='Specifiy if the pet is included or excluded'\r\n                                                                style={{ maxWidth: '144px' }}\r\n                                                                onChange={\r\n                                                                    (selected_mode) => {\r\n                                                                        setPetWhiteList((cur_whitelist) => {\r\n                                                                            let newList = { ...cur_whitelist };\r\n                                                                            newList[e.ID].mode = selected_mode.target.value;\r\n                                                                            return newList;\r\n                                                                        });\r\n                                                                    }\r\n                                                                }\r\n                                                                defaultValue={petWhiteList[e.ID].mode}\r\n                                                                value={petWhiteList[e.ID].mode}\r\n                                                            >\r\n                                                                <option value=\"include\">include</option>\r\n                                                                <option value=\"exclude\">exclude</option>\r\n                                                            </select>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Actual team */}\r\n                        <div style={{ marginRight: '6px', marginTop: '6px' }}>\r\n                            <div\r\n                                style={{\r\n                                    backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                    padding: '6px',\r\n                                    borderRadius: '6px'\r\n                                }}\r\n                            >\r\n                                <div\r\n                                    style={{ fontSize: '32px', fontWeight: 'bold', textAlign: 'center' }}\r\n                                >\r\n                                    Best Team\r\n\r\n                                </div>\r\n                                {!!recommendedSelected && (\r\n                                    <>\r\n                                        {/* Current Team Bonuses! s*/}\r\n                                        <div style={{ padding: '12px' }}>\r\n                                            {Object.values(currentBonuses).map((e, index) => {\r\n                                                if (e.ID >= bonusCutOff) {\r\n                                                    return null\r\n                                                }\r\n                                                let color = 'lightgray';\r\n                                                let priority = priorityMap[e.ID];\r\n                                                if (priority) {\r\n                                                    if (priority.count === -1) {\r\n                                                        color = 'white';\r\n                                                    }\r\n                                                    else if (priority.count === 0) {\r\n                                                        color = 'gray';\r\n                                                    }\r\n                                                    else if (priority.count === e.count) {\r\n                                                        color = '#4caf50'\r\n                                                    }\r\n                                                    else if (priority.count < e.count) {\r\n                                                        color = '#ffeb3b'; //yellow\r\n                                                    }\r\n                                                    else {\r\n                                                        color = '#e53935'; //reds\r\n                                                    }\r\n                                                }\r\n                                                else {\r\n                                                    color = 'lightgray';\r\n                                                }\r\n                                                return (\r\n                                                    <div key={index} style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                                        <div style={{ width: '150px' }}>\r\n                                                            {e.label}\r\n                                                        </div>\r\n                                                        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                                            <div style={{ color: color, }}>\r\n                                                                {e.sum.toExponential(2) + '%'}\r\n                                                            </div>\r\n                                                            <div style={{ color: color, marginLeft: '6px' }}>\r\n                                                                {` (${currentBonuses[e.ID].count})`}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )\r\n                                            }, [])}\r\n                                        </div>\r\n\r\n                                        {Object.values(specialCombos).length > 0 && (\r\n                                            <>\r\n                                                < div\r\n                                                    style={{ fontSize: '24px', fontWeight: 'bold', textAlign: 'center' }}\r\n                                                >\r\n                                                    Team Combos\r\n                                                </div>\r\n\r\n                                                <div style={{ padding: '12px' }}>\r\n                                                    {Object.values(specialCombos).map((e, index) => {\r\n                                                        return (\r\n                                                            <div key={index} style={{ display: 'flex' }}>\r\n                                                                <div style={{ width: '150px' }}>\r\n                                                                    {e.rootName}\r\n                                                                </div>\r\n                                                                <div>\r\n                                                                    {e.odd && (<>\r\n                                                                        {`x${e.count}`}\r\n                                                                    </>\r\n                                                                    )}\r\n                                                                    {!e.odd && (\r\n                                                                        <>\r\n                                                                            {helper.roundInt((e.BonusPower * e.count)) + '%'}\r\n                                                                        </>\r\n                                                                    )}\r\n\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        )\r\n                                                    }, [])}\r\n                                                </div>\r\n                                            </>\r\n                                        )}\r\n\r\n                                        {/* Pets */}\r\n                                        <div>\r\n\r\n                                            {/* Ground Pets */}\r\n                                            <div style={{ display: 'flex' }}>\r\n                                                {groundPets.map((e, index) => {\r\n\r\n                                                    let staticPetData = petNameArray.find(staticPetDatum => staticPetDatum.petId === e.ID)\r\n                                                    return (\r\n                                                        <div key={index}\r\n                                                            style={{\r\n                                                                display: \"flex\",\r\n                                                                justifyContent: \"center\",\r\n                                                                alignItems: \"center\",\r\n                                                                width: '90px',\r\n                                                                height: '90px',\r\n                                                                border: '1px gray solid',\r\n                                                                borderRadius: '6px'\r\n                                                            }}\r\n                                                        >\r\n                                                            <StaticPetItem petData={{ ...staticPetData, pet: petMap[e.ID] }} />\r\n                                                        </div>\r\n                                                    );\r\n                                                }, [])}\r\n                                            </div>\r\n                                            {/* Air Pets */}\r\n                                            <div style={{ display: 'flex' }}>\r\n                                                {airPets.map((e, index) => {\r\n\r\n                                                    let staticPetData = petNameArray.find(staticPetDatum => staticPetDatum.petId === e.ID)\r\n                                                    return (\r\n                                                        <div key={index}\r\n                                                            style={{\r\n                                                                display: \"flex\",\r\n                                                                justifyContent: \"center\",\r\n                                                                alignItems: \"center\",\r\n                                                                width: '90px',\r\n                                                                height: '90px',\r\n                                                                border: '1px gray solid',\r\n                                                                borderRadius: '6px'\r\n                                                            }}\r\n                                                        >\r\n\r\n                                                            <StaticPetItem petData={{ ...staticPetData, pet: petMap[e.ID] }} />\r\n\r\n                                                        </div>\r\n                                                    );\r\n                                                }, [])}\r\n                                            </div>\r\n                                        </div>\r\n                                    </>\r\n                                )}\r\n\r\n                            </div>\r\n\r\n                            {/* Custom Preset Area */}\r\n                            <div style={{\r\n                                backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                padding: '6px',\r\n                                marginTop: '12px',\r\n                                borderRadius: '6px'\r\n                            }}>\r\n                                {/* header */}\r\n                                <div\r\n                                    style={{ fontSize: '24px', fontWeight: 'bold', textAlign: 'center', marginBottom: \"6px\" }}\r\n                                >\r\n                                    Custom Presets\r\n                                </div>\r\n                                {/* Save current preset */}\r\n                                <div style={{ display: 'flex', justifyContent: 'center' }} >\r\n                                    <input type='text'\r\n                                        aria-label='Specify name of the current preset to save it under'\r\n                                        onChange={(e) => {\r\n\r\n                                            setCurrentPresetName(e.target.value);\r\n                                        }}\r\n                                        style={{\r\n                                            width: '141px', marginRight: '12px'\r\n                                        }}\r\n                                    />\r\n                                    <button disabled={currentPresetName.trim().length === 0}\r\n                                        onClick={(e) => {\r\n                                            ReactGA.event({\r\n                                                category: \"pets_interaction\",\r\n                                                action: `save_custom_preset`,\r\n                                                label: currentPresetName\r\n                                            })\r\n\r\n                                            setCustomPresets((currentPresets) => {\r\n                                                let newPresets = { ...currentPresets };\r\n                                                let newPetWhiteList = {};\r\n\r\n                                                for (const [key, value] of Object.entries(petWhiteList)) {\r\n                                                    newPetWhiteList[key] = { ID: key, mode: value.mode }\r\n                                                }\r\n\r\n                                                newPresets[currentPresetName] = {\r\n                                                    priorityList: priorityList,\r\n                                                    priorityMap: priorityMap,\r\n                                                    petWhiteList: newPetWhiteList\r\n                                                };\r\n                                                return newPresets;\r\n                                            });\r\n                                        }}\r\n                                    >Save Current</button>\r\n                                </div>\r\n                                {/* Select saved preset */}\r\n                                <div style={{ display: 'flex', justifyContent: 'center', marginTop: '6px' }}>\r\n                                    <div style={{ marginRight: '12px', marginLeft: '5px', width: '141px' }}>\r\n                                        Select saved preset\r\n                                    </div>\r\n                                    <select\r\n                                        aria-label='Specify which custom preset to load in'\r\n                                        style={{ width: '90px', marginLeft: '12px' }}\r\n                                        onChange={\r\n                                            (selected_mode) => {\r\n                                                setCustomSelected(true);\r\n                                                setRecommendedSelected(true);\r\n                                                ReactGA.event({\r\n                                                    category: \"pets_interaction\",\r\n                                                    action: `load_custom_preset`,\r\n                                                    label: selected_mode.target.value\r\n                                                })\r\n\r\n\r\n                                                switch (selected_mode.target.value) {\r\n                                                    case 'None':\r\n                                                        setCustomSelected(true);\r\n                                                        return;\r\n                                                    default:\r\n\r\n                                                }\r\n\r\n                                                setPriorityList(customPresets[selected_mode.target.value].priorityList);\r\n                                                setPriorityMap(customPresets[selected_mode.target.value].priorityMap);\r\n                                                let petWhiteListNew = {};\r\n                                                for (const [key, value] of Object.entries(customPresets[selected_mode.target.value].petWhiteList)) {\r\n                                                    if (!unlockedPetsMap[key]) {\r\n                                                        petWhiteListNew[key] = { ID: key, name: petNames[key].name, mode: value.mode };\r\n                                                    }\r\n                                                    else {\r\n                                                        petWhiteListNew[key] = { ...unlockedPetsMap[key], mode: value.mode };\r\n                                                    }\r\n                                                }\r\n\r\n                                                setPetWhiteList(petWhiteListNew);\r\n                                            }\r\n                                        }\r\n                                        defaultValue={' '}\r\n                                    // value={petWhiteList[e.ID].mode}\r\n                                    >\r\n                                        {!customeSelected && (<option value=\"None\">None</option>)}\r\n                                        {Object.keys(customPresets).map((e) => <option key={e} value={e}>{e}</option>)}\r\n                                    </select>\r\n                                </div>\r\n                                {/* Delete saved preset */}\r\n                                <div style={{ display: 'flex', justifyContent: 'center', marginTop: '6px' }}>\r\n                                    <div style={{ marginRight: '12px', marginLeft: '5px', width: '141px' }}>\r\n                                        Delete preset\r\n                                    </div>\r\n                                    <select\r\n                                        aria-label='Specify which custom preset to delete'\r\n                                        style={{ width: '90px', marginLeft: '12px' }}\r\n                                        onChange={\r\n                                            (selected_mode) => {\r\n                                                ReactGA.event({\r\n                                                    category: \"pets_interaction\",\r\n                                                    action: `delete_custom_preset`,\r\n                                                    label: selected_mode.target.value\r\n                                                })\r\n\r\n                                                setCustomPresets((current_presets) => {\r\n                                                    let newMap = { ...current_presets };\r\n                                                    delete newMap[selected_mode.target.value];\r\n                                                    return newMap;\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                        value={'None'}\r\n                                    >\r\n                                        <option value=\"None\">None</option>\r\n                                        {Object.keys(customPresets).map((e) => <option key={e} value={e}>{e}</option>)}\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            {/* Share/Load presets */}\r\n                            <div style={{\r\n                                backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                padding: '6px',\r\n                                marginTop: '12px',\r\n                                borderRadius: '6px'\r\n                            }}>\r\n                                {/* header */}\r\n                                <div\r\n                                    style={{ fontSize: '24px', fontWeight: 'bold', textAlign: 'center', marginBottom: \"6px\" }}\r\n                                >\r\n                                    Share Presets\r\n                                </div>\r\n                                {/* import preset */}\r\n                                <div style={{ display: 'flex', justifyContent: 'center' }} >\r\n                                    <input type='text'\r\n                                        aria-label='Enter a preset code to import it'\r\n                                        onChange={(e) => {\r\n                                            setLoadPreset(e.target.value);\r\n                                        }}\r\n                                        style={{\r\n                                            width: '141px', marginRight: '12px'\r\n                                        }}\r\n                                    />\r\n                                    <button disabled={loadPreset.trim().length === 0}\r\n                                        onClick={(e) => {\r\n                                            try {\r\n                                                ReactGA.event({\r\n                                                    category: \"pets_interaction\",\r\n                                                    action: `imported_custom_preset`,\r\n                                                })\r\n                                                setRecommendedSelected(true);\r\n                                                let importPresetObj = JSON.parse(loadPreset);\r\n                                                setPriorityList(importPresetObj.priorityList);\r\n                                                setPriorityMap(importPresetObj.priorityMap);\r\n\r\n                                                let newPetWhiteList = {};\r\n                                                for (const [key, value] of Object.entries(importPresetObj.petWhiteList)) {\r\n                                                    if (!unlockedPetsMap[key]) {\r\n                                                        newPetWhiteList[key] = { ID: key, name: petNames[key].name, mode: value.mode };\r\n                                                    }\r\n                                                    else {\r\n                                                        newPetWhiteList[key] = { ...unlockedPetsMap[key], mode: value.mode };\r\n                                                    }\r\n                                                }\r\n\r\n                                                setPetWhiteList(newPetWhiteList);\r\n                                            }\r\n                                            catch (err) {\r\n\r\n                                            }\r\n\r\n                                        }}\r\n                                    >Import Preset</button>\r\n                                </div>\r\n                                {/* export preset */}\r\n                                <div style={{ display: 'flex', justifyContent: 'center', marginTop: '12px' }} >\r\n\r\n                                    <button\r\n                                        onClick={(e) => {\r\n                                            ReactGA.event({\r\n                                                category: \"pets_interaction\",\r\n                                                action: `exported_custom_preset`,\r\n                                            })\r\n\r\n                                            let presetObj = {};\r\n                                            let newPetWhiteList = {};\r\n\r\n                                            for (const [key, value] of Object.entries(petWhiteList)) {\r\n                                                newPetWhiteList[key] = { ID: key, mode: value.mode }\r\n                                            }\r\n\r\n                                            presetObj = {\r\n                                                priorityList: priorityList,\r\n                                                priorityMap: priorityMap,\r\n                                                petWhiteList: newPetWhiteList\r\n                                            };\r\n                                            navigator.clipboard.writeText(JSON.stringify(presetObj));\r\n                                        }}\r\n                                    >Copy Current Preset to Clipboard</button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Miscellaneous settings */}\r\n                            <div style={{\r\n                                backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                padding: '6px',\r\n                                marginTop: '12px',\r\n                                borderRadius: '6px'\r\n                            }}>\r\n                                {/* header */}\r\n                                <div\r\n                                    style={{ fontSize: '24px', fontWeight: 'bold', textAlign: 'center', marginBottom: \"6px\" }}\r\n                                >\r\n                                    Miscellaneous Settings\r\n                                </div>\r\n                                <div style={{ display: 'flex', justifyContent: 'center' }} >\r\n\r\n\r\n                                    <div style={{}}>\r\n                                        Use expedition pets\r\n                                    </div>\r\n                                    <div>\r\n                                        <input\r\n                                            aria-label='use selected pets from expedition page'\r\n                                            type=\"checkbox\"\r\n                                            onChange={(e) => {\r\n                                                setUseExpedition(e.target.checked ? true : false)\r\n                                            }}\r\n                                            checked={!!useExpedition}\r\n                                            value={!!useExpedition}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>)}\r\n\r\n                    {/* How To Use */}\r\n                    <div className='teamBuilder importantText'\r\n                        style={{\r\n                            borderRadius: '6px',\r\n                            border: `2px solid rgba(255,255,255,0.7)`,\r\n                            margin: '12px 12px 12px 0',\r\n                            maxHeight: 'calc(100% - 24px)',\r\n                            overflow: 'auto',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            flex: '1',\r\n                            alignItems: 'flex-start',\r\n                            backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                            padding: '6px',\r\n                            minWidth: '260px'\r\n                        }}>\r\n                        <div\r\n                            style={{ fontSize: '32px', fontWeight: 'bold', textAlign: 'center', width: '100%' }}\r\n                        >\r\n                            How To Use\r\n                        </div>\r\n                        <div style={{ display: 'flex', flex: '1', flexDirection: 'column' }}>\r\n                            {/* Priority List */}\r\n                            <div style={{ display: 'flex' }}>\r\n                                <div style={{ minWidth: '130px', width: '130px', maxWidth: '130px', marginRight: '12px', fontSize: '20px' }}>\r\n                                    Priority List:\r\n                                </div>\r\n                                <div>\r\n                                    <div>\r\n\r\n                                        If you are new, it is recommended to select one of the presets from `Recommended Presets`\r\n                                    </div>\r\n                                    <div>\r\n\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            Add any bonus to the priority list, bonuses at the top are weighed more than those below them.\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            Setting a value to -1 means it will always reward pets for having this bonus\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            Setting a value to 0 means this bonus is not rewarded at all\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            Setting a value to x means this bonus is rewarded until x number of pets have this bonus, then the reward is 0\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* Recommended Presets */}\r\n                            <div style={{ display: 'flex' }}>\r\n                                <div style={{ minWidth: '130px', width: '130px', maxWidth: '130px', marginRight: '12px', fontSize: '20px' }}>\r\n                                    Recommended Presets:\r\n                                </div>\r\n                                <div>\r\n\r\n                                    <div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            Main Team: This is the team you will run majority of your run\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            Reinc. Team: This is the team you will run when you want to reincarnate - run for at least 1 hour before reincarnation to get pet levels up\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            Gear Team: This is the team you will run when searching for new/better gear\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            Stat Team: This is the team you will run on the side for short bursts of time to cover any missing stats from the other 3 team presets\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* Custom Presets */}\r\n                            <div style={{ display: 'flex' }}>\r\n                                <div style={{ minWidth: '130px', width: '130px', maxWidth: '130px', marginRight: '12px', fontSize: '20px' }}>\r\n                                    Custom Presets:\r\n                                </div>\r\n                                <div>\r\n                                    <div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            You can save/load your own presets by entering a name and pressing `Save Current`.\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            To load preset in, select it from the drop down next to `Select saved preset`\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            To delete a preset, select it from the drop down next to `Delete preset`\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* Share Presets */}\r\n                            <div style={{ display: 'flex' }}>\r\n                                <div style={{ minWidth: '130px', width: '130px', maxWidth: '130px', marginRight: '12px', fontSize: '20px' }}>\r\n                                    Share Presets:\r\n                                </div>\r\n                                <div>\r\n                                    <div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            You can share/import other players presets\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            To share your preset, press `Copy Current Preset...` the value is automatically copied to your clipboard\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            {`To import someone elses preset, copy their shared value into the empty text box and press 'Import Preset'`}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n\r\n\r\n            </div >\r\n        </div >\r\n    )\r\n}","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\PetItem.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\teamSuggestions.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\AssemblyItem.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\AssemblyLine.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\page_content.jsx",["260"],[],"\"use client\"\r\n\r\n\r\nimport { isMobile } from 'mobile-device-detect';\r\nimport React, { useState, useEffect } from 'react';\r\nimport ReactGA from \"react-ga4\";\r\nimport { BonusMap } from '../util/itemMapping.js';\r\nimport farmingHelper from '../util/farmingHelper.js';\r\nimport mathHelper from '../util/math.js';\r\n\r\nimport AssemblyItem from './AssemblyItem.jsx';\r\nimport AssemblyLine from './AssemblyLine.jsx';\r\nimport MouseOverPopover from \"../util/Tooltip.jsx\";\r\n\r\nimport infoIcon from '../../../public/images/icons/info_white.svg';\r\nimport DefaultSave from '../util/tempSave.json';\r\nimport useLocalStorage from \"use-local-storage\";\r\n\r\nimport Image from 'next/image';\r\n\r\nReactGA.initialize([{\r\n    trackingId: \"G-GGLPK02VH8\",\r\n    // gaOptions: {...}, // optional\r\n    // gtagOptions: {\r\n    //     send_page_view: false\r\n    // },\r\n}]);\r\n\r\n\r\n\r\nexport default function Protein() {\r\n    const [mobileMode, setMobileMode] = useState(false);\r\n    useEffect(() => {\r\n        setMobileMode(isMobile);\r\n        if (isMobile) {\r\n            setTimeout(() => {\r\n                var viewport = document.querySelector('meta[name=\"viewport\"]');\r\n                if (viewport) {\r\n                    viewport.content = \"initial-scale=0.1\";\r\n                    viewport.content = \"width=1200\";\r\n                }\r\n            }, 500);\r\n        }\r\n    }, [isMobile]);\r\n    const [clientData, setData] = useLocalStorage('userData', DefaultSave);\r\n    const [data, setRunTimeData] = useState(DefaultSave);\r\n    const [assemblyBonuses, setAssemblyBonuses] = useState(-1);\r\n\r\n    useEffect(() => {\r\n        setRunTimeData(clientData);\r\n        let tempMap = {};\r\n        clientData.AssemblerCollection.forEach((val) => {\r\n            val.BonusList.forEach((inner_val) => {\r\n                tempMap[inner_val.ID] = true;\r\n            })\r\n        })\r\n        setAssemblyBonuses(tempMap);\r\n\r\n    }, [clientData]);\r\n\r\n\r\n    const [currentWeights, setCurrentWeights] = useState({});\r\n    const [cumulativeTime, setCumulativeTime] = useLocalStorage(`cumulativeTime`, false);\r\n    const [simplifiedView, setSimplifiedView] = useLocalStorage(`simplifiedView`, false);\r\n    const [numAL, setNumAl] = useLocalStorage(`numAL`, 5);\r\n\r\n    // useEffect(() => {\r\n    //     setTimeout(() => {\r\n    //         ReactGA.send({ hitType: \"pageview\", page: \"/protein_\", title: \"_Protein\" });\r\n    //     }, 500);\r\n\r\n    // }, [])\r\n\r\n    let tempList = [];\r\n\r\n    const cutOff = 100;\r\n\r\n    Object.values(BonusMap).forEach((val) => {\r\n\r\n        if (val.id < cutOff) {\r\n            tempList.push({ ...val, currentWeight: 0 })\r\n        }\r\n    })\r\n\r\n\r\n    tempList.sort((a, b) => a.label.localeCompare(b.label));\r\n\r\n    let tempData = JSON.parse(JSON.stringify(data));\r\n\r\n    if (!tempData.ProteinCurrent) {\r\n        return (\r\n            <div>\r\n                <h1>{`Your save is most likely from an older version, please update your game and try with a new save. If that's not the case, please reach out on discord! Link can be found on the gratitude (heart) page`}</h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    let runningTime = 0;\r\n    let currProtein = mathHelper.createDecimal(tempData.ProteinCurrent);\r\n    let protRate = farmingHelper.calcProteinPerSecond(tempData);\r\n    let bestAssemblies = [];\r\n    let totalLevels = 0;\r\n    let currentBonusTotals = {};\r\n\r\n    tempData.AssemblerCollection.forEach((inner_val) => {\r\n        totalLevels += inner_val.Level;\r\n        inner_val.BonusList.forEach((inner_bonus) => {\r\n            if (!currentBonusTotals[inner_bonus.ID]) {\r\n                currentBonusTotals[inner_bonus.ID] = 1;\r\n            }\r\n            currentBonusTotals[inner_bonus.ID] *= farmingHelper.calcAssemblyLine(inner_bonus, inner_val.Level);\r\n        })\r\n    });\r\n\r\n    if (Object.values(currentWeights).length > 0) {\r\n        for (let i = 0; i < numAL; i++) {\r\n            // let assembliesMap = {};\r\n            let assembliesMap = [];\r\n\r\n            for (let c = 0; c < tempData.AssemblerCollection.length; c++) {\r\n                let inner_val = tempData.AssemblerCollection[c];\r\n\r\n\r\n                if (inner_val.LockQty <= totalLevels && (inner_val.Level < inner_val.LevelMax)) {\r\n                    let increasedBonuses = {};\r\n\r\n                    //Calculate increase bonus if this line is upgraded\r\n                    for (let v = 0; v < tempData.AssemblerCollection.length; v++) {\r\n                        let inner_val_nested = tempData.AssemblerCollection[v];\r\n                        for (let b = 0; b < inner_val_nested.BonusList.length; b++) {\r\n                            let inner_bonus = inner_val_nested.BonusList[b];\r\n                            if (!increasedBonuses[inner_bonus.ID]) {\r\n                                increasedBonuses[inner_bonus.ID] = 1;\r\n                            }\r\n\r\n                            if (inner_bonus.StartingLevel > (inner_val_nested.Level + 1)) {\r\n                                continue;\r\n                            }\r\n\r\n                            let levelToUse = inner_val_nested.ID === inner_val.ID ? inner_val_nested.Level + 1 : inner_val_nested.Level\r\n\r\n                            increasedBonuses[inner_bonus.ID] *=\r\n                                farmingHelper.calcAssemblyLine(\r\n                                    inner_bonus,\r\n                                    levelToUse\r\n                                );\r\n                        }\r\n                    }\r\n\r\n                    let originalBonuses = [];\r\n                    let newBonuses = [];\r\n                    let cost = farmingHelper.calcAssemblyCost(inner_val.ID, tempData);\r\n                    inner_val.cost = cost;\r\n\r\n                    inner_val.BonusList.forEach((inner_bonus) => {\r\n                        originalBonuses.push({ ...inner_bonus, value: farmingHelper.calcAssemblyLine(inner_bonus, inner_val.Level) })\r\n                        newBonuses.push({ ...inner_bonus, Level: inner_val.Level + 1, value: farmingHelper.calcAssemblyLine(inner_bonus, inner_val.Level + 1) })\r\n                    });\r\n\r\n                    let weightedImprovement = 0;\r\n                    for (const [key, value] of Object.entries(currentBonusTotals)) {\r\n\r\n                        let alternateImprov = (increasedBonuses[key] - value) / value;\r\n                        alternateImprov *= currentWeights[key];\r\n                        weightedImprovement += alternateImprov;\r\n                    }\r\n\r\n                    // assembliesMap[inner_val.ID] = {...inner_val, score: weightedImprovement}\r\n                    assembliesMap.push({\r\n                        ...inner_val,\r\n                        score: weightedImprovement,\r\n                        cost_score: mathHelper.divideDecimal(cost, weightedImprovement)\r\n                    });\r\n                }\r\n            }\r\n\r\n            // assembliesMap.sort((a, b) => b.score - a.score);\r\n            assembliesMap.sort((a, b) => {\r\n                if (b.cost_score.lessThan(a.cost_score)) {\r\n                    return 1;\r\n                }\r\n                return -1\r\n            });\r\n\r\n\r\n            let cost = farmingHelper.calcAssemblyCost(assembliesMap[0].ID, tempData);\r\n            let timeToPurchase = mathHelper.subtractDecimal(cost, currProtein);\r\n\r\n            if (currProtein.greaterThan(cost)) {\r\n                timeToPurchase = 0;\r\n                if (cumulativeTime) {\r\n                    currProtein = mathHelper.subtractDecimal(currProtein, cost);\r\n                }\r\n            }\r\n            else {\r\n                timeToPurchase = mathHelper.divideDecimal(timeToPurchase, protRate);\r\n                if (cumulativeTime) {\r\n                    currProtein = mathHelper.createDecimal(0);\r\n                }\r\n            }\r\n            if (cumulativeTime) {\r\n                let tempHolder = mathHelper.addDecimal(0, timeToPurchase);\r\n                timeToPurchase = mathHelper.addDecimal(timeToPurchase, runningTime);\r\n                runningTime = mathHelper.addDecimal(runningTime, tempHolder);\r\n            }\r\n\r\n            bestAssemblies.push(\r\n                {\r\n                    assembly: JSON.parse(JSON.stringify(assembliesMap[0])),\r\n                    data: JSON.parse(JSON.stringify(tempData)),\r\n                    purchaseTime: timeToPurchase,\r\n                    cost: cost\r\n                }\r\n            );\r\n            tempData.AssemblerCollection[assembliesMap[0].ID].Level++;\r\n            totalLevels++;\r\n            currentBonusTotals = {};\r\n            for (let c = 0; c < tempData.AssemblerCollection.length; c++) {\r\n                let inner_val = tempData.AssemblerCollection[c];\r\n                for (let v = 0; v < inner_val.BonusList.length; v++) {\r\n                    let inner_bonus = inner_val.BonusList[v];\r\n                    if (!currentBonusTotals[inner_bonus.ID]) {\r\n                        currentBonusTotals[inner_bonus.ID] = 1;\r\n                    }\r\n                    currentBonusTotals[inner_bonus.ID] *= farmingHelper.calcAssemblyLine(inner_bonus, inner_val.Level);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let bestAssemblyFinal = [];\r\n    bestAssemblies.forEach((inner_val) => {\r\n\r\n        if (bestAssemblies.length === 0) return;\r\n        if (bestAssemblyFinal.length === 0) {\r\n\r\n\r\n            return bestAssemblyFinal.push(inner_val);\r\n        }\r\n\r\n        let current = bestAssemblyFinal[bestAssemblyFinal.length - 1];\r\n\r\n        if (current.assembly.ID !== inner_val.assembly.ID) {\r\n            bestAssemblyFinal.push(inner_val);\r\n        }\r\n        else {\r\n            //create a desired level of + 1\r\n            if (!current.desiredLevel) {\r\n                current.desiredLevel = current.assembly.Level + 2;\r\n            }\r\n            else {\r\n                current.desiredLevel += 1;\r\n            }\r\n            let tempCost = mathHelper.createDecimalString(current.cost);\r\n            let futureCost = mathHelper.createDecimalString(inner_val.cost);\r\n            let newCost = mathHelper.addDecimal(tempCost, futureCost);\r\n            current.cost = newCost;\r\n\r\n            if (cumulativeTime) {\r\n                current.purchaseTime = inner_val.purchaseTime;\r\n            }\r\n            else {\r\n                current.purchaseTime = mathHelper.addDecimal(current.purchaseTime, inner_val.purchaseTime);\r\n            }\r\n        }\r\n    });\r\n\r\n    bestAssemblies = bestAssemblyFinal;\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n                flex: '1',\r\n                backgroundColor: 'black',\r\n                position: 'relative',\r\n            }}\r\n        >\r\n            <div style={{\r\n                display: 'flex',\r\n                flex: '1',\r\n                // alignItems: 'center',\r\n                // justifyContent: 'center',\r\n                backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                paddingLeft: '12px'\r\n            }}>\r\n\r\n\r\n                {/* Top x assembly line */}\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    alignSelf: 'start',\r\n                    width: '550px',\r\n                    // maxHeight: 'calc(100% - 49px)',\r\n                    margin: '12px 36px 12px 0px', padding: '12px', borderRadius: '12px'\r\n                }}>\r\n                    {/* header */}\r\n                    <div\r\n                        style={{\r\n                            // display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', flex: '1'\r\n                            maxHeight: 'calc(100vh - 50px)'\r\n                        }}\r\n                    >\r\n                        <div\r\n                            className='importantText'\r\n                            style={{ fontSize: '36px', marginTop: '-6px', marginBottom: '6px' }}\r\n                        >\r\n                            Best Purchase Sequence\r\n                        </div >\r\n\r\n                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginTop: '-3px', marginBottom: '6px' }}>\r\n\r\n                            <div>\r\n                                {/* Cumulative time  */}\r\n                                <div\r\n                                    className='importantText'\r\n                                    style={{ fontSize: '18px', }}\r\n                                >\r\n                                    Use cumulative purchase time:\r\n\r\n\r\n                                    <input\r\n                                        aria-label='Specify if the time to purchase should be individual or cumlative in order of suggested purchases'\r\n                                        type=\"checkbox\"\r\n                                        onChange={(e) => {\r\n                                            setCumulativeTime(e.target.checked ? 1 : 0)\r\n                                        }}\r\n                                        checked={!!cumulativeTime}\r\n                                        value={!!cumulativeTime}\r\n                                    />\r\n\r\n                                </div>\r\n                              \r\n                                {/* Minified View */}\r\n                                <div\r\n                                    className='importantText'\r\n                                    style={{ fontSize: '18px', }}\r\n                                >\r\n                                    Use minifed view:\r\n\r\n                                    <input\r\n                                        aria-label='Specify if each assembly line should be collapsed to hide the bonuses and only show costs, levels and times'\r\n                                        type=\"checkbox\"\r\n                                        onChange={(e) => {\r\n                                            setSimplifiedView(e.target.checked ? 1 : 0)\r\n                                        }}\r\n                                        checked={!!simplifiedView}\r\n                                        value={!!simplifiedView}\r\n                                    />\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            <MouseOverPopover tooltip={\r\n                                <div style={{ maxWidth: '814px' }}>\r\n                                    <div style={{ display: 'flex' }}>\r\n                                        <div style={{ fontWeight: 'bold', marginRight: '6px' }}>\r\n                                            Use cumulative purchase time:\r\n                                        </div>\r\n                                        <div>\r\n                                            when checked, will display each purchase time as the time necessary to buy all the upgrades before that purchase (inculding itself).\r\n                                            Otherwise, it will show the current time to purchase if it is the next assembly upgraded\r\n                                        </div>\r\n                                    </div>\r\n                                    <div style={{ display: 'flex', marginTop: '12px' }}>\r\n                                        <div style={{ fontWeight: 'bold', marginRight: '6px' }}>\r\n                                            Num purchases:\r\n                                        </div>\r\n                                        <div>\r\n                                            will calculate and display the selected number of the next suggested assembly purchases\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            }>\r\n                                <div style={{ height: '24px', width: '24px', position: 'relative' }}>\r\n                                    <Image\r\n                                        alt='info icon popup additional information'\r\n                                        src={infoIcon}\r\n                                        fill\r\n                                        unoptimized\r\n                                    />\r\n                                </div>\r\n                                {/* <img alt='info icon popup additional information' src={infoIcon} style={{ height: '24px' }} /> */}\r\n\r\n                            </MouseOverPopover>\r\n\r\n\r\n                            {/* num purchases */}\r\n                            <div style={{ display: 'flex', alignItems: 'center', marginRight: '2px' }}>\r\n                                <div\r\n                                    className='importantText'\r\n                                    style={{ fontSize: '18px', marginRight: '6px' }}\r\n                                >\r\n                                    Num purchases\r\n                                </div>\r\n                                <input\r\n                                    aria-label='Specify how many purchases to calculate into the future'\r\n                                    className='importantText textMedium2'\r\n                                    style={{ borderRadius: '4px', width: '36px', height: '65%', backgroundColor: '#2D2D2D' }}\r\n                                    type='number'\r\n                                    value={numAL}\r\n                                    onChange={\r\n                                        (inner_e) => {\r\n                                            try {\r\n                                                let x = Number(inner_e.target.value);\r\n                                                // x = Math.floor(x);\r\n                                                if (x < 1 || x > 99) {\r\n                                                    return;\r\n                                                }\r\n                                                setNumAl(x);\r\n\r\n                                                ReactGA.event({\r\n                                                    category: \"protein_interaction\",\r\n                                                    action: `changed_num_AL`,\r\n                                                    label: `${x}`,\r\n                                                    value: x\r\n                                                })\r\n\r\n                                            }\r\n                                            catch (err) {\r\n                                                console.log(err);\r\n                                            }\r\n                                        }}\r\n                                    min=\"1\"\r\n                                    max=\"99\"\r\n                                />\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                                height: '100%',\r\n                                overflow: 'hidden',\r\n                                borderBottomLeftRadius: '6px',\r\n                                borderBottomRightRadius: '6px',\r\n                                borderTopRightRadius: '6px'\r\n                            }}\r\n                        >\r\n                            <div style={{\r\n                                overflow: 'auto',\r\n                                maxHeight: 'calc(100vh - 150px)',\r\n                            }}>\r\n                                {bestAssemblies.length > 0 && (\r\n                                    <>\r\n                                        {bestAssemblies.map((e, index) => {\r\n                                            return <AssemblyLine\r\n                                                key={index}\r\n                                                key_inner={index}\r\n                                                data={e.data}\r\n                                                assemblyID={e.assembly.ID}\r\n                                                index={index + 1}\r\n                                                purchaseTime={e.purchaseTime}\r\n                                                cost={e.cost}\r\n                                                futureLevel={e.desiredLevel ? e.desiredLevel : e.assembly.Level + 1}\r\n                                                simplifiedView={simplifiedView}\r\n                                            />\r\n                                        })}\r\n                                    </>\r\n                                )\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n\r\n\r\n                {/* Weight Table */}\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    width: '550px',\r\n                    maxHeight: 'calc(100% - 49px)',\r\n                    margin: '12px 0 12px 0', padding: '12px', borderRadius: '12px'\r\n                }}>\r\n                    {/* header */}\r\n                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', }}>\r\n                        <div\r\n                            className='importantText'\r\n                            style={{ fontSize: '36px', marginTop: '-6px', marginBottom: '6px' }}\r\n                        >\r\n                            Bonus Weights\r\n                        </div >\r\n                    </div>\r\n\r\n                    {/* Actual table */}\r\n\r\n                    <div\r\n                        style={{\r\n                            width: '100%',\r\n                            maxHeight: 'calc(100% - 42px)'\r\n                        }}\r\n                    >\r\n                        <div\r\n                            style={{\r\n                                height: '100%',\r\n                                overflow: 'hidden',\r\n                                borderBottomLeftRadius: '6px',\r\n                                borderBottomRightRadius: '6px'\r\n                            }}\r\n                        >\r\n                            {/* Headers */}\r\n                            <div style={{ display: 'flex' }}>\r\n\r\n                                <div style={{\r\n                                    width: '64%', display: 'flex', alignItems: 'center', justifyContent: 'center', backgroundColor: 'rgba(255,255,255, 0.085)',\r\n                                    borderTopLeftRadius: '6px', boxSizing: 'border-box',\r\n                                    //  borderBottomLeftRadius: '6px',\r\n                                    borderTop: '1.5px solid rgba(255,255,255,0.8)', borderBottom: '1px solid rgba(255,255,255,0.8)', borderLeft: '1px solid rgba(255,255,255,0.8)',\r\n                                }}>\r\n                                    <div className='importantText' style={{ fontSize: '24px' }} >\r\n                                        Bonus\r\n                                    </div >\r\n                                </div>\r\n                                <div style={{\r\n                                    width: '15%', display: 'flex', alignItems: 'center', justifyContent: 'center', backgroundColor: 'rgba(255,255,255, 0.085)',\r\n                                    border: '1px solid rgba(255,255,255,0.8)',\r\n                                    boxSizing: 'border-box',\r\n                                }}>\r\n                                    <div className='importantText' style={{ fontSize: '24px' }} >\r\n                                        Default\r\n                                    </div >\r\n                                </div>\r\n                                <div style={{\r\n                                    width: '18%', display: 'flex', alignItems: 'center', justifyContent: 'center', backgroundColor: 'rgba(255,255,255, 0.085)',\r\n                                    borderTopRightRadius: '6px', boxSizing: 'border-box',\r\n                                    //  borderBottomRightRadius: '6px',\r\n                                    borderTop: '1.5px solid rgba(255,255,255,0.8)', borderBottom: '1px solid rgba(255,255,255,0.8)', borderRight: '1px solid rgba(255,255,255,0.8)',\r\n                                }}>\r\n                                    <div className='importantText' style={{ fontSize: '24px' }} >\r\n                                        Current\r\n                                    </div >\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n                            {/* Weights/Rows */}\r\n                            <div\r\n                                style={{\r\n                                    overflow: 'auto',\r\n                                    maxHeight: 'calc(100% - 30px)',\r\n                                }}\r\n                            >\r\n                                {\r\n                                    tempList.map((e, index) => {\r\n\r\n                                        if (assemblyBonuses !== -1 && !(e.id in assemblyBonuses)) {\r\n                                            return <div key={index}></div>\r\n                                        }\r\n\r\n                                        if (!e.disabled)\r\n                                            return (\r\n                                                <div\r\n                                                    key={index}\r\n                                                    style={{\r\n                                                        display: 'flex',\r\n                                                        width: '100%', backgroundColor: index % 2 === 0 ? 'rgba(255,255,255, 0.085)' : 'rgba(255,255,255, 0.12)',\r\n                                                        height: '40px',\r\n                                                        borderBottomLeftRadius: index === (tempList.length - 1) ? '6px' : '',\r\n                                                        borderBottomRightRadius: index === (tempList.length - 1) ? '6px' : '',\r\n\r\n                                                    }}>\r\n                                                    <AssemblyItem e={{ ...e, index: index }} currentWeight={currentWeights} setCurrentWeights={setCurrentWeights} />\r\n                                                </div>\r\n                                            )\r\n                                        return <div key={index}></div>\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        </div >\r\n    );\r\n};","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\page_content.jsx",["261"],[],"\"use client\"\r\n\r\nimport { isMobile } from 'mobile-device-detect';\r\nimport pagecss from './page.css';\r\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport ReactGA from \"react-ga4\";\r\nimport { BonusMap } from '../util/itemMapping.js';\r\nimport farmingHelper from '../util/farmingHelper.js';\r\nimport mathHelper from '../util/math.js';\r\nimport helper from \"../util/helper.js\";\r\n\r\n\r\nimport { residueMap } from './residueMapping.js';\r\nimport MouseOverPopover from \"../util/Tooltip.jsx\";\r\n\r\nimport infoIcon from '../../../public/images/icons/info_white_thick.svg';\r\nimport RefreshIcon from '../../../public/images/icons/refresh_lightgray.svg';\r\nimport greenBorder from '../../../public/images/residue/ShopUpgradeSelected.png';\r\nimport StillBuying from '../../../public/images/residue/StillBuying.png';\r\nimport rightArrow from '../../../public/images/icons/right_arrow_white.svg';\r\nimport DefaultSave from '../util/tempSave.json';\r\nimport useLocalStorage from \"use-local-storage\";\r\n\r\nimport Image from 'next/image';\r\n\r\nReactGA.initialize([{\r\n    trackingId: \"G-GGLPK02VH8\"\r\n}]);\r\n\r\n\r\nconst ResidueCard = ({ data, params, desiredLevels, setDesiredLevels, forceReinc, reincLevelIncrease }) => {\r\n    // const weight = params.weight(asc_level);\r\n    const [clientWeight, setClientWeight] = useLocalStorage(`${params.label}_residue_weight`, -1);\r\n    const [runTimeWeight, setRunTimeWeight] = useState(1);\r\n    useEffect(() => {\r\n        setRunTimeWeight(clientWeight)\r\n    }, [clientWeight]);\r\n\r\n    const [hovering, setHovering] = useState(false);\r\n\r\n    const level = data[params.key];\r\n\r\n    const asc_level = data.AscensionCount;\r\n    const weight = runTimeWeight === -1 ? params.weight(asc_level) : runTimeWeight;\r\n    const locked = (!hovering) && asc_level < params.unlock;\r\n\r\n    const cost = params.cost(level);\r\n\r\n    const reinc = residueMap['reinc'];\r\n    const [reincWeightClient, setReincWeight] = useLocalStorage(`${reinc.label}_residue_weight`, -1);\r\n    const [reincWeight, setRunTimeReincWeight] = useState(data[reinc.key]);\r\n    useEffect(() => {\r\n        const reinc = residueMap['reinc'];\r\n        setRunTimeReincWeight(reincWeightClient === -1 ? reinc.weight(asc_level) : reincWeightClient);\r\n    }, [reincWeightClient, asc_level])\r\n\r\n\r\n    let highestKey = params.highestKey(params.key);\r\n    let highestPurchase = data[highestKey];\r\n\r\n    const finishedBuying = level >= highestPurchase;\r\n\r\n    let desiredLevel = level;\r\n\r\n\r\n    let reincOverride = forceReinc && params.key_inner === 'reinc' || (params.key_inner === 'reinc' && reincLevelIncrease > 0);\r\n\r\n    let inner_calcs = useMemo(() => {\r\n\r\n\r\n        let inner_orders = [];\r\n        let needToIncrease = true;\r\n        let inner_params = residueMap[params.key_inner];\r\n        const asc_level = data.AscensionCount;\r\n        const weight = runTimeWeight === -1 ? inner_params.weight(asc_level) : runTimeWeight;\r\n        const level = data[params.key];\r\n        let desiredLevel = level;\r\n        const reinc = residueMap['reinc'];\r\n        const reincLevel = data[reinc.key] + reincLevelIncrease;\r\n\r\n        const reincCost = reinc.cost(reincLevel);\r\n\r\n        const ratio = weight / reincWeight;\r\n        const weightedCost = mathHelper.multiplyDecimal(reincCost, ratio);\r\n\r\n\r\n        if (reincOverride) {\r\n            return [[], desiredLevel];\r\n        }\r\n\r\n\r\n        while (needToIncrease) {\r\n            needToIncrease = false;\r\n\r\n            let newCost = inner_params.cost(desiredLevel);\r\n            if (newCost.lessThan(weightedCost)) {\r\n                desiredLevel++;\r\n                needToIncrease = true;\r\n                inner_orders.push({ desiredLevel, newCost, weightedCost: mathHelper.divideDecimal(newCost, weight), weight: weight, params: inner_params });\r\n            }\r\n        }\r\n        return [inner_orders, desiredLevel];\r\n    }, [params.key, params.key_inner, data, reincWeight, runTimeWeight, reincOverride, reincLevelIncrease]);\r\n\r\n    let purchaseOrders = inner_calcs[0];\r\n    desiredLevel = inner_calcs[1];\r\n\r\n    let needPurchase = desiredLevel > level;\r\n\r\n    useEffect(() => {\r\n        let reincOverride = forceReinc && params.key_inner === 'reinc' || (params.key_inner === 'reinc' && reincLevelIncrease > 0);\r\n        if (locked) {\r\n\r\n            return setDesiredLevels((curr_levels) => {\r\n                if (!curr_levels[params.key]) {\r\n                    return curr_levels;\r\n                }\r\n                let temp = { ...curr_levels };\r\n                delete temp[params.key];\r\n                return temp;\r\n            })\r\n        }\r\n\r\n        if (needPurchase && !desiredLevels[params.key]) {\r\n            setDesiredLevels((curr_levels) => {\r\n                let temp = { ...curr_levels };\r\n                temp[params.key] = {\r\n                    ...params,\r\n                    purchaseOrders: purchaseOrders,\r\n                    desiredLevel: desiredLevel, level: level, weight: weight\r\n                };\r\n                return temp;\r\n            })\r\n        }\r\n        else if (desiredLevels[params.key]?.desiredLevel !== desiredLevel && !reincOverride\r\n            || (desiredLevels[params.key]?.purchaseOrders !== purchaseOrders)) {\r\n            setDesiredLevels((curr_levels) => {\r\n                let temp = { ...curr_levels };\r\n                temp[params.key] = {\r\n                    ...params,\r\n                    purchaseOrders: purchaseOrders,\r\n                    desiredLevel: desiredLevel, level: level, weight: weight\r\n                };\r\n                return temp;\r\n            })\r\n        }\r\n    }, [\r\n        forceReinc,\r\n        desiredLevels,\r\n        desiredLevel,\r\n        level,\r\n        params,\r\n        setDesiredLevels,\r\n        needPurchase,\r\n        purchaseOrders,\r\n        clientWeight,\r\n        runTimeWeight,\r\n        weight,\r\n        locked,\r\n        data,\r\n        reincLevelIncrease\r\n    ])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className='importantText residueCard'\r\n            onMouseEnter={() => { setHovering(true); }}\r\n            onMouseLeave={() => { setHovering(false); }}\r\n        >\r\n            <div className='residueCardHeader'>\r\n                <div>\r\n                    {locked ? `?????` : `${params.label}: ${level}`}\r\n                </div>\r\n                {((finishedBuying && needPurchase) || (finishedBuying && reincOverride)) && !locked && (\r\n                    <div className='futurePurchase'>\r\n                        <div>\r\n                            {`${reincOverride ? (reincLevelIncrease > 0 ? reincLevelIncrease : 1) + desiredLevel : desiredLevel}`}\r\n                        </div>\r\n                        <div>\r\n                            {`+${reincOverride ? desiredLevel - level + (reincLevelIncrease > 0 ? reincLevelIncrease : 1) : desiredLevel - level}`}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className='residueCardBody'>\r\n\r\n                <div style={{ position: 'absolute', right: '9px', top: '9px', zIndex: '2' }}>\r\n\r\n                    <MouseOverPopover tooltip={\r\n                        <div>\r\n                            <div>\r\n                                {`Cost: ${params.cost(level).toExponential(2)}`}\r\n                            </div>\r\n                            <div>\r\n                                {`Bonus: ${helper.numberWithCommas(params.bonus(level).ceil().toString())}%`}\r\n                            </div>\r\n                        </div>\r\n                    }>\r\n                        <div style={{ position: 'relative', width: '30px', height: '30px' }}>\r\n                            <Image src={infoIcon} fill unoptimized alt=\"letter i in a circle\" />\r\n                        </div>\r\n                    </MouseOverPopover>\r\n                </div>\r\n                {!locked && (\r\n                    <div style={{ position: 'absolute', left: '8px', bottom: '8px', zIndex: '2', display: 'flex', alignItems: 'center' }}>\r\n                        <div>\r\n                            Weight:\r\n                        </div>\r\n                        <div\r\n                            style={{ marginLeft: '6px' }}\r\n                        >\r\n                            <input\r\n                                aria-label='Specify how important this bonus is'\r\n                                className='importantText textMedium2'\r\n                                style={{ borderRadius: '4px', width: '48px', height: '12px', backgroundColor: '#1D1D1D' }}\r\n                                type='number'\r\n                                value={weight}\r\n                                onChange={\r\n                                    (inner_e) => {\r\n\r\n                                        try {\r\n                                            let x = Number(inner_e.target.value);\r\n                                            // x = Math.floor(x);\r\n                                            if (x < 0 || x > 9999) {\r\n                                                return;\r\n                                            }\r\n                                            setClientWeight(x);\r\n\r\n                                            ReactGA.event({\r\n                                                category: \"residue_interaction\",\r\n                                                action: `changed_residue_weight`,\r\n                                                label: `${params.label}`,\r\n                                                value: x\r\n                                            });\r\n\r\n                                        }\r\n                                        catch (err) {\r\n                                            console.log(err);\r\n                                        }\r\n                                    }}\r\n                                min=\"0\"\r\n                                max=\"9999\"\r\n                            />\r\n                        </div>\r\n                        {(weight !== params.weight(asc_level)) && (\r\n                            <div className='hover'\r\n                                style={{ position: 'relative', width: '18px', height: '18px', marginLeft: '6px' }}\r\n                                onClick={() => {\r\n                                    setClientWeight(-1);\r\n                                }}\r\n                            >\r\n                                <Image src={RefreshIcon} fill unoptimized alt='reset, 2 arrows in a circle' />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n\r\n                {!!locked && (\r\n                    <Image src={residueMap['locked'].img} fill unoptimized alt={`locked bonus image from in game`} />\r\n                )}\r\n                {!locked && (\r\n                    <Image src={params.img} fill unoptimized alt={`${params.key} bonus from in game`} />\r\n                )}\r\n                {(!!needPurchase || (reincOverride)) && !locked && (\r\n                    <Image src={greenBorder} fill unoptimized alt={`Green border to indicate an upgrade should be purchased`} />\r\n                )}\r\n                {!finishedBuying && (\r\n                    <Image src={StillBuying} fill unoptimized alt={`Yellow border to indicate an upgrade is still autobuying`} />\r\n                )}\r\n            </div>\r\n            <div className='residueCardFooter'></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ResideOrderCard = ({ data }) => {\r\n\r\n    return (\r\n        <div className='importantText suggestionCard'>\r\n            <div className='suggestionCardHeader'>\r\n                <div>\r\n                    {`${data.params.label}`}\r\n                </div>\r\n                <div style={{ marginLeft: 'auto' }}>\r\n                    {`Cost: ${data.totalCost.toExponential(2).toString()}`}\r\n                </div>\r\n            </div>\r\n            <div className='suggestionCardBody'>\r\n                <div style={{\r\n                    position: 'relative',\r\n                    height: '45px'\r\n                }}>\r\n                    <Image\r\n                        alt={`${data.params.label} bonus holder`}\r\n                        style={{ width: 'auto', height: '100%' }}\r\n                        src={data.params.label_img} unoptimized\r\n                    />\r\n\r\n\r\n                    <div className='blackTextStroke1'\r\n                        style={{\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            position: 'absolute',\r\n                            top: 'calc(50% - 14px)',\r\n                            left: '48px',\r\n                            fontSize: '27px',\r\n                            fontWeight: 'bold',\r\n                            width: 'calc(100% - 52px)'\r\n                        }}>\r\n\r\n                        <div>\r\n                            {`${data.start}`}\r\n                        </div>\r\n                        <div style={{ height: '32px', width: '32px', position: 'relative', margin: '0 3px' }}>\r\n                            <Image\r\n                                alt='arrow point to the left'\r\n                                src={rightArrow}\r\n                                fill\r\n                                unoptimized\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            {`${data.desiredLevel}`}\r\n                        </div>\r\n                        <div style={{ marginLeft: 'auto' }}>\r\n                            {`+${data.desiredLevel - data.start}`}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default function Residue() {\r\n    const [mobileMode, setMobileMode] = useState(false);\r\n    useEffect(() => {\r\n        setMobileMode(isMobile);\r\n        if (isMobile) {\r\n            setTimeout(() => {\r\n                var viewport = document.querySelector('meta[name=\"viewport\"]');\r\n                if (viewport) {\r\n                    viewport.content = \"initial-scale=0.1\";\r\n                    viewport.content = \"width=1200\";\r\n                }\r\n            }, 500);\r\n        }\r\n    }, [isMobile]);\r\n    const [desiredLevels, setDesiredLevels] = useState({});\r\n    const [forceReinc, setForceReinc] = useState(false);\r\n    const [reincLevelIncrease, setReincLevelIncrease] = useState(0);\r\n    const [needToIncreaseReinc, setNeedToIncreaseReinc] = useState(false);\r\n    const increasingReinc = useRef(false);\r\n    const increasingReinc2 = useRef(false);\r\n\r\n    const [clientData, setData] = useLocalStorage('userData', DefaultSave);\r\n    const [data, setRunTimeData] = useState(DefaultSave);\r\n    const dataLoaded = useRef(false);\r\n    useEffect(() => {\r\n        if (!dataLoaded.current) {\r\n            setRunTimeData(clientData);\r\n            dataLoaded.current = true;\r\n            setReincLevelIncrease(0);\r\n            setNeedToIncreaseReinc(false);\r\n        }\r\n    }, [clientData, dataLoaded]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (needToIncreaseReinc && increasingReinc.current === false) {\r\n            increasingReinc.current = true;\r\n            setTimeout(() => {\r\n                setReincLevelIncrease(reincLevelIncrease + 1);\r\n                setNeedToIncreaseReinc(false);\r\n                increasingReinc.current = false;\r\n                increasingReinc2.current = false;\r\n            }, 5);\r\n        }\r\n        \r\n    }, [reincLevelIncrease, needToIncreaseReinc, increasingReinc, increasingReinc2]);//If you remove (reincLevelIncrease) it will to rerender even though it shouldn't need it\r\n\r\n    let suggestedPurchases = [];\r\n    let reincParams = residueMap['reinc'];\r\n    let objToIterate = forceReinc ?\r\n        {\r\n            'reinc': {\r\n                ...reincParams,\r\n                purchaseOrders: [\r\n                    {\r\n                        desiredLevel: data[reincParams.key] + 1,\r\n                        newCost: reincParams.cost(data[reincParams.key]),\r\n                        weightedCost: mathHelper.divideDecimal(reincParams.cost(data[reincParams.key]), reincParams.weight(data.AscensionCount)),\r\n                        weight: reincParams.weight(data.AscensionCount),\r\n                        params: reincParams\r\n                    }\r\n                ],\r\n                desiredLevel: data[reincParams.key] + 1, level: data[reincParams.key], weight: reincParams.weight(data.AscensionCount)\r\n            }\r\n        }\r\n        : desiredLevels;\r\n\r\n\r\n    if (reincLevelIncrease > 0) {\r\n\r\n        let reincStart = {\r\n            ...reincParams,\r\n            purchaseOrders: [],\r\n            desiredLevel: data[reincParams.key] + reincLevelIncrease, level: data[reincParams.key], weight: reincParams.weight(data.AscensionCount)\r\n        };\r\n\r\n        for (let i = 0; i < reincLevelIncrease; i++) {\r\n            reincStart.purchaseOrders.push({\r\n                desiredLevel: data[reincParams.key] + (i + 1),\r\n                newCost: reincParams.cost(data[reincParams.key] + i),\r\n                weightedCost: mathHelper.divideDecimal(reincParams.cost(data[reincParams.key] + i), reincParams.weight(data.AscensionCount)),\r\n                weight: reincParams.weight(data.AscensionCount),\r\n                params: reincParams\r\n            })\r\n        }\r\n        objToIterate['reinc'] = reincStart;\r\n        // delete objToIterate['CowShopReincarnationBonus'];\r\n    }\r\n\r\n    Object.entries(objToIterate).map((val) => {\r\n\r\n        val[1].purchaseOrders.forEach((inner_val) => suggestedPurchases.push(inner_val));\r\n\r\n        return val[1];\r\n    });\r\n\r\n    let stillBuying = data[reincParams.highestKey(reincParams.key)] > data[reincParams.key];\r\n\r\n    let currentResidue = mathHelper.createDecimal(data.CurrentResidueBD);\r\n\r\n\r\n    let runningCost = mathHelper.createDecimal(0);\r\n    let affordableCost = mathHelper.createDecimal(0);\r\n    let affordablePurchases = [];\r\n    let futurePurchases = [];\r\n\r\n    suggestedPurchases.sort((a, b) => a.weightedCost.lessThan(b.weightedCost) ? -1 : 1);\r\n\r\n    let runningLevels = {};\r\n\r\n    suggestedPurchases.forEach((suggestion) => {\r\n\r\n        runningCost = mathHelper.addDecimal(runningCost, suggestion.newCost);\r\n        if (runningCost.lessThan(currentResidue)) {\r\n            affordableCost = mathHelper.addDecimal(affordableCost, suggestion.newCost);\r\n            if (affordablePurchases.length === 0) {\r\n                affordablePurchases.push({ ...suggestion, start: suggestion.desiredLevel - 1, totalCost: suggestion.newCost });\r\n                runningLevels[suggestion.params.key] = suggestion.desiredLevel;\r\n            }\r\n            else {\r\n                let current = affordablePurchases[affordablePurchases.length - 1];\r\n                if (current.params.key === suggestion.params.key) {\r\n                    current.desiredLevel++;\r\n                    current.totalCost = mathHelper.addDecimal(current.totalCost, suggestion.newCost);\r\n                    runningLevels[suggestion.params.key] = current.desiredLevel;\r\n                }\r\n                else {\r\n                    affordablePurchases.push({ ...suggestion, start: suggestion.desiredLevel - 1, totalCost: suggestion.newCost });\r\n                    runningLevels[suggestion.params.key] = suggestion.desiredLevel;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (futurePurchases.length === 0) {\r\n\r\n                futurePurchases.push({\r\n                    ...suggestion,\r\n                    start: runningLevels[suggestion.params.key] ? runningLevels[suggestion.params.key] : suggestion.desiredLevel - 1,\r\n                    totalCost: suggestion.newCost\r\n                });\r\n            }\r\n            else {\r\n                let current = futurePurchases[futurePurchases.length - 1];\r\n                if (current.params.key === suggestion.params.key) {\r\n                    current.desiredLevel++;\r\n                    current.totalCost = mathHelper.addDecimal(current.totalCost, suggestion.newCost);\r\n                    runningLevels[suggestion.params.key] = current.desiredLevel;\r\n                }\r\n                else {\r\n                    futurePurchases.push({\r\n                        ...suggestion,\r\n                        start: runningLevels[suggestion.params.key] ? runningLevels[suggestion.params.key] : suggestion.desiredLevel - 1,\r\n                        totalCost: suggestion.newCost\r\n                    });\r\n                    runningLevels[suggestion.params.key] = suggestion.desiredLevel;\r\n                }\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (!dataLoaded.current) return;\r\n        let inner_arr = [];\r\n\r\n        Object.entries(desiredLevels).map((val) => {\r\n            val[1].purchaseOrders.forEach((inner_val) => inner_arr.push(inner_val));\r\n            return val[1];\r\n        });\r\n\r\n        if (inner_arr.length === 0) {\r\n            setForceReinc(true);\r\n        }\r\n        else {\r\n            setForceReinc(false);\r\n        }\r\n\r\n    }, [desiredLevels, dataLoaded])\r\n\r\n    //loop over affordable purchases and combine them into one bulk (no need to step them since it's all bought anyways)\r\n    let finalAffordablePurchasesMap = {};\r\n    affordablePurchases.forEach((inner_val) => {\r\n        if (!finalAffordablePurchasesMap[inner_val.params.key]) {\r\n            finalAffordablePurchasesMap[inner_val.params.key] = inner_val;\r\n        }\r\n        else {\r\n            finalAffordablePurchasesMap[inner_val.params.key].desiredLevel = inner_val.desiredLevel;\r\n        }\r\n    })\r\n\r\n    affordablePurchases = [];\r\n    for (const [key, val] of Object.entries(finalAffordablePurchasesMap)) {\r\n        affordablePurchases.push(val);\r\n    }\r\n    affordablePurchases.sort((a, b) => b.weight - a.weight);\r\n\r\n\r\n    //Meaning we can afford everythingg, pretend like the reinc level went up +1, recalc\r\n    if (futurePurchases.length === 0 && !increasingReinc2.current && dataLoaded.current) {\r\n        // setReincLevelIncrease((inner_val) => inner_val + 1);\r\n        setNeedToIncreaseReinc(true);\r\n        increasingReinc2.current = true;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n                flex: '1',\r\n                backgroundColor: 'black',\r\n                position: 'relative',\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    flex: '1',\r\n                    backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                    paddingLeft: '12px'\r\n                }}\r\n            >\r\n                {/* Current Card + Wanted Levels */}\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignSelf: 'start',\r\n                        width: '900px',\r\n                        border: \"2px solid rgba(255,255,255,0.8)\",\r\n                        margin: '12px 36px 0 0px',\r\n                        borderRadius: '12px',\r\n                        height: 'calc(100vh - 68px)',\r\n                        paddingBottom: '12px'\r\n                    }}\r\n                >\r\n                    {/* header */}\r\n                    <div\r\n                        style={{ backgroundColor: 'rgba(255,255,255, 0.05)', }}\r\n                    >\r\n                        <div\r\n                            className='importantText'\r\n                            style={{ fontSize: '36px', display: 'flex', alignItems: 'center', justifyContent: 'center', margin: '12px 0' }}\r\n                        >\r\n                            {`Current Residue${stillBuying ? ` - STILL BUYING` : ``}`}\r\n                        </div >\r\n                    </div >\r\n\r\n                    {/* Card List */}\r\n                    <div style={{\r\n                        height: 'calc(100% - 42px)', padding: '0 6px 0 0'\r\n                    }}>\r\n\r\n                        <div style={{\r\n                            display: 'flex', flexWrap: 'wrap', maxHeight: '100%',\r\n                            overflowY: 'auto',\r\n                        }}>\r\n                            {Object.entries(residueMap).filter((value) => value[0] !== 'locked').sort((a, b) => a[1].order - b[1].order).map((value, index) => {\r\n                                let key = value[0];\r\n                                let params = value[1];\r\n\r\n                                return <ResidueCard\r\n                                    data={data}\r\n                                    desiredLevels={desiredLevels}\r\n                                    setDesiredLevels={setDesiredLevels}\r\n                                    params={{ ...params, key_inner: key, currentResidue: currentResidue }}\r\n                                    key={index}\r\n                                    forceReinc={forceReinc}\r\n                                    reincLevelIncrease={reincLevelIncrease}\r\n                                />\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n\r\n                {/* Suggested Purchase Order */}\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignSelf: 'start',\r\n                        width: '445px',\r\n                        border: \"2px solid rgba(255,255,255,0.8)\",\r\n                        margin: '12px 36px 12px 0px',\r\n                        borderRadius: '12px',\r\n                        height: 'calc(100vh - 68px)',\r\n                        paddingBottom: '12px',\r\n                        overflow: 'hidden',\r\n                    }}\r\n                >\r\n                    {/* header */}\r\n                    <div\r\n                        style={{ backgroundColor: 'rgba(255,255,255, 0.05)', }}\r\n                    >\r\n                        <div\r\n                            className='importantText'\r\n                            style={{ fontSize: '36px', display: 'flex', alignItems: 'center', justifyContent: 'center', margin: '12px 0' }}\r\n                        >\r\n                            Suggested Purchase Order\r\n                        </div >\r\n                    </div >\r\n\r\n                    {/* Card List */}\r\n                    <div style={{\r\n                        height: 'calc(100% - 42px)', padding: '0 6px 0 0'\r\n                    }}>\r\n                        {!stillBuying && (\r\n                            <div className='suggestedOrder importantText'\r\n                                style={{\r\n                                    display: 'flex', flexDirection: 'column', height: 'calc(100% - 11px)',\r\n                                    overflowY: 'auto', alignItems: 'center'\r\n                                }}\r\n                            >\r\n                                <h2 style={{ marginBottom: '3px' }}>Affordable Purchase Order</h2>\r\n                                <button\r\n                                    onClick={() => {\r\n\r\n                                        ReactGA.event({\r\n                                            category: \"residue_interaction\",\r\n                                            action: `accept_affordable_order`,\r\n                                        });\r\n\r\n                                        let finalLevels = {};\r\n                                        affordablePurchases.forEach((purchase) => {\r\n                                            finalLevels[purchase.params.key] = purchase.desiredLevel\r\n                                        });\r\n                                        setDesiredLevels({});\r\n                                        setRunTimeData((curData) => {\r\n                                            let temp_data = { ...curData };\r\n                                            let leftoverRes = mathHelper.subtractDecimal(currentResidue, affordableCost);\r\n                                            temp_data.CurrentResidueBD = { mantissa: leftoverRes.mantissa, exponent: leftoverRes.exponent };\r\n                                            for (const [key, value] of Object.entries(finalLevels)) {\r\n                                                temp_data[key] = value;\r\n                                            }\r\n                                            return temp_data;\r\n                                        });\r\n                                        setReincLevelIncrease(0);\r\n                                    }}\r\n                                >Accept</button>\r\n                                {affordablePurchases.map((val, index) => {\r\n                                    // return <ResideOrderCard data={val} key={index} />\r\n                                    return <ResideOrderCard data={val} key={index} />\r\n                                })}\r\n                                <h2 style={{ marginBottom: '3px' }}>Future Purchase Order</h2>\r\n                                <button\r\n                                    onClick={() => {\r\n\r\n                                        ReactGA.event({\r\n                                            category: \"residue_interaction\",\r\n                                            action: `accept_future_order`,\r\n                                        });\r\n\r\n                                        let finalLevels = {};\r\n                                        futurePurchases.forEach((purchase) => {\r\n                                            finalLevels[purchase.params.key] = purchase.desiredLevel\r\n                                        });\r\n                                        setDesiredLevels({});\r\n                                        setRunTimeData((curData) => {\r\n                                            let temp_data = { ...curData };\r\n                                            let leftoverRes = mathHelper.subtractDecimal(currentResidue, runningCost);\r\n                                            temp_data.CurrentResidueBD = { mantissa: leftoverRes.mantissa, exponent: leftoverRes.exponent };\r\n                                            for (const [key, value] of Object.entries(finalLevels)) {\r\n                                                temp_data[key] = value;\r\n                                            }\r\n                                            return temp_data;\r\n                                        });\r\n                                        setReincLevelIncrease(0);\r\n                                    }}\r\n                                >Accept</button>\r\n                                {futurePurchases.map((val, index) => {\r\n                                    // return <ResideOrderCard data={val} key={index} />\r\n                                    return <ResideOrderCard data={val} key={index} />\r\n                                })}\r\n                            </div>\r\n                        )}\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\residueMapping.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\sample_string.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\BlinkingDot.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\Dot.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\farmingHelper.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\header.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\helper.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\itemMapping.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\ItemSelection copy.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\ItemSelection.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\math.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\navBar.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\petHelper.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\reincHelper.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\search.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\Tooltip.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\useDimensionHook.js",[],[],{"ruleId":"262","severity":1,"message":"263","line":1847,"column":8,"nodeType":"264","endLine":1847,"endColumn":18,"suggestions":"265"},{"ruleId":"262","severity":1,"message":"263","line":100,"column":8,"nodeType":"264","endLine":100,"endColumn":18,"suggestions":"266"},{"ruleId":"262","severity":1,"message":"263","line":87,"column":8,"nodeType":"264","endLine":87,"endColumn":18,"suggestions":"267"},{"ruleId":"262","severity":1,"message":"263","line":30,"column":8,"nodeType":"264","endLine":30,"endColumn":18,"suggestions":"268"},{"ruleId":"262","severity":1,"message":"263","line":142,"column":6,"nodeType":"264","endLine":142,"endColumn":16,"suggestions":"269"},{"ruleId":"262","severity":1,"message":"263","line":31,"column":8,"nodeType":"264","endLine":31,"endColumn":18,"suggestions":"270"},{"ruleId":"262","severity":1,"message":"263","line":229,"column":8,"nodeType":"264","endLine":229,"endColumn":18,"suggestions":"271"},{"ruleId":"262","severity":1,"message":"272","line":307,"column":9,"nodeType":"264","endLine":307,"endColumn":100,"suggestions":"273"},{"ruleId":"262","severity":1,"message":"274","line":479,"column":9,"nodeType":"264","endLine":479,"endColumn":63,"suggestions":"275"},{"ruleId":"262","severity":1,"message":"263","line":44,"column":8,"nodeType":"264","endLine":44,"endColumn":18,"suggestions":"276"},{"ruleId":"262","severity":1,"message":"263","line":355,"column":8,"nodeType":"264","endLine":355,"endColumn":18,"suggestions":"277"},"react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'isMobile'. Either exclude it or remove the dependency array. Outer scope values like 'isMobile' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["278"],["279"],["280"],["281"],["282"],["283"],["284"],"React Hook useMemo has a missing dependency: 'statModePets'. Either include it or remove the dependency array.",["285"],"React Hook useMemo has unnecessary dependencies: 'petWhiteList' and 'useExpedition'. Either exclude them or remove the dependency array.",["286"],["287"],["288"],{"desc":"289","fix":"290"},{"desc":"289","fix":"291"},{"desc":"289","fix":"292"},{"desc":"289","fix":"293"},{"desc":"289","fix":"294"},{"desc":"289","fix":"295"},{"desc":"289","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"289","fix":"301"},{"desc":"289","fix":"302"},"Update the dependencies array to be: []",{"range":"303","text":"304"},{"range":"305","text":"304"},{"range":"306","text":"304"},{"range":"307","text":"304"},{"range":"308","text":"304"},{"range":"309","text":"304"},{"range":"310","text":"304"},"Update the dependencies array to be: [data, statMode, statModePets, useExpedition, manualEnabledPets, priorityList, priorityMap, petWhiteList]",{"range":"311","text":"312"},"Update the dependencies array to be: [data, manualEnabledPets]",{"range":"313","text":"314"},{"range":"315","text":"304"},{"range":"316","text":"304"},[55333,55343],"[]",[3957,3967],[2471,2481],[785,795],[4375,4385],[1012,1022],[8592,8602],[11713,11804],"[data, statMode, statModePets, useExpedition, manualEnabledPets, priorityList, priorityMap, petWhiteList]",[19069,19123],"[data, manualEnabledPets]",[1335,1345],[14188,14198]]